<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Alliot&#39;s blog</title>
  
  <subtitle>Maker &amp; Developer</subtitle>
  <link href="https://www.iots.vip/atom.xml" rel="self"/>
  
  <link href="https://www.iots.vip/"/>
  <updated>2024-09-01T11:00:00.000Z</updated>
  <id>https://www.iots.vip/</id>
  
  <author>
    <name>Alliot</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Cloudflare Tunnel前置代理支持</title>
    <link href="https://www.iots.vip/post/cloudflare-tunnel-proxy-support"/>
    <id>https://www.iots.vip/post/cloudflare-tunnel-proxy-support</id>
    <published>2024-09-01T11:00:00.000Z</published>
    <updated>2024-09-01T11:00:00.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;　　赛博大善人的 Cloudflare Tunnel(前 Argo Tunnel) 只需要一个域名、一个 Cloudflare 帐号便可以将服务接入到 Cloudflare 的网络，提供了非常方便的内网穿透方式， 同时还提供了 ZeroTrust、防护等功能， 而这一切基本几乎都是免费的，相信看到此文的小伙伴已经薅上一段时间了，不过由于 Cloudflare Tunnel 官方的服务节点分布有限，在部分时空&amp;#x2F;场景下，Tunnel 连通性会面临一些挑战， 这时候要是能够通过前置代理去连接到 Tunnel 服务，问题便能得到解决，可惜&lt;a href=&quot;https://github.com/cloudflare/cloudflared/issues/350#issuecomment-1706842883&quot;&gt;官方目前并没打算支持这个特性&lt;/a&gt;。</summary>
    
    
    
    
    <category term="折腾" scheme="https://www.iots.vip/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="Docker" scheme="https://www.iots.vip/tags/Docker/"/>
    
    <category term="Cloudflare" scheme="https://www.iots.vip/tags/Cloudflare/"/>
    
  </entry>
  
  <entry>
    <title>CDN场景下配置Vaultwarden启用fail2ban</title>
    <link href="https://www.iots.vip/post/configuration-vaultwarden-enable-fail2ban-over-cdn"/>
    <id>https://www.iots.vip/post/configuration-vaultwarden-enable-fail2ban-over-cdn</id>
    <published>2024-06-25T03:16:52.000Z</published>
    <updated>2024-06-25T03:16:52.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;　　&lt;a href=&quot;https://github.com/dani-garcia/vaultwarden&quot;&gt;Vaulwarden&lt;/a&gt; 是一个开源自托管的密码管理工具，这个项目使用 Rust 实现了一套 Bitwarden Server API， 很多小伙伴都用它来管理密钥与凭证。 本文将利用 &lt;a href=&quot;https://github.com/fail2ban/fail2ban&quot;&gt;fail2ban&lt;/a&gt; 来实现在 CDN 场景下的防暴力破解。</summary>
    
    
    
    
    <category term="折腾" scheme="https://www.iots.vip/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="Linux" scheme="https://www.iots.vip/tags/Linux/"/>
    
    <category term="Nginx" scheme="https://www.iots.vip/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>中银香港丝滑开户总结</title>
    <link href="https://www.iots.vip/post/summary-of-smooth-account-opening-in-boc-hong-kong"/>
    <id>https://www.iots.vip/post/summary-of-smooth-account-opening-in-boc-hong-kong</id>
    <published>2024-05-25T06:00:00.000Z</published>
    <updated>2024-05-25T06:00:00.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;我在这里分享一下我最近在香港中银行成功开户的经历。</summary>
    
    
    
    
    <category term="折腾" scheme="https://www.iots.vip/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="杂谈" scheme="https://www.iots.vip/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>从指定路径更新雷池WAF证书</title>
    <link href="https://www.iots.vip/post/update-safeline-ssl-cert-from-file"/>
    <id>https://www.iots.vip/post/update-safeline-ssl-cert-from-file</id>
    <published>2024-04-02T07:50:16.000Z</published>
    <updated>2024-04-02T07:50:16.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;　　雷池(SafeLine) 是长亭科技部分&lt;del&gt;开源&lt;/del&gt;的一款 Web 防火墙，社区版本已经有较为完善的 WAF 功能，可以满足个人项目的基本 Web 防护需求。 不过目前(v5.2.0)雷池对于证书的操作，仅支持从 UI 导入或使用 &lt;a href=&quot;https://letsencrypt.org/docs/challenge-types/#http-01-challenge&quot;&gt;Let’s Encrypt 的 HTTP-01 验证方法&lt;/a&gt; 来配置证书， 这对于使用 DNS 验证的短期证书用户来说非常不方便，可以看到社区有这样的需求的小伙伴还是挺多的： &lt;a href=&quot;https://github.com/chaitin/SafeLine/issues/782&quot;&gt;[建议] 证书增加使用路径导入方式 | Github issue&lt;/a&gt;， 因此便写了个小脚本来实现这个需求。</summary>
    
    
    
    
    <category term="折腾" scheme="https://www.iots.vip/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="Python" scheme="https://www.iots.vip/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>AWS ECS使用EBS作为Volume</title>
    <link href="https://www.iots.vip/post/aws-ecs-fargate-ebs-volume"/>
    <id>https://www.iots.vip/post/aws-ecs-fargate-ebs-volume</id>
    <published>2024-03-31T05:34:35.000Z</published>
    <updated>2024-03-31T05:34:35.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;　　在 &lt;a href=&quot;/post/terraform-aws-ecs-jenkins.html&quot;&gt;基于Terraform在AWS ECS中构建Jenkins持续集成体系&lt;/a&gt; 一文中， Alliot 采用了 EFS 作为 Jenkins 容器的数据卷，直接挂载了 &lt;code&gt;/var/jenkins_home&lt;/code&gt; 目录。&lt;br&gt;正如评论区提到的， 我们在使用 bursting 模式的 EFS 时，遇到了 IO 性能的问题， 虽然 master + slave 架构的 Jenkins 将构建任务分发到了 slave 节点，减少了 master 节点的压力，但是在启动构建任务时， master 节点依然会有大量的 IO 操作， 这个时候会导致 bursting 模式下的 EFS 瞬间打光 Credit 从而导致整个 master 挂掉。当然，我们可以使用 Provisoning 模式缓解性能问题，但其价格又非常贵，性价比不高。&lt;br&gt;　　好在从今年(2024)的一月开始， AWS ECS 的 Fargate &lt;a href=&quot;https://aws.amazon.com/cn/blogs/aws/amazon-ecs-supports-a-native-integration-with-amazon-ebs-volumes-for-data-intensive-workloads/&quot;&gt;支持使用 EBS 卷作为 Volume&lt;/a&gt; 了。 目前官网的文档还比较分散，这里小记一些需要注意的点。</summary>
    
    
    
    
    <category term="IaC" scheme="https://www.iots.vip/tags/IaC/"/>
    
    <category term="Terraform" scheme="https://www.iots.vip/tags/Terraform/"/>
    
    <category term="AWS" scheme="https://www.iots.vip/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>浅浅的调教一下国产智障电视</title>
    <link href="https://www.iots.vip/post/fxxk-android-tv"/>
    <id>https://www.iots.vip/post/fxxk-android-tv</id>
    <published>2024-02-01T05:05:51.000Z</published>
    <updated>2024-02-01T05:05:51.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;　　双十一给家里买了台电视——酷开M85（创维的子品牌），作为典型的国产品牌“智能电视”，本土特色自然少不了，包括但不限于各种广告满天飞、无法安装第三方应用、后台自动热更新越更越卡等。恰好年前回家早，浅浅的调教折腾一下它。</summary>
    
    
    
    
    <category term="折腾" scheme="https://www.iots.vip/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="硬件" scheme="https://www.iots.vip/tags/%E7%A1%AC%E4%BB%B6/"/>
    
    <category term="Android" scheme="https://www.iots.vip/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Nginx proxy_pass到AWS ALB的504问题</title>
    <link href="https://www.iots.vip/post/nginx-proxy-pass-aws-alb-504-issue"/>
    <id>https://www.iots.vip/post/nginx-proxy-pass-aws-alb-504-issue</id>
    <published>2024-01-23T12:00:00.000Z</published>
    <updated>2024-01-23T12:00:00.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;　　我们的部分后端服务正在经历容器化的改造， 由于历史包袱，现网的网关等设施无法一次性迁移到 k8s 集群中， 因此使用 Nginx &lt;code&gt;proxy_pass&lt;/code&gt; 转发到 AWS ALB 这样一个曲线救国的临时方案。&lt;br&gt;　　但是在使用时，我们发现一段时间后 Nginx 出现了 504 的错误，检查后端服务均是正常的，而单独访问 ALB 也是正常响应的，因此便有了此文。</summary>
    
    
    
    
    <category term="AWS" scheme="https://www.iots.vip/tags/AWS/"/>
    
    <category term="Linux" scheme="https://www.iots.vip/tags/Linux/"/>
    
    <category term="Nginx" scheme="https://www.iots.vip/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>OpenV**手动指定路由规则</title>
    <link href="https://www.iots.vip/post/openvxx-manual-static-route-configuration"/>
    <id>https://www.iots.vip/post/openvxx-manual-static-route-configuration</id>
    <published>2023-12-20T11:00:00.000Z</published>
    <updated>2023-12-20T11:00:00.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;　　我们在远程办公时通常需要通过内部 OpenV** 来访问公司内部的敏感系统， 默认情况下， OpenV** 会临时修改本地路由表，将所有流量都指向了 v**_gateway，导致一些本地规则被覆盖，甚至无法打开部分国内的网站，带来了很多不便。这里记录一下手动指定路由规则的配置，仅让指定的网段或域名走 gateway。</summary>
    
    
    
    
    <category term="折腾" scheme="https://www.iots.vip/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="Linux" scheme="https://www.iots.vip/tags/Linux/"/>
    
    <category term="网络" scheme="https://www.iots.vip/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>本地模拟CNAME解析</title>
    <link href="https://www.iots.vip/post/cname-record-simulate"/>
    <id>https://www.iots.vip/post/cname-record-simulate</id>
    <published>2023-11-04T04:00:00.000Z</published>
    <updated>2023-11-04T04:00:00.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;　　众所周知，我们可以通过修改本地 hosts 文件来定义一个域名的指向，这个过程我们可以简单的理解为在本机创建了一个优先级很高的 DNS A 记录，实现了某种程度上的域名劫持， 利用这种特性我们可以实现诸如广告屏蔽、本地测试、别名等需求，但 hosts 机制仅仅能定义域名与 IP 对应关系， 并不能模拟其他的 Record 类型， 比如 CNAME 记录。</summary>
    
    
    
    
    <category term="Linux" scheme="https://www.iots.vip/tags/Linux/"/>
    
    <category term="网络" scheme="https://www.iots.vip/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Nginx搭建WebDAV服务</title>
    <link href="https://www.iots.vip/post/nginx-webdav-server"/>
    <id>https://www.iots.vip/post/nginx-webdav-server</id>
    <published>2023-10-23T15:00:00.000Z</published>
    <updated>2023-10-23T15:00:00.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;　　迫于无法忍受现成的 NAS 系统的限制，Alliot 正在着手将最常用的一些服务剥离出来，方便迁移与定制， WebDAV 首当其冲， Alliot 在许多场景下的同步与备份都依赖它。&lt;br&gt;　　WebDAV 作为一种基于HTTP&amp;#x2F;HTTPS协议的网络通信协议，预想是非常简单的，然而在具体动手的过程中还是遇到了挺多坑，Obsidian 的 Remotely-save 便是其中一个。&lt;br&gt;　　本文将基于 Nginx&amp;#x2F;Tengine 手把手构建一个 WebDAV 服务。</summary>
    
    
    
    
    <category term="折腾" scheme="https://www.iots.vip/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="Linux" scheme="https://www.iots.vip/tags/Linux/"/>
    
    <category term="Nginx" scheme="https://www.iots.vip/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>迎来船新版本的Hexo+NexT</title>
    <link href="https://www.iots.vip/post/new-hexo-workflow"/>
    <id>https://www.iots.vip/post/new-hexo-workflow</id>
    <published>2023-09-01T04:44:03.000Z</published>
    <updated>2023-09-01T04:44:03.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;　　自从 2017 年使用 Hexo+NexT 作为博客框架以来，已经过去好几个年头。就如前面那篇&lt;a href=&quot;/post/hexo-artalk-comment.html&quot;&gt;hexo使用Artalk评论系统&lt;/a&gt; 博客所言，由于 Alliot 之前对 NexT 主题与部分插件做了许多侵入式的魔改，基本没有对其做过日常的版本升级维护，因此，已经没有平滑升级的可能性。在一次插件失效的契机下，终于下定决心推倒重建。 本文记录了这一次重建的过程以及在维护模式上相比旧版本的改进。</summary>
    
    
    
    
    <category term="折腾" scheme="https://www.iots.vip/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="hexo" scheme="https://www.iots.vip/tags/hexo/"/>
    
    <category term="CI" scheme="https://www.iots.vip/tags/CI/"/>
    
  </entry>
  
  <entry>
    <title>优雅的处理Git多帐号与代理问题</title>
    <link href="https://www.iots.vip/post/elegant-solution-git-multiple-accounts-proxy-issues"/>
    <id>https://www.iots.vip/post/elegant-solution-git-multiple-accounts-proxy-issues</id>
    <published>2023-08-06T14:00:00.000Z</published>
    <updated>2023-08-06T14:00:00.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;　　在工作中，常常会容易遇到一台电脑用多个 Git 账号的场景，比如账号 company 账号是工作用的，而账号 personal 是自己个人用的。 由于 Git 本身并没有多账号的机制，导致我们在默认设置下无法很好的区分哪个仓库使用哪个账号。 同时，在某些众所周知的场景下，我们无法直接访问到 Github 仓库，需要走一层 proxy 来加速我们的代码拉取与推送速度， 本文将使用 SSH config 相对优雅的解决这些问题。</summary>
    
    
    
    
    <category term="Linux" scheme="https://www.iots.vip/tags/Linux/"/>
    
    <category term="Git" scheme="https://www.iots.vip/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>验光配镜扫盲</title>
    <link href="https://www.iots.vip/post/choose-glasses"/>
    <id>https://www.iots.vip/post/choose-glasses</id>
    <published>2023-04-04T16:00:00.000Z</published>
    <updated>2023-04-04T16:00:00.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;&amp;emsp;&amp;emsp;眼镜是心灵的窗户，不巧，我的窗户不是很标准，从小到大，戴过很多副眼镜，从三甲到爱某眼科、宝某、博某，呱呱呱一顿操作下来自己啥也不懂是什么意思，最近由于眼镜被我一屁股坐坏了，就在附近的眼镜城配了眼镜，之后就有了此文。</summary>
    
    
    
    
    <category term="杂谈" scheme="https://www.iots.vip/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>Prometheus relabel实现动态metrics path</title>
    <link href="https://www.iots.vip/post/prometheus-metrics-path-relabel"/>
    <id>https://www.iots.vip/post/prometheus-metrics-path-relabel</id>
    <published>2023-03-02T11:00:00.000Z</published>
    <updated>2023-03-02T11:00:00.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;　　Prometheus 的 relabel 功能可以在目标的 label 被抓取之前重写它，每个采集配置可以配置多个 relabel，并按照配置的顺序来应用于每个 target 的 label。利用这个特性，我们可以实现动态的 metrics-path。</summary>
    
    
    
    
    <category term="运维监控" scheme="https://www.iots.vip/tags/%E8%BF%90%E7%BB%B4%E7%9B%91%E6%8E%A7/"/>
    
    <category term="可观测性" scheme="https://www.iots.vip/tags/%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>基于Terraform在AWS ECS中构建Jenkins持续集成体系</title>
    <link href="https://www.iots.vip/post/terraform-aws-ecs-jenkins"/>
    <id>https://www.iots.vip/post/terraform-aws-ecs-jenkins</id>
    <published>2022-10-14T11:30:00.000Z</published>
    <updated>2022-10-14T11:30:00.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;　　之前我们旧的 Jenkins 集群跑在 AWS EC2 上，近期由于大量新增 Job 以及大量构建任务的并行，导致集群资源吃紧，不得不新增更多的 Slave 来应对。为了降低成本，同时获得更好的资源弹性，Alliot 打算基于 Terraform 在 AWS ECS 中构建新的 Jenkins 持续集成体系。容器提供了更细的资源粒度，拥有更好的资源弹性和资源利用率。</summary>
    
    
    
    
    <category term="IaC" scheme="https://www.iots.vip/tags/IaC/"/>
    
    <category term="Terraform" scheme="https://www.iots.vip/tags/Terraform/"/>
    
  </entry>
  
  <entry>
    <title>Terraform启用provider缓存</title>
    <link href="https://www.iots.vip/post/terraform-provider-cache"/>
    <id>https://www.iots.vip/post/terraform-provider-cache</id>
    <published>2022-10-12T11:30:00.000Z</published>
    <updated>2022-10-12T11:30:00.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;　　我们在开始一个 Terraform 工程项目的时候，首先要做的就是 &lt;code&gt;terraform init&lt;/code&gt;， 这个动作会在当前工作目录下创建 &lt;code&gt;.terraform&lt;/code&gt; 目录，并联网下载项目所需要的 &lt;code&gt;provider&lt;/code&gt; 到该目录下。 即便是多个项目使用的是同样的 &lt;code&gt;provider&lt;/code&gt;，但每个工程项目仍然都有自己单独的 &lt;code&gt;.terraform&lt;/code&gt;, 这不仅仅会浪费磁盘空间，还会花费很多不必要的时间去等待联网下载 &lt;code&gt;provider&lt;/code&gt;，好在 Terraform 官方为我们提供了缓存目录。</summary>
    
    
    
    
    <category term="IaC" scheme="https://www.iots.vip/tags/IaC/"/>
    
    <category term="Terraform" scheme="https://www.iots.vip/tags/Terraform/"/>
    
  </entry>
  
  <entry>
    <title>filezilla-server批量创建用户</title>
    <link href="https://www.iots.vip/post/batch-create-filezilla-server-ftp-user"/>
    <id>https://www.iots.vip/post/batch-create-filezilla-server-ftp-user</id>
    <published>2022-09-25T12:00:00.000Z</published>
    <updated>2022-09-25T12:00:00.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;　　有一个比较奇怪的需求，需要给 FileZilla-server 新建大量的 ftp 用户，为其配置随机密码，指定单独家目录与用户组等。</summary>
    
    
    
    
    <category term="折腾" scheme="https://www.iots.vip/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="Python" scheme="https://www.iots.vip/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>其实可以做一个不那么“浑蛋”的人</title>
    <link href="https://www.iots.vip/post/mind/be-a-less-ass-person"/>
    <id>https://www.iots.vip/post/mind/be-a-less-ass-person</id>
    <published>2022-09-12T11:22:33.000Z</published>
    <updated>2022-09-12T11:22:33.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;　　一直有对看的书、看的剧做记录的习惯，翻看自己的豆瓣，在工作后浮躁、忙碌的状态下，已经很长一段时间没有更新了。这几年经历了很多，一直没能停下来好好的总结与反思，恰好再一次遇到了《非暴力沟通》</summary>
    
    
    
    
    <category term="心思随笔" scheme="https://www.iots.vip/tags/%E5%BF%83%E6%80%9D%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>iterm2自动输入堡垒机TOTP验证码</title>
    <link href="https://www.iots.vip/post/iterm2-jumpserver-totp-autocomplete"/>
    <id>https://www.iots.vip/post/iterm2-jumpserver-totp-autocomplete</id>
    <published>2022-08-18T10:31:01.000Z</published>
    <updated>2022-08-18T10:31:01.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;　　堡垒机强制启用了 MFA 双因子认证，每次都需要打开 APP 输入验证码，对于登录频繁的人来说非常不方便，于是利用 &lt;code&gt;expect&lt;/code&gt; 与 &lt;code&gt;oath-toolkit&lt;/code&gt; 完成了自动登录。（友情提示：本处堡垒机为仅内网可访问，且为边缘测试系统环境，出于安全考虑请不要在重要环境下使用）。</summary>
    
    
    
    
    <category term="折腾" scheme="https://www.iots.vip/tags/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>logrotate服务错误:read-only filesystem</title>
    <link href="https://www.iots.vip/post/logrotate-service-read-only-filesystem"/>
    <id>https://www.iots.vip/post/logrotate-service-read-only-filesystem</id>
    <published>2022-08-18T10:30:01.000Z</published>
    <updated>2022-08-18T10:30:01.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;　　一台服务器配置了 logrotate 来对 tomcat 日志进行切割，手动执行 &lt;code&gt;logrotate /etc/logrotate.conf&lt;/code&gt; 的时候是正常,但是&lt;code&gt;systemd timer&lt;/code&gt; 触发的  &lt;code&gt;logrotate.service&lt;/code&gt; 状态为 failure， 手动执行 &lt;code&gt;systemctl status logrotate.service&lt;/code&gt; 可以看到报错信息：&lt;code&gt;logrotate[2870734]: error: error opening /usr/local/tomcat/logs/catalina.out: Read-only file system&lt;/code&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="https://www.iots.vip/tags/Linux/"/>
    
  </entry>
  
</feed>
