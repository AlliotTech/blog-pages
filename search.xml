<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2018-3-19</title>
    <url>//post/mind/2018-3-19.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="470dab78dcf48f5913f2bab98f881b7bc1fbd80247fec5ff162f51a3f20821ca">6ff8d433cb8c932de862ce3d43c0a5ee8c783dde5363148324fafaa4b8ba5a9a61cb7ed1bf311b4780eba79cd3b34d5974c2e0f85edc03bb8795638bab0364fc4a50f9135133a7bdcf35e01fc64c3646d8b22f36ed8ef167aff423366e2c5c680b8f97b974d3947594c3e80c69152a4d6df2e49faa4c5abb3dec84f1cad77c70011c8ef4fd411b929fa52eb38d0e7caed1d944d0d6a329e4ede68ffa698f7d234ca7e53b2d1b3b7736c6d3b84c25ff508a8678d2a20c3fb9777edd9004e8b0dc4c125c53bacd81dccd533ee9ebe2fb802a935764a53fda87cb14b81482259a39e090f6752e204ffa9f486ae1ba7de117b77b7f23a5d962de79ecc430cf8603647932e343f3677a2667a6a77dda671eca86be5713bac8e86c506c8bfad8a53f442ab8f4db156106f4ee5bed6ba16f655521649d297b25714ccaf733ce2aca7c839e9c3ddba915ede195052590f0c610c5e780367466b18625c8739ce84f28bd69e40349c5549143402866936eb22d615efbb972a655877d5a47c05934f857578a92643d9313f2a70d45d908d6e6be941e687a287376a8dc135bd9af61976da65eedad97ec40068dd056f16c5a7478e55d7aab7032067e35d7681a2b472b5ec253b67fac34e13e77668ab0ab2a39a5afc2b7f54f12ef8d37cc2cb77361d2bed9c2d8669fbe7901dd4bc28d97d1f2e8de17bd18647037c42a81bc645a7c3ff575c3143796265f985ee7d7c982f54915d657c089e72c24bca4272f59ae47562971bb912ec17742ccb1c0e459f4dcc0f0678554b3a2d159ce578f95f85c6325edf84a51822c18aca15d936d6608fec983c7a75f7fd46442ee8acd33adef512030a60e9f05c15cf3a519d128216a338977d4fec476a984a7a4bdc2d36b3355e9cdf87506cf8b3fd06413c52f375c41e070a4a2e3aa24e48b18147602ae1ccc17ceae48a12b0b5e0f00d674bfe797ada03395a76f3d0ba05a7b2a4f55fa99cc77a6cedc3628c8efc2c18c9b5a3be620901b2ec9a5690a98698c76b36a3402757bfbdecb3c70918cf42694c6d2fe64147fc5570bcdd63b4b50497c6834e5161ac899ecf215b917fe6041200581b48b4b761bce0eabeb1999ec9b7c51c36f067e056d9c80a3307d45cf222034be073ec5b95a45f3d6253484879deb6fc43f1c3fb375ccafcc0808b85b7be66869a3652d156d4b9dc6af6de78d04f43dd55bfa54be4c8c987249157ae645c2beea2a82a3e5aa7dcf0ec4f5dd4ee1516812ae7d4a2d704762e7318e75888863a95ea6015d14df13cdb270a2d686cff1751659050675dd51589d1bfc24da8bf41dc2506c96ad9b319af597212bd5a7d254c89a3aa1641823fc629dfeab9ed5e7f0660096873dca61c35abc362936ccea5c1852a8bb6058b8cf5f3efb11b7958cbad87ca4a281f8c1e1e2d7fa0f4675348aa960f1a7e332e48398f6371f891d5067ed2bb28ec0c906f7e886127b1fcc1fffab0125a35dd9f9cf175f5dc0b83ec2e8d3e197f4938606d437a8f8ba558a35f91eaf4aa14001fa2542a23e61ddcfbe88fbbb7a309b6e767d013b8d12bbd67df8802648c6d57a5d0d4828dbf5c55b5df5658090c30f9adab7eff91cc0cb238bf0b5a7ddaff2ad0b9995c0275a27c874addb93a4b1dadadbdda707daaaef0794bcac548fb639efaa97e87632978c3127ff5435ded84923efd0a7bc498bd4571a5db0197cf07775078b9c567d013358bd2815cad368c0baf9adc74be4835a52be55c95a28f32f1567ec76288a90e86158fbbdd335d0c42aead6deb59f91666d9440fd7db8ed16da153148417738cfb2850de21e2788d05bf639c3848672c6f4459df7eae509af37cad173a5e73f9cd300b15ec80b9b574ff9d4d819849f91b7bf9fae3d763711c781fea91bbf1600ae63b38a2d53c98659024a9f15af54e220eff4080dd50b846ad22eacf4930904ad6c57b6c3fa617aad863f6b6b7e3421296689021ef9122d5dce1c3ed74f6e7d8cc255b2e2b0108c379da9990ea73d7e1de1e4a44940d9b5a79f176189c48828089171a0747bf901411899638c52978920729645c8a41fcde747b0d8ffa3dedf0220171aa0177db8b50a59f5b9bbd4a1312ed2c9a5208715fa80c24c488014e22e5c159ed9000f87eb73e1a85c7ba5036348d4b76228b68c363d1019b503220b9c11755b4378343f3469da080f6378e7f6a46f991cd2857d7c16cbc8923d4ddcb5db6bb7a933282a1cf7e048c63d471df6783b195f4bece8d0012181af31e601398576345ef8c504c185cc9b4885a7d8651c90f47514efceff667f72811dcc439ea391845f0ff7cf27ee347b24a2278dd73b6996303cab311b85188de7f1aa405ac50f03970a3f60b7db1c24f817b352bdb99cb08249bfeaad98f843a434306cda2c4bebe5ede1e90df8b4311f4f79ed1c32515492ef8405d34d35badd2b7ea91d1d70e23e513377652a0017754710c7f502ae2d32e50d08c1fca862103e61a3009ba0167bbf8cd08138acf4dcd0439083b94245c2541395d06bd20a789e0ff4f7d0f3199e65825ec469b3c8779f4fd92c0e27820c47bb79d0dd53acd14ba9181b078377736cbfa1536105a73136756a9fdcf4f819c1f83f4491ef7d9b4fa8126f3f617653d9430364a2ab026b063857f152bd00f68b376c38c84d</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-flip">
      <input class="hbe hbe-input-field hbe-input-field-flip" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-flip" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-flip" data-content="本文系个人日记，已加密，访客朋友请移步其他文章">本文系个人日记，已加密，访客朋友请移步其他文章</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>心思随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>2018-4-10</title>
    <url>//post/mind/2018-4-10.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="741eae1e0b92a02e7e1ca8acabd29aae90e057a1bc630f340c8064fed1f65455">6ff8d433cb8c932de862ce3d43c0a5ee51b6a61a1d275633a8e06d5f98fa8abe7c2f1106d43cb4fc55691f8c36dc94ccbb65607e80c7a9c061c1f36be4dfd4522328d4abf332b0a5473982ecfec3f990b2255409fcb2aff35daab14786d0b327ceaa718d7c6d0d97cccc4f5c339e627885df2f6e2ba35722661af3ff4d685086bf27d8e93aa5d4f5702e1a29a3319e94207562fa97fec62cde730bcd9fe085d3aa48f55e75b6e4fecd74d52be09d826f6deb4487c70e6e28606bd1f0b39f9b0069637c8f01b3540d11c7876c0fc7b3370790bf9cedb9fc064daca3ee69dafbee538dca68e92fd5b9b1b540fc9d8fbcc4dd89dda14231300ca431a08b5e02d67ea9408727a9b123d5403be5f6d80c8450cbe8c6d41fb34b7977409e136f11c7669c9546dc0135d8704ae47af948c1257153732acade793983f7e213bff66e6e1f4dc40e3bc658c7abcac068d4a759021a15c08f3499af552b8c5045901d20f86ce93ed4398b198829cd98d326aa948571cfd6ddc149e5679e74d1df0da8d2fc883a8c51b1101a7e63c36ea35f09850ee643cddbad3938830e0b5ef42e746dd79c2f8e6741f016b961f222009c55934b2f0f00e89ce2cdf858a4d08f002222eb6996efc180acb76788de37d25ad40dd881be227e9e5eb4ceb96d120c392513aca0ad166faff20b188dd00c1ce1e0f122876b9a7ee8b7ddf2a1ba2a25fcd5da6a5431436f44eab4d169ced167fabe0b8c19eaa95a24b0dbd72628b2aadf9047448010b6cb9f9a79d5b858cc3d2193152c3eb12c86ae97ad9b6de27075f0f6466c7bbd56e1aead0dbbf195af9bfbf5f52477c29f18d88bc01558fec68ad8f576a3563900d074a97e91e56b320555f436f6f0b71324c6151d4024fab8f42220b0c299cd86274f96517dbed207bb284d0b24a99c11f7307181f01ba02a86212f213bd4c798bf3c9df4166fe31c3ab0606adb7bb05eee48fc843267fc02643d8a25ba93e490af2b34a13fad0d5709195800424abf15be008133db9d92134b0a5136d072e9af1de4c00dee37dc7bd0456fff1be84b252d284dfbc04f6a3f065b2598223c08f701cbf7a1627a23b60a23d2718d20a13c227b45ad257e4c7cf0722693d18c6d855fe77283ff068a10d41bf86a3428c1f44aa0603e234b272d1860b674a9bc0b1805f21d0927e4db4d69a15955acaeb84a6293e926fcf4028b3aaabe9392b900cc96057e5d25823d24b80c58d1071e0b2d7eef729061b34e01d71d40a271ff909b63d01c6c17dae92792c9791a0d2d5358bd689cd07f0d6114acd14c075853383b96039fe9a78ee93222cfc5833a55f422f2635aa9acdf018b7f3d959a03270be72ae3d0c729067336dabda640618cf9d23167ed5f4a89b8fa24693abfafcabda13c79cd54a399da6c843d6492859435cb5b3be3e4d4ba733241ffacd3b42da965791249e72378603c2428be1b0dd6e7e64b7177257f825f794df30fa44dcb2162efda9f29c4534274bebadc02497dda7cd949049fa7dcfecc3576812d72917a5cd8d76aa07fe8ec4f6bb6f4f42754f71dc4824bde8872a98aa7d8912ded9ba138ef20931bde96b047b9d415fdfcdbf82972f42649fa49b90c8fe46ffa85e93383814cb1b68335a775378ccbc62e590dd45f991221537b38a2ac68ac6ff210c5063940b1d94f9ff1dbf66d3eedcbf08a5662b75b66c21928f2450210ae3e829f5fe024744a4ec493eac1dd6bbae64f831d81324219bd31cc533253da73367e8dc168d971b9fcb64fbf9f42ea47abc6ebccd69c9ed0f0f81cbc60d1355418f0d8d7d2e841c39c5ec743f41d1c341eca138c809d1761031250c1675a9d1d763b13fc8829257befed4fa77c2b410474f86b9119a154d5d4d03f80db07afa5f8c6afb60ab71b50f7b57d804d037b411f338ca72e843435e4d29ce6f969cc3532b0ea0944a59a8efb2655037441b0e98e7665318c1b9c1375d90e312e4cd0ec7e224f6f973963d844b5607a9b6cda06ba870119d83da1227f9c401f7b266fa8b72d036aafb3c1973ad7b5f8583e98ee46479aca491f96a9b3514967a438666a01dab8e29ad40abb95dc543d6b99f3e0498cdfb7b7d5ebbd19de42ba2620c0731f9c26e2a4cc8d5d284df7ddd41e176ba19ebc0d98be4661843f65ff818475337b2a05d24412452ddc09bf459534a400b8f1a3a9af24d38dc0a9e50e41d5ebd895557eab008bb0e1a2c570bd33d37d2765b0c94873a8a6fb420a91edf0bc91ebfe1fa92419dd3e4274c1afa7721224d9f2a4ba4f7335f6fcc9f06720e707b8575b19fff188f446f59f4c27670aa12fa2f55b9dbdaf7519d08d16088ae51430df7c27bd69ff138c259823bd4528387388aecc3661b609ca6024a7f301b7fe69a4f520b9f8cb235133981add3218a698e4203af1d19e3250968babc6727e634f9192b3747f76c81d247f2813b3609f8d33101aa9443d7c732b8e3bb4e0d2e5749a034c26c6e5da7b3ac2b508035e69468351f1b7d7786a1fcdcdb3627fac5bfaa90033daa586c4d44ac68ae175bb1d6ea71945f089b6ecb3df879f9d55d5a753a48a199238f97c814fe40e566b0897bd62bbf87836d74b3b79e2e1e1ab6ec5874c7485e300311d50e0ccfbb95c181bce64127fc87de75eaa240fa9094c3edc820aaf11c31bf4cf0a553120bd84a35463e0d8c87132368f933eb557221df3180ef808e4928d6d1ddd5a8ddf6bd80925e1364d889772b0ffb411f832a3ed695920a9d604829b09dbe09c64c28e5e434c9595b39583f5303093023a78d3b7cd477800c2e7baf8caadd0f53dcf1b2c3be88fefb8a53ac86b8b7a3cce06d051d38ef258347127692255cee549dcafbc7aed393f469721d05a123ca992e0594f95910a97aa6798a8cdf59b664e8b414e837a67f04ad95665ea9c5786dadc370ed8e1a90fa1476708fde27d3d5cb5ca98be5b9d8a9a6925be5de7f5bc2bdd4adb141ad7a5795eb50a6447e39c85a14db7b81c22a456ea35a3cfba7953e63f03490703570080264072ee724338373bb32d8cf2338908e33399c5e61543bd52ba770504d63246b2da7a7aa5005300e8229a5f2fee38d500</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-flip">
      <input class="hbe hbe-input-field hbe-input-field-flip" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-flip" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-flip" data-content="<center>本文系个人日记，已加密，访客朋友请移步其他文章~</center>"><center>本文系个人日记，已加密，访客朋友请移步其他文章~</center></span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>心思随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>2017-12-4</title>
    <url>//post/mind/2017-12-4.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="607677dfdde6e63829a72e12dffb9cb71220c2f5953cafefa198e8d1144cbfce">6ff8d433cb8c932de862ce3d43c0a5ee8c783dde5363148324fafaa4b8ba5a9a61cb7ed1bf311b4780eba79cd3b34d5974c2e0f85edc03bb8795638bab0364fc98a50c1f5c698de2867be70d2629103fa49f4f42cc57877365a3be642ac4730070c7d295c466c83dfb317d0681682cde304b0ceecc2f3077e3d4853f711d0e34e10f1a600bb0aabf17ed1c8ce7cf2c5e1b58c5f36b5cbf319abd2ad8f7b5e7ec9e24904fedc70a199265b6ee14007a6bc057283ec6b4c466f016980e4bd264532b8d4184b1e97805e1214effe1ba2f6b36585127ea63defe75e84fb93914a56cabcd921a989fe6d3b912d9854d1996f84bfc47781bca1a8ec09582b7a0f7323264bab735e82d89a44d529c1c2d3f6d355199790f0313625d41242e1e41f82d5b30dc6041e353ad9e3d41495fad613a9f604aef035da09536438aae3a5cbdd2b2604433f581dc87b39c8983024e2c1e63b88594cc2a111fda5774f6d558a8227009cfba80cd842c23ec63297cbab4af40c8ea6c732c4956a8253021e069b19e9bd77975e686f9602a14bd271a545ff9194d4e6c9e5e42fbd1074e8348b49746a4bb905c6f10dc36c8f44bd748d51f81a767d5572eff69bda2522966921b85d402004d94682d33e09b2a7fbdb0daf2f1955c0af825baa696c51e25d5bbab289c42cd52fb1b9134301583f6266c3a8b10e2c96217a8f1a8d08f6406a03b51563345256b46bc1a0948e7633d5b457127c64782466989fa5d8b3eb680e1e9da33f227ec3d6e76704935049f09f1b06d12b26f1ee77bb5b6f08ba0dd377622547a8bb307bf886b8c348c8b976d8381449194547338e3b4855320dced2deaa0970a8af9b7dafd9c6ec84b2f1d9c764726f67d1b2cc5bb0f994e8d180d59e4b90a387acb92a70fbab9574947891f88fc1e898854f01dce29a3418e28ac25b1a69ea01c12ebdb11be036f0f316149737f37bc06fc6f71e8cbed9e5e14c16c8a3f6cd684347b9517975fd4bede53beafc5238bdefeb3a36c0e1dff57d3851be93692b35f39cf8c3a3989dbec68711201b886c7b84716dd65ff334cbad6d51547cad656e5585b9c8789ce674040bf620bda946631207614d4c11f2a477987265183d827935817b1c9a1ab2ccbf8d6dee95678dc79d7062afb86dd6e13504e568a9d4a4d9f3c</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-flip">
      <input class="hbe hbe-input-field hbe-input-field-flip" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-flip" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-flip" data-content="本文系个人日记，已加密，访客朋友请移步其他文章">本文系个人日记，已加密，访客朋友请移步其他文章</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>心思随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>2018-7-2</title>
    <url>//post/mind/2018-7-2.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="7af9b539c262e677d05565c9f85e0709a6107be6234690dc102e0967292f1cba">6ff8d433cb8c932de862ce3d43c0a5eead4f1d9fa8da48192e749fb871fc663b2a19a3c84aa2c9d06b1c2efe30d84d0b5a0c30d4d550eaf0c66c4bf31294de12135625290d2367df82bb62c158c0081bf10e845459d7801135ef51e8ed51f6de102484731e3e3125473bcf1db0fad3ed348741dce2428923c9ca5848fe9afe7d43305aa6a257efbabfa418d15860e97021917edd3748e7bba638fde75ba6fc7be03bb6e32e0ea2d38b8f0cae7fe9d7a326afa2ab9ee96e225dd94fbaef4fa6c83a1ba23fa972cec04010d8158ad143b41a883aa5b7622a178cd21fbea721b14c4405bf516f67161639bdc6e6f3b056c4fdec78b58b3dab2db67f5174a6060a7c147da20190d0f4616977283dafb23cc21738235e9669be2b3fd2c1895c2bea8e9fe79e0a33046739ed20314050747c6f027875dc5b2fe7af24d6073f501a5fc1de215e076041f5ab381c1ee6d1af632fd1be5301de418648357fed77d7e09992ed77a97ed5db3c6a3022f33c3bd459d7e7d099241e1e3cb5ac1f2631b25dcdf332f3443c99c3a668780f55e2119987c2c7979d12564c9515cef7ef14765fe15969ebc04638a75c8bf40d78d10a067df81999f5185c9090ae2e8e87710ab118526f6972e254964a6752e4f6ad168bcb35280c5ccb5885fb983f29db11332887c45e40ae31f4d12d6f260555ae38c17904156c8b4fed9b934a48a2b8fab01a30fa8f125c3007b8fbdc8a99b14c1c94a1d22b9d4679512cfd48ac3c9a3e467aff72470e2f717d3a66eb819d3194e86c42474cb65645a891496345ecafc07a46f86169d141762f532d05013f149687c1bf7df061697a4d3c96d0467c2b985036ad1e16c3cc6f68a0992f3a6987be6caf60f4ba93019c82c5ed45868ce82624f0a18cd8a0ee3b4a2bb8c255531d2a3cd4a1f8c59bbfacc92f9bb687cf06b1fc72dcf0b9aacb3ce35d2dd3f2cee8e52aadfcf5f21e1e0cb8854cbb73de3346e345765b85d916b34833bfb66f410d4e139726926f24dc523a04c094937cc3c64992f7d312ba4b7d0147318b644e9c0ac18180a198827c2d9456b6ed655b33aabf7b6e4355092b6475f113895e8660c0db6ed9638292a06518ac37751767411b328d1c53157af21c5c3f7816a61e22f47bf1ab0b3410d0b427646e88b33f4fc07477512c08f7caabf75dfd40000c039271d563901776b8dc27a6d767160d260aa48dcb0d624bc9251bf488b70739e4e58b84cb6a10628dd69c069152a1d33bc7d5e0da1621bae9e803b8295167087f0b96c064befafc5a838bac5552459d61ec1853e5031523bfca3a279952685ad219f35eb36a027fcd2625862cab03a04a59472e9cdaac59344de9b0966ead382afbd7b0889426b07449a3a0e56098e2a6257cdc1144be8c3b77f5482aaf6262549ed7300f05cc24b27dba2e1ae9d7e2eb3f2a6f21d70b977cebd6647ab497de0cbe798330354ba12f6e46a9afe20d5b6088ff907720049e46ec12788b21b384dfabacda566d0a86693113ec3a233688ec92544b62eeec3b2e4929960a2f575d07e5b429386fe3b9390ed8a5047e3e84b176bd4ab6edf4bdd60d119a8e1e35f41bae17679577d5b6651a0e56d16dc1ac20c2d118530f3a9298a61014dd1db006630abe25e81f</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-flip">
      <input class="hbe hbe-input-field hbe-input-field-flip" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-flip" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-flip" data-content="本文系个人日记，已加密，访客朋友请移步其他文章">本文系个人日记，已加密，访客朋友请移步其他文章</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>心思随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>2018-9-19</title>
    <url>//post/mind/2018-9-19.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="256c33895db0b6ea7a4912c47a7ef1ce74e8ed9675f1ac50d7f1f7903a0f764c">6ff8d433cb8c932de862ce3d43c0a5ee8c783dde5363148324fafaa4b8ba5a9a4827fb6a4866e416339af4647f92787595a4330e0a79cac3c90f9e57bf4bcb1caafc028b25c15924d492a8b082e80289a13e21924a63042cac8f0b961c48e14907c92f63e76cb50985e4eb7e3f8bce5ef5221b47c2165fcda50e42f05d663655d9139b489a95acd219e8fbe6e419c8d97085ecf06631c68b89d57ad9668b61eb285be7989ab65e2dc1959c9da6d28e782e73cbd00b793ba6889e42f82dec13935dde99bc5d49b1fcda8d6b9ecd765ba1b42b53bcb0c75ce7f8cf22617de17f9f643624622ec3bbba7680204472e4d77e630d7261555ee8441e46062466efabb033e5ea2faf0cbe36bf0a7991a57c07a02ee544ed6b4a18aca649c9edee6a03ca8c9cce18c26aa7a76de5a0aa1a93766f37bf7619b405cfca374be9c28ad6cc807e2f204ca1e6ac4e01cde70baa78169e792e2eec617a5defb30b90c05431c576b6a5308e0761e0223424e47efc094420fbd8d282def3186e52edeb22b079384b5314b0799defba08fc145e7dd6ee0cf1aeb3b768468de36faa0fffa1cae898c55acb2df65c1f29b05505b17f0060c7b574b5466da9e5d26d0897a63e6c17eed174cb18305967edc5ebe922a44cc54c2b62a47853bcc5d0ce4d3cc24d9f7ece0030adcf1fdcaf75360a8e365f7cf793a96f05801da2e48625c08006ff143d599b701caf8f260c413205ff5a36c994d9ef41adce0a037226530edc6476ce54a0e3602db22eda95182e3d5918ad71bb4c4863e2d350639dacea0efc1982e21126afad3b71e2088659b1de186bbd7c10ce05ae0e92a16f1bd24d035866a5875c6c0f32351f6c0a2da6b94c3ad02ca25f43c97f891eb2fa2a97eb49ab4b05914390b85a367269e80946156d14868c65de07d8924d06db6304ca2d7208f952ac6c845ec2d45c7fe475e8ba28eeb89ed08b441306735cde52fab9315ec5c8b9e88f623930191ce64420ee87b14af010be6b0e14cb2629b0e2bec5111179b369cde5094976ec08d22621ff0758e20c8bc14a5a9409aa0603dcd553e0ff7fa7f0af423a2cbc7d5ff2b82136ee1d8b86f7c21f9bffa985be43447bb10292af99c2a0e1f86f8bcc356a398eed4711f6be3bd51d7781a541e87a17fb0c151ef71d31d45dc427a2e07151b74ee132d8bc22b91ff9dfc3a1aa8a845bf3fbc5835e24e6599cfe5ac06871578b82719bf37f95ef724e4fd7f9d29331848095111dc6ad026b54b7b7c0b28cfe7f712afe72d341e61e1a28aab5896d06c63ca7b5383180ffc8171e7a22008d5a0d81719bffebd9e52e759523fdf7743c4936aa99489738a1548ce9a1858240814bed9b4801642f32719d2bcaa3b04d5dd5f0459eb56625bc1842b87a6dbac53ba08681889227194511ad53aee8182721cfcc7155735329aa17ebc582cde54cf46c55f055dafd9de086e80a436a50dc51b5911912e1999fd4c4ebb8d4bf6405e496840a62b3361e685625a39c060ff24b7526d222027a9cad8fdc90b101db8c3da8859679acd15de39954cabe433554fa1652debdbf4eb043a32760cb38a32d48b17f24f9c8c316e7fbc9d2c942ccd49169ce52a4dcc4ca49d55f10fc1a1c44cdd0f3dcdbc29512ed246cbf0a68795675809e1ddcb88b1740d9697482cd78712b9ba95bd9fdb4842439b5dd6dbccb0534017a8cd6c86148e50ab8bc48e7c865316ebf443ec20f77134e1ffb86e4d3e09231c42d153359f8aee94d2cba8f715031a32a540fe9b894aa64b29caf9523290b257098f0731806ac569dc4d4e1950451166aa80446b17a19ab9587daac9d9196f60f8efd2d2e24147943a9e11938cb2cffcdff3e6fad3e01eca31a6e</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-flip">
      <input class="hbe hbe-input-field hbe-input-field-flip" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-flip" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-flip" data-content="本文系个人日记，已加密，访客朋友请移步其他文章">本文系个人日记，已加密，访客朋友请移步其他文章</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>心思随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS ECS使用EBS作为Volume</title>
    <url>//post/aws-ecs-fargate-ebs-volume.html</url>
    <content><![CDATA[<p>　　在 <a href="/post/terraform-aws-ecs-jenkins.html">基于Terraform在AWS ECS中构建Jenkins持续集成体系</a> 一文中， Alliot 采用了 EFS 作为 Jenkins 容器的数据卷，直接挂载了 <code>/var/jenkins_home</code> 目录。<br>正如评论区提到的， 我们在使用 bursting 模式的 EFS 时，遇到了 IO 性能的问题， 虽然 master + slave 架构的 Jenkins 将构建任务分发到了 slave 节点，减少了 master 节点的压力，但是在启动构建任务时， master 节点依然会有大量的 IO 操作， 这个时候会导致 bursting 模式下的 EFS 瞬间打光 Credit 从而导致整个 master 挂掉。当然，我们可以使用 Provisoning 模式缓解性能问题，但其价格又非常贵，性价比不高。<br>　　好在从今年(2024)的一月开始， AWS ECS 的 Fargate <a href="https://aws.amazon.com/cn/blogs/aws/amazon-ecs-supports-a-native-integration-with-amazon-ebs-volumes-for-data-intensive-workloads/">支持使用 EBS 卷作为 Volume</a> 了。 目前官网的文档还比较分散，这里小记一些需要注意的点。  <span id="more"></span>  </p>
<h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><h4 id="IAM-role"><a href="#IAM-role" class="headerlink" title="IAM role"></a>IAM role</h4><p>　　想要使用 EBS 作为 ECS 的数据卷，我们需要为 ECS task 提供一个 <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/infrastructure_IAM_role.html">ECS infrastructure IAM role</a>，这是一个比较新奇的东西，与前面我们用到的 ECS task execution IAM role 和 Task IAM role 都不同，在这里主要是用来允许 ECS 管理 EBS 的。<br>Console 和 CLI 配置这个 Role 的方法在前面官方文档已经写的很明白了，这里顺手贴一下 Terraform 创建的代码:  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">locals &#123;</span><br><span class="line">  infrastructure_role = [</span><br><span class="line">    &quot;AmazonECSInfrastructureRolePolicyForServiceConnectTransportLayerSecurity&quot;,</span><br><span class="line">    &quot;AmazonECSInfrastructureRolePolicyForVolumes&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource &quot;aws_iam_role&quot; &quot;jenkins_service_infrastructure_role&quot; &#123;</span><br><span class="line">  name = &quot;jenkins-service-infrastructure-role&quot;</span><br><span class="line"></span><br><span class="line">  assume_role_policy = jsonencode(&#123;</span><br><span class="line">    &quot;Statement&quot; = [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;Action&quot; = &quot;sts:AssumeRole&quot;,</span><br><span class="line">        &quot;Effect&quot; = &quot;Allow&quot;,</span><br><span class="line">        &quot;Principal&quot; = &#123;</span><br><span class="line">          &quot;Service&quot; = &quot;ecs.amazonaws.com&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Sid&quot; = &quot;AllowAccessToECSForInfrastructureManagement&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;Version&quot; = &quot;2012-10-17&quot;</span><br><span class="line">  &#125;)</span><br><span class="line">  force_detach_policies = false</span><br><span class="line">  path                  = &quot;/&quot;</span><br><span class="line">  tags = merge(</span><br><span class="line">    var.tags</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource &quot;aws_iam_role_policy_attachment&quot; &quot;this&quot; &#123;</span><br><span class="line">  for_each   = toset(local.infrastructure_role)</span><br><span class="line">  role       = aws_iam_role.jenkins_service_infrastructure_role.name</span><br><span class="line">  policy_arn = format(&quot;arn:aws:iam::aws:policy/service-role/%s&quot;, each.key)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="修改-Task-definition"><a href="#修改-Task-definition" class="headerlink" title="修改 Task-definition"></a>修改 Task-definition</h4><p>在 Volume 配置中，”Configuration type” 需要修改为 “Configure at deployment”。  </p>
<h4 id="更新-ECS-services"><a href="#更新-ECS-services" class="headerlink" title="更新 ECS services"></a>更新 ECS services</h4><p>选择 “Update” services， 在 Volume 选项中我们可以看到 EBS 的配置，包括容量大小、IOPS、File System等，还可以指定从那个 Snapshot 来创建。<br>值得注意的是 “Infrastructure role” 务必选择前面我们创建的 role， 否则可能会在创建时出现权限问题。  </p>
<h3 id="局限"><a href="#局限" class="headerlink" title="局限"></a>局限</h3><ul>
<li><p>当前的 ECS 使用 EBS Volume，其创建的 EBS 生命周期与 ECS task 一致， 也就是说 EBS 会在 task 停止时销毁，并且不支持挂载已有的 EBS(参考: <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ebs-volumes.html">Amazon EBS volumes</a>)，好在支持从 Snapshot 来创建 EBS， 建议为 EBS 创建快照策略。  </p>
</li>
<li><p>Terraform 的 AWS 官方 provider 目前还不支持这种配置，具体可以看: <a href="https://github.com/hashicorp/terraform-provider-aws/issues/35279">Amazon ECS and AWS Fargate now integrate with Amazon EBS #35279 - Github</a> 。</p>
</li>
</ul>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specify-ebs-config.html">Configuring Amazon EBS volumes at deployment - AWS</a>  </p>
]]></content>
      <tags>
        <tag>IaC</tag>
        <tag>Terraform</tag>
        <tag>AWS</tag>
      </tags>
  </entry>
  <entry>
    <title>Atlassian全家桶及其插件激活方法</title>
    <url>//post/atlassian-series-crack.html</url>
    <content><![CDATA[<p>　　很多团队都采用 Atlassian 公司出品的 Jira、Confluence 作为团队的项目管理、知识管理平台，<a href="https://zhile.io/2018/12/20/atlassian-license-crack.html">zhile</a> 大佬对其写了一个通杀的 agent，并于GitHub、码云上开源（可惜目前均已由于<a href="https://en.wikipedia.org/wiki/Digital_Millennium_Copyright_Act">DMCA</a> 被BAN）。Alliot 大致帮小伙伴整理了一下该 agent 的使用方法以及在已用其他方式激活过的情景下，如何使用该 agent 激活我们所需要的插件。<span id="more"></span>  </p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3> <blockquote class="blockquote-center">
<p>声明： 感谢 <a href="https://github.com/pengzhile">zhile</a> 与 <a href="https://github.com/cptactionhank/">cptactionhank</a> 两位大佬，一切功劳归与两位大佬。文中内容仅用于个人测试尝鲜，从未用于多人使用场景。读者如需商业使用请向<a href="https://www.atlassian.com/">Atlassian</a>官方购买正版，一切商用侵权行为等导致的后果，归咎于直接使用者，与两位大佬以及 Alliot 无关。 </p>

</blockquote>

<p>　　原作者的仓库已无法访问，下文中使用到的 <code>atlassian-agent.jar</code> 下载地址（请注意，如继续，则默认表示您同意以上申明）：  </p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解压密码www.iots.vip，将jpg后缀改成zip解压</span></span><br><span class="line">阿里云盘链接：https:<span class="regexp">//</span>www.aliyundrive.com<span class="regexp">/s/</span>R6kbGyEZ1qk</span><br><span class="line">通过这个链接注册可以多领取<span class="number">500</span>G容量： https:<span class="regexp">//</span>pages.aliyundrive.com<span class="regexp">/mobile-page/</span>web/beinvited.html?code=f8fd344</span><br></pre></td></tr></table></figure>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><h4 id="直接部署"><a href="#直接部署" class="headerlink" title="直接部署"></a>直接部署</h4><p>　　直接部署需要较长篇幅配置较多的基础环境，暂时没时间写，优先使用 Docker 尝鲜测试吧。  </p>
<h4 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h4><h5 id="Jira"><a href="#Jira" class="headerlink" title="Jira"></a>Jira</h5><h6 id="打包镜像"><a href="#打包镜像" class="headerlink" title="打包镜像"></a>打包镜像</h6><p>　　直接在这位<a href="https://github.com/cptactionhank/docker-atlassian-jira">大佬</a>的镜像基础上打入破解包。<br>　　新建文件 Dockerfile 内容如下：  </p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这边仅测试了7版本，其他版本理论上也没啥问题，自行测试一下</span></span><br><span class="line"><span class="keyword">FROM</span> cptactionhank/atlassian-jira-software:<span class="number">7.13</span>.<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将破解包加入容器</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> <span class="string">&quot;atlassian-agent.jar&quot;</span> /opt/atlassian/jira/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置启动加载</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&#x27;export CATALINA_OPTS=&quot;-javaagent:/opt/atlassian/jira/atlassian-agent.jar $&#123;CATALINA_OPTS&#125;&quot;&#x27;</span> &gt;&gt; /opt/atlassian/jira/bin/setenv.sh</span></span><br></pre></td></tr></table></figure>
<p>将破解包 atlassian-agent.jar 置于 Dockerfile 同一个目录下，构建生成 Docker 镜像并启动：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在当前目录下执行构建，命令最后的“.”不要丢！</span>  </span><br><span class="line">docker build -t jira/jira:v7.13.1 .</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动容器，测试环境JVM堆大小等环境变量可以不用指定，生产必须指定，切记</span></span><br><span class="line">docker run -itd -p 8080:8080 --name jira -v &quot;/data/jira/data:/var/atlassian/jira&quot; --env &quot;CATALINA_OPTS=-Xms1024m -Xmx1024m -Datlassian.plugins.enable.wait=300&quot; jira/jira:v7.13.1</span><br></pre></td></tr></table></figure>
<p>　　等待片刻后，浏览器打开 IP:8080，进入初始化安装阶段。  </p>
<h6 id="初始化安装"><a href="#初始化安装" class="headerlink" title="初始化安装"></a>初始化安装</h6><p>　　选择手动配置，如图：<br><img data-src="https://static.iots.vip/jira-%E5%88%9D%E5%A7%8B%E5%8C%961.jpg" alt="jira-初始化1"><br>下一步，选择数据库（测试可以直接用内置数据库，生产请选择其他数据库）<br>　　数据库建库请使用如下 SQL 来建库：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE jiradb <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin;</span><br></pre></td></tr></table></figure>
<p>选择好我们的数据库之后，下一步。<br>　　这里是最关键的一步——激活，这里需要将服务器ID（server-id） 留存备用：<br><img data-src="https://static.iots.vip/jira-%E5%88%9D%E5%A7%8B%E5%8C%9602-%E6%BF%80%E6%B4%BB.jpg" alt="jira-初始化02-激活"><br>　　这里假设我的服务器ID为 AAAA-BBBB-CCCC-DDDD：</p>
<h6 id="获取激活码"><a href="#获取激活码" class="headerlink" title="获取激活码"></a>获取激活码</h6><p>　　打开命令行：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开我们的jira容器shell</span>  </span><br><span class="line">docker exec -it `docker ps|grep jira|awk &#x27;&#123;print $1&#125;&#x27;` /bin/bash  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cd /opt/atlassian/jira/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过破解包生成激活码</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-p 产品名称 jira</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-m 邮箱（<span class="built_in">test</span>@test.com）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-n 用户名，这个随意</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-o 部署的入口地址</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-s 服务器ID（BY9B-GWD1-1C78-K2DE）</span></span><br><span class="line"></span><br><span class="line">java -jar atlassian-agent.jar -p jira -m test@test.com -n BAT -o https://www.iots.vip -s AAAA-BBBB-CCCC-DDDD </span><br></pre></td></tr></table></figure>
<p>　　复制上面得到的 licences 填入许可证关键字中，下一步，稍等若干分钟即可初始化完成。  </p>
<h5 id="Confluence"><a href="#Confluence" class="headerlink" title="Confluence"></a>Confluence</h5><p>　　基本步骤与 Jira 一致，唯二不同的是 Dockerfile 的不同以及生成激活码的时候 -p 后面的参数不同，这里附上  Dockerfile：  </p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> cptactionhank/atlassian-confluence:<span class="number">6.15</span>.<span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将破解包加入容器</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> <span class="string">&quot;atlassian-agent.jar&quot;</span> /opt/atlassian/confluence/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置启动加载</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&#x27;export CATALINA_OPTS=&quot;-javaagent:/opt/atlassian/confluence/atlassian-agent.jar $&#123;CATALINA_OPTS&#125;&quot;&#x27;</span> &gt;&gt; /opt/atlassian/confluence/bin/setenv.sh</span></span><br></pre></td></tr></table></figure>
<p>　　构建与运行命令为：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建</span></span><br><span class="line">docker build -f Dockerfile -t confluence/confluence:6.15.9 . </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动容器，测试环境JVM堆大小等环境变量可以不用指定，生产必须指定，切记</span></span><br><span class="line">docker run -itd -p 8090:8090 --name confluence -v &quot;/data/confluence/data:/var/atlassian/confluence&quot; --env &quot;CATALINA_OPTS=-Xms1024m -Xmx1024m -Datlassian.plugins.enable.wait=300&quot; confluence/confluence:6.15.9</span><br></pre></td></tr></table></figure>
<p>生成激活码：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开我们的jira容器shell</span>  </span><br><span class="line">docker exec -it `docker ps|grep confluence|awk &#x27;&#123;print $1&#125;&#x27;` /bin/bash  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cd /opt/atlassian/confluence/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过破解包生成激活码</span></span><br><span class="line">java -jar atlassian-agent.jar -p conf -m test@test.com -n BAT -o https://www.iots.vip -s AAAA-BBBB-CCCC-DDDD </span><br></pre></td></tr></table></figure>

<h3 id="插件破解方法"><a href="#插件破解方法" class="headerlink" title="插件破解方法"></a>插件破解方法</h3><p>　　进入管理面板中的插件页面中，选择想要破解的插件，点击“立即购买”：<br><img data-src="https://static.iots.vip/jira-%E6%8F%92%E4%BB%B6%E7%A0%B4%E8%A7%A31.jpg" alt="jira-插件破解1"><br>　　等待下载安装完成后，进入插件管理页面，选择刚才安装的插件，得到应用密钥备用:<br><img data-src="https://static.iots.vip/jira-%E6%8F%92%E4%BB%B6%E7%A0%B4%E8%A7%A32.jpg" alt="jira-插件破解2"><br>　　再次进入命令行：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开我们的jira容器shell</span>  </span><br><span class="line">docker exec -it `docker ps|grep jira|awk &#x27;&#123;print $1&#125;&#x27;` /bin/bash  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cd /opt/atlassian/jira/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成激活码，这里后面添加-d参数</span></span><br><span class="line">java -jar atlassian-agent.jar -p &quot;这里填写得到的插件的应用密钥&quot; -m test@test.com -n BAT -o https://www.iots.vip -s AAAA-BBBB-CCCC-DDDD -d  </span><br></pre></td></tr></table></figure>
<p>　　将得到的 licences 填入“许可证关键字”中，选择“更新”即可完成激活。  </p>
<h3 id="已用其他方式激活的情况下"><a href="#已用其他方式激活的情况下" class="headerlink" title="已用其他方式激活的情况下"></a>已用其他方式激活的情况下</h3><p>　　如果已经通过其他方式破解激活了 Jira，需要用本文的方式来激活，则需要先从数据库中得到 licences ，用破解包生成的 licences 替换。  </p>
<h4 id="生成-licenses"><a href="#生成-licenses" class="headerlink" title="生成 licenses"></a>生成 licenses</h4><p>　　进入后台管理面板页，在系统信息中获得服务器ID  (管理——系统——系统信息——服务器 ID)<br>　　之后，参照上文获取激活码(license)，保存备用。</p>
<h4 id="修改-licenses"><a href="#修改-licenses" class="headerlink" title="修改 licenses"></a>修改 licenses</h4><p>　　我们需要进入数据库，使用上文得到的激活码（license）来替换原有的 license。  </p>
<h5 id="登陆数据库"><a href="#登陆数据库" class="headerlink" title="登陆数据库"></a>登陆数据库</h5><p>　　忘记数据库连接信息的，可以通过数据库配置文件来得到：<br>　　我这边的路径为： <code>/data01/atlassian/application-data/jira/dbconfig.xml</code> 具体的路径请根据自己实际的安装位置来确定。  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /data01/atlassian/application-data/jira/dbconfig.xml</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;jira-database-config&gt;</span><br><span class="line">  &lt;name&gt;defaultDS&lt;/name&gt;</span><br><span class="line">  &lt;delegator-name&gt;default&lt;/delegator-name&gt;</span><br><span class="line">  &lt;database-type&gt;mysql&lt;/database-type&gt;</span><br><span class="line">  &lt;jdbc-datasource&gt;</span><br><span class="line">    &lt;url&gt;jdbc:mysql://127.0.0.1:3306/jiradb?useUnicode=true&amp;amp;characterEncoding=UTF8&amp;amp;sessionVariables=default_storage_engine=InnoDB&lt;/url&gt;</span><br><span class="line">    &lt;driver-class&gt;com.mysql.jdbc.Driver&lt;/driver-class&gt;</span><br><span class="line">    &lt;username&gt;jiradb&lt;/username&gt;</span><br><span class="line">    &lt;password&gt;123456&lt;/password&gt;</span><br><span class="line">    &lt;pool-min-size&gt;20&lt;/pool-min-size&gt;</span><br><span class="line">    &lt;pool-max-size&gt;20&lt;/pool-max-size&gt;</span><br><span class="line">    &lt;pool-max-wait&gt;30000&lt;/pool-max-wait&gt;</span><br><span class="line">    &lt;validation-query&gt;select 1&lt;/validation-query&gt;</span><br><span class="line">    &lt;min-evictable-idle-time-millis&gt;60000&lt;/min-evictable-idle-time-millis&gt;</span><br><span class="line">    &lt;time-between-eviction-runs-millis&gt;300000&lt;/time-between-eviction-runs-millis&gt;</span><br><span class="line">    &lt;pool-max-idle&gt;20&lt;/pool-max-idle&gt;</span><br><span class="line">    &lt;pool-remove-abandoned&gt;true&lt;/pool-remove-abandoned&gt;</span><br><span class="line">    &lt;pool-remove-abandoned-timeout&gt;300&lt;/pool-remove-abandoned-timeout&gt;</span><br><span class="line">    &lt;pool-test-on-borrow&gt;false&lt;/pool-test-on-borrow&gt;</span><br><span class="line">    &lt;pool-test-while-idle&gt;true&lt;/pool-test-while-idle&gt;</span><br><span class="line">    &lt;validation-query-timeout&gt;3&lt;/validation-query-timeout&gt;</span><br><span class="line">  &lt;/jdbc-datasource&gt;</span><br><span class="line">&lt;/jira-database-config&gt;</span><br></pre></td></tr></table></figure>
<p>　　则连接信息为：127.0.0.1:3306 用户名jiradb，密码123456  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入sql</span></span><br><span class="line">mysql -ujiradb -p123456</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 执行<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> productlicense\G获得原来的激活信息（别忘了备份旧的license信息，方便回退）：  </span><br><span class="line">MySQL [jiradb]<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> productlicense\G</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">     ID: <span class="number">10200</span></span><br><span class="line">LICENSE: AAABZg0xxxx</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">2.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">     ID: <span class="number">10201</span></span><br><span class="line">LICENSE: AAABcQ0ODAoxxxx</span><br><span class="line"></span><br><span class="line"># 利用上面获取licences的方式获取licences后，更新记录</span><br><span class="line"><span class="keyword">update</span> productlicense <span class="keyword">set</span> license <span class="operator">=</span><span class="string">&#x27;xxxxx&#x27;</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">10200</span>;</span><br><span class="line"><span class="keyword">update</span> productlicense <span class="keyword">set</span> license <span class="operator">=</span><span class="string">&#x27;xxxxx&#x27;</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">10201</span>;</span><br></pre></td></tr></table></figure>
<p>　　Confluence 同理，Alliot 这边的 Confluence 的配置文件路径为： <code>/data01/app/atlassian/application-data/confluence/confluence.cfg.xml</code>  基本一眼就能看出来，这里就不多啰嗦。  </p>
<h4 id="修改启动命令"><a href="#修改启动命令" class="headerlink" title="修改启动命令"></a>修改启动命令</h4><p>　　停止 jira 后，在 setenv.sh 文件末尾加入：  </p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> <span class="attribute">JAVA_OPTS</span>=<span class="string">&quot;-javaagent:/[路径]/atlassian-agent.jar <span class="variable">$&#123;JAVA_OPTS&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>
<p>重新启动即可。  </p>
]]></content>
      <tags>
        <tag>折腾</tag>
      </tags>
  </entry>
  <entry>
    <title>CDN场景下配置Vaultwarden启用fail2ban</title>
    <url>//post/configuration-vaultwarden-enable-fail2ban-over-cdn.html</url>
    <content><![CDATA[<p>　　<a href="https://github.com/dani-garcia/vaultwarden">Vaulwarden</a> 是一个开源自托管的密码管理工具，这个项目使用 Rust 实现了一套 Bitwarden Server API， 很多小伙伴都用它来管理密钥与凭证。 本文将利用 <a href="https://github.com/fail2ban/fail2ban">fail2ban</a> 来实现在 CDN 场景下的防暴力破解。  <span id="more"></span></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>　　作为一个密码凭证管理工具，首要关注的便是安全， Alliot 通过如下架构来部署 Vaultwarden：<br><img data-src="https://static.iots.vip/vaultwarden/vaultwarden-deploy-diagram.png" alt="Vaultwarden fail2ban 架构图"><br>　　通过上图可以看出，这里首先使用 CDN 作为了第一道防线， CDN 除去能够分发静态资源提升访问速度之外，还能比较好的帮助我们隐藏源站，在一定程度上起到了保护源站的作用。 用户的请求通过 CDN 节点回源到 Nginx，最后才会到达 Vaultwarden 服务。<br>　　针对暴力破解，fail2ban 是中小项目应用很广的一个工具，大多数场景会利用 fail2ban 监听登录失败事件&#x2F;日志，触发 iptables 封锁指定的 IP， Vaultwarden 官方也推荐使用 <a href="https://github.com/dani-garcia/vaultwarden/wiki/Fail2Ban-Setup">这种方式</a> 来加固我们的 Vaultwarden。<br>　　然而，在使用 CDN 场景下， 所有用户的请求都是通过 CDN 节点做转发的（WAF 同理），用户并不会直接请求源站，这样在源站的 iptables 封锁用户的 IP 显然无法达到我们的目的， 因此我们需要配置自定义的规则实现从 Nginx 网关层面来阻断恶意的请求， 下文主要针对这部分来做讲解说明。  </p>
<h3 id="配置Vaulwarde"><a href="#配置Vaulwarde" class="headerlink" title="配置Vaulwarde"></a>配置Vaulwarde</h3><p>　　这里对于 Docker 部署 Vaultwarden 的过程就不过多赘述，直接给出我们的部署配置文件:<br><code>docker-compose.yaml</code>:  </p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">services:</span></span><br><span class="line"><span class="symbol">  vaultwarden:</span></span><br><span class="line"><span class="symbol">    image:</span> vaultwarden/server:latest</span><br><span class="line"><span class="symbol">    container_name:</span> vaultwarden</span><br><span class="line"><span class="symbol">    restart:</span> always</span><br><span class="line"><span class="symbol">    volumes:</span></span><br><span class="line">      - ./data:/data</span><br><span class="line">      - <span class="keyword">/var/</span>log<span class="keyword">/vaultwarden/</span>:<span class="keyword">/log/</span></span><br><span class="line"><span class="symbol">    env_file:</span></span><br><span class="line">      - config.env</span><br><span class="line"><span class="symbol">    ports:</span></span><br><span class="line">      - <span class="string">&quot;127.0.0.1:8080:80&quot;</span></span><br></pre></td></tr></table></figure>
<p>　　同级目录下的 <code>config.env</code>:  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 是否允许注册  </span><br><span class="line">SIGNUPS_ALLOWED=false </span><br><span class="line"></span><br><span class="line"># 是否开启web UI</span><br><span class="line">WEB_VAULT_ENABLED=true</span><br><span class="line"></span><br><span class="line">WEBSOCKET_ENABLED=true</span><br><span class="line">LOG_FILE=/log/vaultwarden.log</span><br><span class="line">LOG_LEVEL=warn</span><br><span class="line">EXTENDED_LOGGING=true</span><br><span class="line"></span><br><span class="line"># 禁止显示密码提示</span><br><span class="line">SHOW_PASSWORD_HINT=false</span><br><span class="line"></span><br><span class="line"># 启用移动端推送</span><br><span class="line"># https://github.com/dani-garcia/vaultwarden/wiki/Enabling-Mobile-Client-push-notification</span><br><span class="line"># PUSH_ENABLED=true</span><br><span class="line"># PUSH_INSTALLATION_ID=xxx</span><br><span class="line"># PUSH_INSTALLATION_KEY=xxx</span><br></pre></td></tr></table></figure>

<p>　　这里我们在 <code>config.env</code> 将 Vaultwarden 的日志等级变更为了 <code>warn</code>， 同时指定了日志文件输出到容器内部的 <code>/log/vaultwarden.log</code>， 然后在 <code>docker-compose</code> 中将其映射到了宿主机的 <code>/var/log/vaultwarden/vaultwarden.log</code>， 一旦用户登录密码错误，就会输出日志到这个日志文件， 我们后面将利用 fail2ban 读取这个日志文件来实现防暴力破解。    </p>
<h3 id="配置-fail2ban"><a href="#配置-fail2ban" class="headerlink" title="配置 fail2ban"></a>配置 fail2ban</h3><p>　　这里我们以 Ubuntu 为例，安装好 <code>fail2ban</code>， 并配置开机启动:  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install fail2ban -y</span><br><span class="line">systemctl enable --now fail2ban</span><br></pre></td></tr></table></figure>

<p>　　默认情况下，fail2ban 安装完成后会在 <code>/etc/fail2ban</code> 生成配置文件，这里我们按照如下配置，在对应的路径下新建 Vaulwarden 相关的配置:<br>　　新建 <code>/etc/fail2ban/filter.d/vaultwarden.local</code>， 这个文件主要用于定义从 Vaulwarden 日志中筛选出登录失败用户的 IP:  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[INCLUDES]</span><br><span class="line">before = common.conf</span><br><span class="line"></span><br><span class="line">[Definition]</span><br><span class="line">failregex = ^.*?Username or password is incorrect\. Try again\. IP: &lt;ADDR&gt;\. Username:.*$</span><br><span class="line">ignoreregex =</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>　　同样的，针对 admin 页面，我们也创建一个配置 <code>/etc/fail2ban/filter.d/vaultwarden-admin.local</code>: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[INCLUDES]</span><br><span class="line">before = common.conf</span><br><span class="line"></span><br><span class="line">[Definition]</span><br><span class="line">failregex = ^.*Invalid admin token\. IP: &lt;ADDR&gt;.*$</span><br><span class="line">ignoreregex =</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>　　我们再来定义一下 action:<br>　　新建 <code>/etc/fail2ban/action.d/vaultwarden.local</code>，这个主要是从 <code>nginx-block-map.conf</code> 这个 action 修改而来， 注意需要将 Nginx conf 路径改成我们自己的: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Definition]</span><br><span class="line"># 配置Nginx的conf路径</span><br><span class="line">srv_cfg_path = /usr/local/nginx/conf/</span><br><span class="line"></span><br><span class="line"># cmd-line arguments to supply to test/reload nginx:</span><br><span class="line">#srv_cmd = nginx -c %(srv_cfg_path)s/nginx.conf</span><br><span class="line">srv_cmd = nginx</span><br><span class="line"></span><br><span class="line"># first test configuration is correct, hereafter send reload signal:</span><br><span class="line">blck_lst_reload = %(srv_cmd)s -qt; if [ $? -eq 0 ]; then</span><br><span class="line">                    %(srv_cmd)s -s reload; if [ $? -ne 0 ]; then echo &#x27;reload failed.&#x27;; fi;</span><br><span class="line">                  fi;</span><br><span class="line"></span><br><span class="line"># map-file for nginx, can be redefined using `action = nginx-block-map[blck_lst_file=&quot;/path/file.map&quot;]`:</span><br><span class="line">blck_lst_file = %(srv_cfg_path)s/vaultwarden_blocked_ips.map</span><br><span class="line"></span><br><span class="line"># Action definition:</span><br><span class="line"></span><br><span class="line">actionstart_on_demand = false</span><br><span class="line">actionstart = touch &#x27;%(blck_lst_file)s&#x27;</span><br><span class="line"></span><br><span class="line">actionflush = truncate -s 0 &#x27;%(blck_lst_file)s&#x27;; %(blck_lst_reload)s</span><br><span class="line"></span><br><span class="line">actionstop = %(actionflush)s</span><br><span class="line"></span><br><span class="line">actioncheck =</span><br><span class="line"></span><br><span class="line">_echo_blck_row = printf &#x27;\%%s 1;\n&#x27; &quot;&lt;fid&gt;&quot;</span><br><span class="line"></span><br><span class="line">actionban = %(_echo_blck_row)s &gt;&gt; &#x27;%(blck_lst_file)s&#x27;; %(blck_lst_reload)s</span><br><span class="line"></span><br><span class="line">actionunban = id=$(%(_echo_blck_row)s | sed -e &#x27;s/[]\/$*.^|[]/\\&amp;/g&#x27;); sed -i &quot;/^$id$/d&quot; %(blck_lst_file)s; %(blck_lst_reload)s</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>　　这个文件主要定义了 fail2ban 在执行 ban 与 unban 操作时的动作，不难看出，主要是将目标 IP 以 Nginx map 格式写入到了 Nginx conf 路径下的 <code>vaultwarden_blocked_ips.map</code> 文件中， 然后执行了 Nginx reload 操作。</p>
<p>　　完成后，我们再来配置2个 jail， 简单定义一下规则，包括封禁时间等：<br>　　新建 <code>/etc/fail2ban/jail.d/vaultwarden.local</code>:  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[vaultwarden]</span><br><span class="line">enabled = true</span><br><span class="line">filter = vaultwarden</span><br><span class="line">banaction = vaultwarden</span><br><span class="line">logpath = /var/log/vaultwarden/vaultwarden.log</span><br><span class="line">maxretry = 3</span><br><span class="line">bantime = 14400</span><br><span class="line">findtime = 14400</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>　　同样的，针对 admin 页面新建 <code>/etc/fail2ban/jail.d/vaultwarden-admin.local</code>:  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[vaultwarden-admin]</span><br><span class="line">enabled = true</span><br><span class="line">filter = vaultwarden-admin</span><br><span class="line">banaction = vaultwarden</span><br><span class="line">logpath = /var/log/vaultwarden/vaultwarden.log</span><br><span class="line">maxretry = 3</span><br><span class="line">bantime = 14400</span><br><span class="line">findtime = 14400</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>　　最后我们需要执行一下 <code>systemctl restart fail2ban</code> 使得前面的配置生效。  </p>
<h3 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h3><p>　　经过前面的配置，用户在尝试登录失败后，Vaultwarden 会将日志记录到 <code>/var/log/vaultwarden/vaultwarden.log</code>， fail2ban 在匹配到日志后，会将用户的 IP 地址拿到，在尝试登录失败 3 次后，会触发 vaultwarden 的 action， 这个 action 会在 Nginx 的 conf 路径(<code>/usr/local/nginx/conf</code>) 的 <code>vaultwarden_blocked_ips.map</code> 文件中记录用户日志，并 reload Nginx, 这个 <code>vaultwarden_blocked_ips.map</code> 文件格式为:  </p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">\99.99.99.99 1;</span><br></pre></td></tr></table></figure>
<p>　　要想 Nginx 能够根据这个列表来封禁请求，我们还需要配置一下 Vaultwarden 的 Nginx:  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">  ....</span><br><span class="line"></span><br><span class="line">  # 定义一个fail2ban的日志格式</span><br><span class="line">  log_format f2b_log &#x27;[$time_local] fail2ban &quot;$blck_lst_ses&quot; - $remote_addr - &quot;$http_referer&quot; - $http_user_agent&quot; &quot;$request&quot;&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  # 使用RealIP模块 从CDN的X-Forwarded-For获取用户真实IP 配置为 $remote_addr</span><br><span class="line">  set_real_ip_from 0.0.0.0/0;</span><br><span class="line">  real_ip_header X-Forwarded-For;</span><br><span class="line">  real_ip_recursive on;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  ###### Vaultwarden ######</span><br><span class="line">  upstream vaultwarden-default &#123;</span><br><span class="line">    zone vaultwarden-default 64k;</span><br><span class="line">    server 127.0.0.1:8080;</span><br><span class="line">    keepalive 2;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  # 兼容websocket</span><br><span class="line">  map $http_upgrade $connection_upgrade &#123;</span><br><span class="line">      default upgrade;</span><br><span class="line">      &#x27;&#x27;     &quot;&quot;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  # 使用用户真实IP作为key</span><br><span class="line">  map  $remote_addr $blck_lst_ses &#123;</span><br><span class="line">      include vaultwarden_blocked_ips.map;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  server &#123;</span><br><span class="line">      listen 443 ssl http2;</span><br><span class="line">      server_name www.iots.vip; # 改成你自己的域名</span><br><span class="line">      # ... 省略ssl相关配置</span><br><span class="line"></span><br><span class="line">      # 定义access log</span><br><span class="line">      access_log logs/access.log;</span><br><span class="line"></span><br><span class="line">      location / &#123;</span><br><span class="line">          # 定义403页面</span><br><span class="line">          error_page 403 = @f2b-banned;</span><br><span class="line">          proxy_pass http://vaultwarden-default;</span><br><span class="line"></span><br><span class="line">          add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot; always;</span><br><span class="line"></span><br><span class="line">          # 配置websocket相关</span><br><span class="line">          proxy_http_version 1.1;</span><br><span class="line">          proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">          proxy_set_header Connection $connection_upgrade;</span><br><span class="line"></span><br><span class="line">          proxy_redirect default;</span><br><span class="line"></span><br><span class="line">          # 使Vaulwarden能够正确获得用户真实IP</span><br><span class="line">          proxy_set_header Host $host;</span><br><span class="line">          proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">          proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line"></span><br><span class="line">          # 禁止爬虫相关日志</span><br><span class="line">          if  ($http_user_agent ~*  &quot;bot|spider&quot; ) &#123;</span><br><span class="line">              access_log off;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          # 判断是否被BAN  如果是则直接返回403</span><br><span class="line">          if ( $blck_lst_ses != &quot;&quot; ) &#123;</span><br><span class="line">            return 403;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      location @f2b-banned &#123;</span><br><span class="line">        # 定义fail2ban日志</span><br><span class="line">        access_log logs/f2b-auth-errors.log f2b_log;</span><br><span class="line"></span><br><span class="line">        # 直接内联一个简单的403页面，并且显示用户IP</span><br><span class="line">        default_type text/html;</span><br><span class="line">        return 403 &quot;&lt;br/&gt;&lt;center&gt;</span><br><span class="line">          &lt;b style=\&quot;color:red; font-size:18pt; border:1pt solid black; padding:2pt;\&quot;&gt;</span><br><span class="line">          You are banned! &lt;/b&gt;&lt;div&gt;Your IP address: $remote_addr&lt;/div&gt;&lt;/center&gt;&quot;;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试效果"><a href="#测试效果" class="headerlink" title="测试效果"></a>测试效果</h3><p>　　这里举例几个常用的 fail2ban 命令： </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">针对 vaultwarden jail  封禁指定IP</span></span><br><span class="line">fail2ban-client set vaultwarden banip 192.168.1.1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解封</span></span><br><span class="line">fail2ban-client set vaultwarden unbanip 192.168.1.1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 vaultwarden jail</span></span><br><span class="line">fail2ban-client status vaultwarden</span><br></pre></td></tr></table></figure>

<p>　　我们先直接通过 Web 界面输入 3 次错误密码登录一下看看效果:<br> <img data-src="https://static.iots.vip/vaultwarden/vaultwarden-nginx-banned.png" alt="Vaultwarden fail2ban 封禁效果">  </p>
<p>　　然后 <code>fail2ban-client status vaultwarden</code> 查看一下: </p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">Status for the jail: vaultwarden</span><br><span class="line">|<span class="string">- Filter</span></span><br><span class="line"><span class="string"></span>|<span class="string">  </span>|<span class="string">- Currently failed:	0</span></span><br><span class="line"><span class="string"></span>|<span class="string">  </span>|<span class="string">- Total failed:	0</span></span><br><span class="line"><span class="string"></span>|<span class="string">  `- File list:	/var/log/vaultwarden/vaultwarden.log</span></span><br><span class="line"><span class="string">`- Actions</span></span><br><span class="line"><span class="string">   </span>|<span class="string">- Currently banned:	1</span></span><br><span class="line"><span class="string">   </span>|<span class="string">- Total banned:	1</span></span><br><span class="line"><span class="string">   `- Banned IP list:	x.x.x.x</span></span><br></pre></td></tr></table></figure>
<p>　　可以看到 fail2ban 成功的帮助我们封禁了错误登录尝试 3 次以上的 IP，通过命令解封一下：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fail2ban-client set vaultwarden unbanip 192.168.1.1</span><br></pre></td></tr></table></figure>
<p>　　解封这个 IP 后，我们又能正常访问 Vaultwarden 了，大工告成，Enjoy it! </p>
]]></content>
      <tags>
        <tag>折腾</tag>
        <tag>Linux</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7 Minimal安装下的网络配置</title>
    <url>//post/config-minimal-centos7-network.html</url>
    <content><![CDATA[<p>　　minimal 模式安装的 CentOS 7 使用 <code>ifconfig</code> 去配置网络的时候提示 <code>commond not found</code>，这里记录了解决方法。<span id="more"></span>  </p>
<h2 id="启用网卡"><a href="#启用网卡" class="headerlink" title="启用网卡"></a>启用网卡</h2><p>通过 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ipaddr</span><br></pre></td></tr></table></figure>
<p>查看到网卡名为 <code>ens33</code> （这个每台机器会有所差别，一般为en开头），执行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure>
<p>将末尾 <code>ONBOOT</code> 字段改为 yes 后执行  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service network restart </span><br></pre></td></tr></table></figure>
<p>重启网络即可。</p>
<h2 id="安装net-tools"><a href="#安装net-tools" class="headerlink" title="安装net-tools"></a>安装net-tools</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y net-tools</span><br></pre></td></tr></table></figure>
<p>安装完成后可以通过 <code>ifconfig</code> 来配置网络。  </p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>CentOS</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7 安装Docker-CE</title>
    <url>//post/centos-install-docker-ce.html</url>
    <content><![CDATA[<p>　　许多情况下，系统中都安装好了 <code>Docker</code> 但是版本比较旧，为了稳定性与功能性更好，我们需要安装较新版本。<span id="more"></span><br>此文只是翻译了部分 <a href="https://docs.docker.com/install/linux/docker-ce/centos/#upgrade-docker-ce">Docker官方文档</a>  </p>
<h3 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h3><p>旧版的 <code>Docker</code> 命名为 <code>docker</code> 或者是 <code>docker-engine</code>,如果已经安装了它们，那么必须先卸载它们以及它们的依赖项。  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum remove -y docker \</span><br><span class="line">docker-client \</span><br><span class="line">docker-client-latest \</span><br><span class="line">docker-common \</span><br><span class="line">docker-latest \</span><br><span class="line">docker-latest-logrotate \</span><br><span class="line">docker-logrotate \</span><br><span class="line">docker-selinux \</span><br><span class="line">docker-engine-selinux \</span><br><span class="line">docker-engine</span><br></pre></td></tr></table></figure>

<h3 id="安装Docker-CE"><a href="#安装Docker-CE" class="headerlink" title="安装Docker CE"></a>安装Docker CE</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置repository</span>  </span><br><span class="line">sudo yum install -y yum-utils \</span><br><span class="line">device-mapper-persistent-data \</span><br><span class="line">lvm2</span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装并启动 docker</span></span><br><span class="line">yum install -y bridge-utils docker-ce docker-ce-cli containerd.io libseccomp</span><br><span class="line">systemctl enable docker</span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>


<h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><p>　　正常情况下，普通用户执行 <code>docker run</code> 等命令都必须要加 <code>sudo</code>,否则会提示 <code>get …… dial unix /var/run/docker.sock</code> 权限不足，这里我们将当前用户加入到 <code>docker</code> 用户组则可解决：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo groupadd docker   #添加docker用户组，如果已有该用户组则跳过</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo usermod -aG docker $&#123;USER&#125;  #将当前用户加入到docker用户组</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart docker #重启docker服务</span><br></pre></td></tr></table></figure>
<p>重启当前用户会话即可生效。  </p>
<p>以下部分按需配置：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 nfs-utils</span></span><br><span class="line">yum install -y nfs-utils</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭 防火墙</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭 SeLinux</span></span><br><span class="line">setenforce 0</span><br><span class="line">sed -i &quot;s/SELINUX=enforcing/SELINUX=disabled/g&quot; /etc/selinux/config</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭 swap</span></span><br><span class="line">swapoff -a</span><br><span class="line">yes | cp /etc/fstab /etc/fstab_bak</span><br><span class="line">cat /etc/fstab_bak |grep -v swap &gt; /etc/fstab</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改 /etc/sysctl.conf</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果有配置，则修改</span></span><br><span class="line">sed -i &quot;s#^net.ipv4.ip_forward.*#net.ipv4.ip_forward=1#g&quot; /etc/sysctl.conf</span><br><span class="line">sed -i &quot;s#^net.bridge.bridge-nf-call-ip6tables.*#net.bridge.bridge-nf-call-ip6tables=1#g&quot; /etc/sysctl.conf</span><br><span class="line">sed -i &quot;s#^net.bridge.bridge-nf-call-iptables.*#net.bridge.bridge-nf-call-iptables=1#g&quot; /etc/sysctl.conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可能没有，追加</span></span><br><span class="line">echo &quot;net.ipv4.ip_forward = 1&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">echo &quot;net.bridge.bridge-nf-call-ip6tables = 1&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">echo &quot;net.bridge.bridge-nf-call-iptables = 1&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行命令以应用</span></span><br><span class="line">sysctl -p</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果有作为 k8s worker 的需求，需要修改 docker Cgroup Driver 为 systemd</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="comment"># 将/usr/lib/systemd/system/docker.service文件中的这一行 ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="comment"># 修改为 ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock --exec-opt native.cgroupdriver=systemd</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果不修改，在添加 worker 节点时可能会碰到如下错误</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[WARNING IsDockerSystemdCheck]: detected <span class="string">&quot;cgroupfs&quot;</span> as the Docker cgroup driver. The recommended driver is <span class="string">&quot;systemd&quot;</span>.</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">增加docker网桥</span></span><br><span class="line">systemctl stop docker</span><br><span class="line">sudo ip link set dev docker0 down</span><br><span class="line">sudo brctl delbr docker0</span><br><span class="line">sudo brctl addbr docker0</span><br><span class="line">sudo ip addr add 10.233.0.0/16 dev docker0</span><br><span class="line">sudo ip link set dev docker0 up</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启 docker，并启动 kubelet</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>CentOS</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7更改网卡名为eth0</title>
    <url>//post/centos7-eth0.html</url>
    <content><![CDATA[<p>今天把虚拟机重装为了CentOS7，去配置网络的时候发现网卡名变成了eno16777736 我这个强迫症总感觉不舒服，而且使用起来也不是很方便。于是在网上查了下资料，将网卡重命名为eth0<span id="more"></span><br>方法如下：<br><img data-src="https://static.iots.vip/2017/02/201702017516_324.jpg">  </p>
<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>编辑网卡的配置文件  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-eno16777736</span><br></pre></td></tr></table></figure>
<p>将里面的NAME项修改为eth0，并将此文件重命名为ifcfg-eth0  </p>
<h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>禁用该可预测命名规则:  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/default/grub</span><br></pre></td></tr></table></figure>
<p>在GRUBCMDLINELINUX变量中加入net.ifnames&#x3D;0 biosdevname&#x3D;0<br><img data-src="https://static.iots.vip/2017/02/201702017446_8614.jpg">  </p>
<h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>执行:  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grub2-mkconfig -o /boot/grub2/grub.cfg</span><br></pre></td></tr></table></figure>
<p><img data-src="https://static.iots.vip/2017/02/201702011868_1316.jpg">  </p>
<h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>重启Linux：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shutdown -r now</span><br></pre></td></tr></table></figure>
<p>再去看ifconfig发现已经生效了。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>CentOS</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS下云数据硬盘的挂载与使用</title>
    <url>//post/centos-disk.html</url>
    <content><![CDATA[<p>购买云硬盘后需要对其进行挂载、格式化等操作。注意：仅支持对数据盘进行分区，不支持对系统盘进行分区。<span id="more"></span>  </p>
<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>输入命令fdisk -l查看数据盘信息，注意：在没有分区和格式化数据盘之前，使用df -h 命令是无法看到数据盘的。  </p>
<h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fdisk /dev/vdb</span><br></pre></td></tr></table></figure>
<p>按照界面的提示，依次输入“n”(new新建分区)、“p”(partition新建扩展分区)、“1”(使用第1个主分区)，两次回车(使用默认配置)，输入“wq”(保存分区表)，回车开始分区。 这里以创建1个分区为例，也可以根据自己的需求创建多个分区。 </p>
<h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>使用“fdisk -l”命令，即可查看到，新的分区vdb1已经创建完成。  </p>
<h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>分区后需要对分好的区进行格式化，自行决定文件系统的格式，如ext2、ext3等。以“ext3”为例：使用下面的命令对新分区进行格式化。  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkfs.ext3 /dev/vdb1</span><br></pre></td></tr></table></figure>

<h2 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h2><p>创建目录并将分区挂载到该目录  如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /example</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mount /dev/vdb1 /example</span><br></pre></td></tr></table></figure>

<h2 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">df</span> -h <span class="comment">#查看是否分区成功  </span></span><br></pre></td></tr></table></figure>

<h2 id="第七步"><a href="#第七步" class="headerlink" title="第七步"></a>第七步</h2><p>如果希望云服务器在重启或开机时能自动挂载数据盘，必须将分区信息添加到 &#x2F;etc&#x2F;fstab 中。如果没有添加，则云服务器重启或重新开机后，都不能自动挂载数据盘。  关于 &#x2F;etc&#x2F;fstab 可以查看 <a href="/post/linux-fstab.html">&#x2F;etc&#x2F;fstab 详解</a><br>使用以下命令添加分区信息：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;/dev/vdb1 /example ext3 defaults 0 0&#x27;</span> &gt;&gt; /etc/fstab</span><br></pre></td></tr></table></figure>
<p>使用以下命令查看  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/fstab</span><br></pre></td></tr></table></figure>
<p>出现&#x2F;dev&#x2F;vdb1 &#x2F;example ext3 defaults 0 0则说明添加分区信息成功。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS启用ssh密钥登录</title>
    <url>//post/centos-use-ssh-keygen.html</url>
    <content><![CDATA[<p>　　在某些时候，使用密码作为登录服务器的认证方式是不太安全的，为避免密码被暴力破解，许多时候可以采用ssh密钥登录服务器，这里以CentOS为例。<span id="more"></span>     </p>
<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>　　生成秘钥对:  </p>
<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>在服务器上利用ssh-keygen生成:<br>输入:  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa  </span><br></pre></td></tr></table></figure>
<p>一路enter跳过(当然你也可以自己定义，不过没必要)，会在&#x2F;root&#x2F;.ssh下生成公钥(id_rsa.pub)私钥(id_rsa) （公钥是用于服务器端，私钥是用于客户端） 然后将私钥下载至电脑上(登录时会用到)。   </p>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>利用远程工具(如Xshell)生成<br>这里以Xshell为例，点击”工具-新建用户密钥生成向导”全部默认，下一步，提示输入密钥加密的密码，这里可以为空，下一步，将公钥保存为文件，命名为id_rsa.pub，上传到服务器&#x2F;root&#x2F;.ssh下。</p>
<h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>　　修改&#x2F;etc&#x2F;ssh&#x2F;sshd_config如下部分:  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">RSAAuthentication <span class="built_in">yes</span> 开启RSA验证</span><br><span class="line">PubkeyAuthentication <span class="built_in">yes</span> 是否使用公钥验证</span><br><span class="line">AuthorizedKeysFile .ssh/authorized_keys 公钥的保存位置</span><br><span class="line">PasswordAuthentication no 禁止使用密码验证登录</span><br></pre></td></tr></table></figure>
<p>这里最好是禁止使用密码验证登录，否则用密钥就没多大意义了。<br>更改后保存。  </p>
<h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>　　进入到密钥保存的目录：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/.ssh</span><br></pre></td></tr></table></figure>
<p>新建密钥验证文件”authorized_keys”，并将公钥输出重定向覆盖密钥验证文件:  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> authorized_keys  </span><br><span class="line"><span class="built_in">cat</span> id_rsa.pub &gt;&gt; authorized_keys   这里建议使用追加而不是覆盖  </span><br></pre></td></tr></table></figure>
<p>修改authorized_keys文件权限为600  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span>  600 /root/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<p><del>补充</del>：<br>ssh 密钥登录对以下文件有权限要求：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~ <span class="comment"># 即家目录 权限为 700  </span></span><br><span class="line">~/.ssh <span class="comment"># 权限为 700  </span></span><br><span class="line">~/.ssh/authorized_keys <span class="comment"># 权限为 600 </span></span><br></pre></td></tr></table></figure>

<h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>　　重启ssh服务  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#CentOS 7之前的版本请执行:  </span></span><br><span class="line">service sshd restart</span><br><span class="line"><span class="comment">#CentOS 7请执行:  </span></span><br><span class="line">systemctl restart sshd.service</span><br></pre></td></tr></table></figure>
<p>接下来就能够通过密钥登录服务器了:<br>在打开连接的时候会提示导入用户密钥，选择之前保存的私钥文件”id_rsa”即可。</p>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>　　2017-12-2 : 如何在Linux系统中用密钥方式连接其他的远程Linux主机呢？  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -i ~/.ssh/id_rsa alliot@192.168.1.1 -p 22</span><br></pre></td></tr></table></figure>
<p>~&#x2F;.ssh&#x2F;id_rsa: 你的私钥路径<br>alliot: 用户名<br>192.168.1.1: 远程ip<br>22: 远程ssh端口</p>
<p>　　</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS修改语言环境为中文</title>
    <url>//post/centos-language-chinese.html</url>
    <content><![CDATA[<p>　　服务器默认安装的是英文语言，这次部署一个Python爬虫的时候涉及到中文读取，出现乱码，于是修改系统语言环境解决。<span id="more"></span></p>
<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>　　修改 <code>/etc/locale.conf</code> 内容为 LANG&#x3D;”zh_CN.UTF-8” 并重新登录终端  </p>
<h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>　　查看当前区域配置，执行：  </p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">localectl status</span></span><br></pre></td></tr></table></figure>
<p>System Locale项为”LANG&#x3D;zh_CN.UTF-8”即可。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS中mysql :bash:commond not found的解决方法</title>
    <url>//post/linux-mysql-not-found.html</url>
    <content><![CDATA[<p>linux下，在mysql正常运行的情况下，输入mysql提示：<br>mysql command not found<br>遇上类似-bash: mysql: command not found的情况别着急，这是因为&#x2F;usr&#x2F;local&#x2F;bin目录下缺失mysql导致，只需要在该目录下建立软链接，即可以解决。<span id="more"></span></p>
<p>把mysql安装目录，比如MYSQLPATH&#x2F;bin&#x2F;mysql，映射到&#x2F;usr&#x2F;local&#x2F;bin目录下： </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/bin</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -fs /MYSQLPATH/bin/mysql mysql</span><br></pre></td></tr></table></figure>
<p>还有其它常用命令mysqladmin、mysqldump等不可用时候都可按用此方法解决。<br>注：其中MYSQLPATH是MySQL的实际安装路径。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>CentOS</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS安装中文&#39;man&#39;</title>
    <url>//post/CentOS-man-zh-CN.html</url>
    <content><![CDATA[<p>　　<code>man</code> 提供了丰富的帮助文档，不过有些时候纯英文的看不懂，我们可以安装一个中文版的 <code>man</code>。<span id="more"></span></p>
<h3 id="下载man中文包"><a href="#下载man中文包" class="headerlink" title="下载man中文包"></a>下载man中文包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://src.fedoraproject.org/repo/pkgs/man-pages-zh-CN/manpages-zh-1.5.2.tar.bz2/cab232c7bb49b214c2f7ee44f7f35900/manpages-zh-1.5.2.tar.bz2</span><br></pre></td></tr></table></figure>
<p>解压：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y bzip2</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar jxvf  manpages-zh-1.5.2.tar.bz2</span><br></pre></td></tr></table></figure>
<h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure --disable-zhtw</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<h3 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h3><p>给中文 <code>man</code> 设置一个别名 <code>cman</code>： </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">vim .bash_profile</span><br></pre></td></tr></table></figure>
<p>添加一行：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> cman=<span class="string">&#x27;man -M /usr/local/share/man/zh_CN&#x27;</span></span><br></pre></td></tr></table></figure>
<p>执行：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> .bash_profile </span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Discuz X3.2 搬家后Database Error的解决方法</title>
    <url>//post/discuz-3.html</url>
    <content><![CDATA[<p>昨晚论坛出现MySQL链接错误，云数据库没去动一般是不会出现什么问题的，转念一想，阿里的云数据库在更换后为了方便用户转移数据，有几天存活时间的，然而自己还没修改DZ的数据库配置。<span id="more"></span></p>
<p><img data-src="https://static.iots.vip/201609161474024375831391.png" alt="错误提示"></p>
<p>打开(站点根目录)&#x2F;config&#x2F;config_global.php<br>修改mysql链接地址  账户就可以了。  </p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">* $<span class="symbol">_config</span>[<span class="string">&#x27;db&#x27;</span>][<span class="string">&#x27;1&#x27;</span>][<span class="string">&#x27;dbuser&#x27;</span>] = <span class="string">&#x27;root&#x27;</span>; // account </span><br><span class="line">* $<span class="symbol">_config</span>[<span class="string">&#x27;db&#x27;</span>][<span class="string">&#x27;1&#x27;</span>][<span class="string">&#x27;dbpw&#x27;</span>] = <span class="string">&#x27;root&#x27;</span>;// password</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Discuz</tag>
      </tags>
  </entry>
  <entry>
    <title>Discuz x3.2论坛登录后自动弹出的解决方法</title>
    <url>//post/discuz-1.html</url>
    <content><![CDATA[<p>Discuz-x3.2论坛在搬家后出现论坛登录后自动弹出的情况，此文记录了解决方法。<span id="more"></span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim (nginx目录) /nginx/conf/vhost/discuz.conf</span><br></pre></td></tr></table></figure>
<p>将最后面的include注释掉或者删除<br>保存  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -s reload <span class="comment">#重载Nginx配置</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Nginx</tag>
        <tag>Discuz</tag>
      </tags>
  </entry>
  <entry>
    <title>Discuz X3.2 在nginx下伪静态的设定</title>
    <url>//post/nginx-discuz-1.html</url>
    <content><![CDATA[<p>本文记录了在nginx下 discuz X3.2实现伪静态的详细配置置方法。<span id="more"></span> </p>
<p>apache服务器与Nginx服务器的伪静态规则是不一样的，若熟悉Nginx服务器的伪静态规则，自己写当然是好的。不了解Nginx服务器的伪静态规则的朋友，可以直接采用以下伪静态规则：  </p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">#WordPress</span></span><br><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">index</span> index.html index.php;</span><br><span class="line">        <span class="attribute">if</span> (-f <span class="variable">$request_filename</span>/index.html)&#123;</span><br><span class="line">            <span class="attribute">rewrite</span> (.*) <span class="variable">$1</span>/index.html <span class="literal">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">if</span> (-f <span class="variable">$request_filename</span>/index.php)&#123;</span><br><span class="line">            <span class="attribute">rewrite</span> (.*) <span class="variable">$1</span>/index.php;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">if</span> (!-f <span class="variable">$request_filename</span>)&#123;</span><br><span class="line">            <span class="attribute">rewrite</span> (.*) /index.php;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">#PHPCMS</span></span><br><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">    <span class="comment">###以下为PHPCMS 伪静态化rewrite规则</span></span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^(.*)show-([0-9]+)-([0-9]+)\.html$</span> <span class="variable">$1</span>/show.php?itemid=<span class="variable">$2</span>&amp;page=<span class="variable">$3</span>;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^(.*)list-([0-9]+)-([0-9]+)\.html$</span> <span class="variable">$1</span>/list.php?catid=<span class="variable">$2</span>&amp;page=<span class="variable">$3</span>;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^(.*)show-([0-9]+)\.html$</span> <span class="variable">$1</span>/show.php?specialid=<span class="variable">$2</span>;</span><br><span class="line">    <span class="comment">####以下为PHPWind 伪静态化rewrite规则</span></span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^(.*)-htm-(.*)$</span> <span class="variable">$1</span>.php?<span class="variable">$2</span> <span class="literal">last</span>;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^(.*)/simple/([a-z0-9\_]+\.html)$</span> <span class="variable">$1</span>/simple/index.php?<span class="variable">$2</span> <span class="literal">last</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="comment">#ECSHOP伪静态规则 </span></span><br><span class="line"><span class="keyword">if</span> (!-e $request_filename)</span><br><span class="line">&#123;</span><br><span class="line">rewrite <span class="string">&quot;^/index\.html&quot;</span> /index.php <span class="keyword">last</span>;</span><br><span class="line">rewrite <span class="string">&quot;^/category$&quot; /index.php last;</span></span><br><span class="line"><span class="string">rewrite &quot;</span>^<span class="regexp">/feed-c([0-9]+)\.xml$&amp;rdquo; /</span>feed.php?cat=$1 <span class="keyword">last</span>;</span><br><span class="line">rewrite &amp;ldquo;^<span class="regexp">/feed-b([0-9]+)\.xml$&amp;rdquo; /</span>feed.php?brand=$1 <span class="keyword">last</span>;</span><br><span class="line">rewrite &amp;ldquo;^<span class="regexp">/feed\.xml$&amp;rdquo; /</span>feed.php <span class="keyword">last</span>;</span><br><span class="line">rewrite &amp;ldquo;^<span class="regexp">/category-([0-9]+)-b([0-9]+)-min([0-9]+)-max([0-9]+)-attr([^-]*)-([0-9]+)-(.+)-([a-zA-Z]+)(.*)\.html$&amp;rdquo; /</span>category.php?id=$1&amp;brand=$2&amp;price_min=$3&amp;price_max=$4&amp;filter_attr=$5&amp;page=$6&amp;<span class="keyword">sort</span>=$7&amp;order=$8 <span class="keyword">last</span>;</span><br><span class="line">rewrite &amp;ldquo;^<span class="regexp">/category-([0-9]+)-b([0-9]+)-min([0-9]+)-max([0-9]+)-attr([^-]*)(.*)\.html$&amp;rdquo; /</span>category.php?id=$1&amp;brand=$2&amp;price_min=$3&amp;price_max=$4&amp;filter_attr=$5 <span class="keyword">last</span>;</span><br><span class="line">rewrite &amp;ldquo;^<span class="regexp">/category-([0-9]+)-b([0-9]+)-([0-9]+)-(.+)-([a-zA-Z]+)(.*)\.html$&amp;rdquo; /</span>category.php?id=$1&amp;brand=$2&amp;page=$3&amp;<span class="keyword">sort</span>=$4&amp;order=$5 <span class="keyword">last</span>;</span><br><span class="line">rewrite &amp;ldquo;^<span class="regexp">/category-([0-9]+)-b([0-9]+)-([0-9]+)(.*)\.html$&amp;rdquo; /</span>category.php?id=$1&amp;brand=$2&amp;page=$3 <span class="keyword">last</span>;</span><br><span class="line">rewrite &amp;ldquo;^<span class="regexp">/category-([0-9]+)-b([0-9]+)(.*)\.html$&amp;rdquo; /</span>category.php?id=$1&amp;brand=$2 <span class="keyword">last</span>;</span><br><span class="line">rewrite &amp;ldquo;^<span class="regexp">/category-([0-9]+)(.*)\.html$&amp;rdquo; /</span>category.php?id=$1 <span class="keyword">last</span>;</span><br><span class="line">rewrite &amp;ldquo;^<span class="regexp">/goods-([0-9]+)(.*)\.html&amp;rdquo; /g</span>oods.php?id=$1 <span class="keyword">last</span>;</span><br><span class="line">rewrite &amp;ldquo;^<span class="regexp">/article_cat-([0-9]+)-([0-9]+)-(.+)-([a-zA-Z]+)(.*)\.html$&amp;rdquo; /ar</span>ticle_cat.php?id=$1&amp;page=$2&amp;<span class="keyword">sort</span>=$3&amp;order=$4 <span class="keyword">last</span>;</span><br><span class="line">rewrite &amp;ldquo;^<span class="regexp">/article_cat-([0-9]+)-([0-9]+)(.*)\.html$&amp;rdquo; /ar</span>ticle_cat.php?id=$1&amp;page=$2 <span class="keyword">last</span>;</span><br><span class="line">rewrite &amp;ldquo;^<span class="regexp">/article_cat-([0-9]+)(.*)\.html$&amp;rdquo; /ar</span>ticle_cat.php?id=$1 <span class="keyword">last</span>;</span><br><span class="line">rewrite &amp;ldquo;^<span class="regexp">/article-([0-9]+)(.*)\.html$&amp;rdquo; /ar</span>ticle.php?id=$1 <span class="keyword">last</span>;</span><br><span class="line">rewrite &amp;ldquo;^<span class="regexp">/brand-([0-9]+)-c([0-9]+)-([0-9]+)-(.+)-([a-zA-Z]+)\.html&amp;rdquo; /</span>brand.php?id=$1&amp;cat=$2&amp;page=$3&amp;<span class="keyword">sort</span>=$4&amp;order=$5 <span class="keyword">last</span>;</span><br><span class="line">rewrite &amp;ldquo;^<span class="regexp">/brand-([0-9]+)-c([0-9]+)-([0-9]+)(.*)\.html&amp;rdquo; /</span>brand.php?id=$1&amp;cat=$2&amp;page=$3 <span class="keyword">last</span>;</span><br><span class="line">rewrite &amp;ldquo;^<span class="regexp">/brand-([0-9]+)-c([0-9]+)(.*)\.html&amp;rdquo; /</span>brand.php?id=$1&amp;cat=$2 <span class="keyword">last</span>;</span><br><span class="line">rewrite &amp;ldquo;^<span class="regexp">/brand-([0-9]+)(.*)\.html&amp;rdquo; /</span>brand.php?id=$1 <span class="keyword">last</span>;</span><br><span class="line">rewrite &amp;ldquo;^<span class="regexp">/tag-(.*)\.html&amp;rdquo; /s</span>earch.php?keywords=$1 <span class="keyword">last</span>;</span><br><span class="line">rewrite &amp;ldquo;^<span class="regexp">/snatch-([0-9]+)\.html$&amp;rdquo; /sna</span>tch.php?id=$1 <span class="keyword">last</span>;</span><br><span class="line">rewrite &amp;ldquo;^<span class="regexp">/group_buy-([0-9]+)\.html$&amp;rdquo; /gr</span>oup_buy.php?act=view&amp;id=$1 <span class="keyword">last</span>;</span><br><span class="line">rewrite &amp;ldquo;^<span class="regexp">/auction-([0-9]+)\.html$&amp;rdquo; /au</span>ction.php?act=view&amp;id=$1 <span class="keyword">last</span>;</span><br><span class="line">rewrite &amp;ldquo;^<span class="regexp">/exchange-id([0-9]+)(.*)\.html$&amp;rdquo; /</span>exchange.php?id=$1&amp;act=view <span class="keyword">last</span>;</span><br><span class="line">rewrite &amp;ldquo;^<span class="regexp">/exchange-([0-9]+)-min([0-9]+)-max([0-9]+)-([0-9]+)-(.+)-([a-zA-Z]+)(.*)\.html$&amp;rdquo; /</span>exchange.php?cat_id=$1&amp;integral_min=$2&amp;integral_max=$3&amp;page=$4&amp;<span class="keyword">sort</span>=$5&amp;order=$6 <span class="keyword">last</span>;</span><br><span class="line">rewrite ^<span class="regexp">/exchange-([0-9]+)-([0-9]+)-(.+)-([a-zA-Z]+)(.*)\.html$&amp;rdquo; /</span>exchange.php?cat_id=$1&amp;page=$2&amp;<span class="keyword">sort</span>=$3&amp;order=$4 <span class="keyword">last</span>;</span><br><span class="line">rewrite &amp;ldquo;^<span class="regexp">/exchange-([0-9]+)-([0-9]+)(.*)\.html$&amp;rdquo; /</span>exchange.php?cat_id=$1&amp;page=$2 <span class="keyword">last</span>;</span><br><span class="line">rewrite &amp;ldquo;^<span class="regexp">/exchange-([0-9]+)(.*)\.html$&amp;rdquo; /</span>exchange.php?cat_id=$1 <span class="keyword">last</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Discuz x3.2</span></span><br><span class="line"><span class="attribute">rewrite</span><span class="regexp"> ^([^\.]*)/topic-(.+)\.html$</span> <span class="variable">$1</span>/portal.php?mod=topic&amp;topic=<span class="variable">$2</span> <span class="literal">last</span>;</span><br><span class="line"><span class="attribute">rewrite</span><span class="regexp"> ^([^\.]*)/article-([0-9]+)-([0-9]+)\.html$</span> <span class="variable">$1</span>/portal.php?mod=view&amp;aid=<span class="variable">$2</span>&amp;page=<span class="variable">$3</span> <span class="literal">last</span>;</span><br><span class="line"><span class="attribute">rewrite</span><span class="regexp"> ^([^\.]*)/forum-(\w+)-([0-9]+)\.html$</span> <span class="variable">$1</span>/forum.php?mod=forumdisplay&amp;fid=<span class="variable">$2</span>&amp;page=<span class="variable">$3</span> <span class="literal">last</span>;</span><br><span class="line"><span class="attribute">rewrite</span><span class="regexp"> ^([^\.]*)/thread-([0-9]+)-([0-9]+)-([0-9]+)\.html$</span> <span class="variable">$1</span>/forum.php?mod=viewthread&amp;tid=<span class="variable">$2</span>&amp;extra=page%3D<span class="variable">$4</span>&amp;page=<span class="variable">$3</span> <span class="literal">last</span>;</span><br><span class="line"><span class="attribute">rewrite</span><span class="regexp"> ^([^\.]*)/group-([0-9]+)-([0-9]+)\.html$</span> <span class="variable">$1</span>/forum.php?mod=group&amp;fid=<span class="variable">$2</span>&amp;page=<span class="variable">$3</span> <span class="literal">last</span>;</span><br><span class="line"><span class="attribute">rewrite</span><span class="regexp"> ^([^\.]*)/space-(username|uid)-(.+)\.html$</span> <span class="variable">$1</span>/home.php?mod=space&amp;<span class="variable">$2</span>=<span class="variable">$3</span> <span class="literal">last</span>;</span><br><span class="line"><span class="attribute">rewrite</span><span class="regexp"> ^([^\.]*)/blog-([0-9]+)-([0-9]+)\.html$</span> <span class="variable">$1</span>/home.php?mod=space&amp;uid=<span class="variable">$2</span>&amp;do=blog&amp;id=<span class="variable">$3</span> <span class="literal">last</span>;</span><br><span class="line"><span class="attribute">rewrite</span><span class="regexp"> ^([^\.]*)/(fid|tid)-([0-9]+)\.html$</span> <span class="variable">$1</span>/index.php?action=<span class="variable">$2</span>&amp;value=<span class="variable">$3</span> <span class="literal">last</span>;</span><br><span class="line"><span class="attribute">if</span> (!-e <span class="variable">$request_filename</span>) &#123;</span><br><span class="line"><span class="attribute">return</span> <span class="number">404</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>具体做法如下，进入(nginx安装路径)&#x2F;nginx&#x2F;conf&#x2F;rewrite&#x2F;discuz.conf<br>cat一下。 将include后面的*.conf路径记住<br>进入对应路径 vi  把上面的伪静态规则 粘贴进去  替换原有的。<br>最后别忘重载nginx配置:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Discuz</tag>
      </tags>
  </entry>
  <entry>
    <title>Discuz X3.2 1225版本升级后UC无法登陆解决方案之一</title>
    <url>//post/discuz-2.html</url>
    <content><![CDATA[<p>Discuz X3.2在版本升级后，UC出现无法登录的情况，其实只需要修改一下配置文件即可。<span id="more"></span><br>打开(网站根目录)\uc_server\model\admin.php<br>搜索： $this-&gt;cookie_status &#x3D; 0;<br>将其修改为：  </p>
<pre><code> $this-&gt;cookie_status = isset($_COOKIE[&#39;sid&#39;]) ? 1 : 0; 
</code></pre>
<p>覆盖同名文件，再使用uc密码就可以正常登录了  </p>
]]></content>
      <tags>
        <tag>Discuz</tag>
      </tags>
  </entry>
  <entry>
    <title>Drcom校园网认证系列（一） 抓包 (P版、D版)</title>
    <url>//post/drcom-1.html</url>
    <content><![CDATA[<p>drcom（俗称小地球）广泛用于各大高校的宽带认证，常见包括三个版本，5.2.0 的P、D、X版。<br>P版就是在普通的PPPOE拨号的基础上添加了一个客户端与服务器通信认证的过程。<br>D版直接通过客户端的接口与服务器建立连接。X版复杂许多，一般会先有802.1x认证再进行端口通讯认证。<br>本教程能够解决大部分的P、D版本，Alliot 学校只有这两个版本的测试条件，所以其他的版本就不用看了。<span id="more"></span>   </p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><blockquote class="blockquote-center">
<p>本教程大部分内容来自 github 上 drcom-generic 开源项目，以及网络上各大牛的帖子与文章，大牛众多且出名，就不一一感谢与强调其版权。Alliot 只进行了测试与整理以及部分错误的修正针对小白更友好一点，由阅读者实操所产生的一切后果，一概不负责。仅供学习与交流，请勿用于商业用途！</p>

</blockquote> 
<p>所有用到的材料：链接：<a href="https://pan.baidu.com/s/1OG_n0jbBAdSk931N0smBCA">https://pan.baidu.com/s/1OG_n0jbBAdSk931N0smBCA</a> 密码：ouf9</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="确定所使用的客户端版本"><a href="#确定所使用的客户端版本" class="headerlink" title="确定所使用的客户端版本"></a>确定所使用的客户端版本</h3><p>打开学校的客户端，右上角可以看到ver5.2.1(*)<br><img data-src="https://static.iots.vip/2016/09/201609203548_9523.png" alt="版本">  </p>
<h3 id="电脑安装必要软件"><a href="#电脑安装必要软件" class="headerlink" title="电脑安装必要软件"></a>电脑安装必要软件</h3><p>python2.7（调试用到）、wireshark（抓包工具）、notepad++（修改代码用到），网上都有的，自己找一下，这里就不贴出来了。  </p>
<h3 id="网络抓包"><a href="#网络抓包" class="headerlink" title="网络抓包"></a>网络抓包</h3><p>1、 先断开网络，注销并关闭drcom客户端。<br>2、 打开wireshark，选中你联网用的那个连接。点击start！如图所示：<br><img data-src="https://static.iots.vip/2016/09/201609208418_5850.png" alt="wireshark抓包"><br>软件会进入如下界面<br><img data-src="https://static.iots.vip/2016/09/201609202016_5487.png" alt="运行截图"><br>现在打开drcom客户端，拨号连接并在线保持1分钟左右，然后注销，完全关闭drcom后，选择wireshark的停止抓包，选择File-save 选择保存路径，并重命名该文件为dr.pcapng   (拓展名为.pcang)<br>完成抓包</p>
<h3 id="对抓包后的数据进行分析"><a href="#对抓包后的数据进行分析" class="headerlink" title="对抓包后的数据进行分析"></a>对抓包后的数据进行分析</h3><h4 id="P版"><a href="#P版" class="headerlink" title="P版"></a>P版</h4><p>1、 把下载的 <code>drcom_p_config.py</code> 和 <code>latest-pppoe.py</code> 和 <code>dr.pcapng</code> 放入一个文件夹中，且将文件夹命名为a<br>2、 用 notepad++ 打开 <code>drcom_p_config.py</code> 把里边的filename的值改为dr.pcapng （改好了的就忽略） 并保存。<br><img data-src="https://static.iots.vip/2016/09/201609202939_8299.png"><br>3、 右键我的电脑&mdash;属性&mdash;高级系统设置&mdash;环境变量&mdash;在系统变量找到path&mdash;编辑&mdash;新建&mdash;在框里输入python2.7的安装目录，并保存。关闭窗口。<br>4、开始-运行 cmd 进入命令提示符。输入文件夹所在的盘符，我的是在F盘  输入F:并回车。  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">CD <span class="selector-tag">a</span>  </span><br></pre></td></tr></table></figure>
<p>输入  </p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">python drcom_p_config.py &gt; config.txt</span><br></pre></td></tr></table></figure>
<p><img data-src="https://static.iots.vip/2016/09/201609202909_4210.png" alt="cmd"><br>5、进入到你的a文件夹，发现里面多了一个config.txt文件。用Notepad++打开（为避免不必要的麻烦，以下操作所有的文件全部用它）<br>得到的内容是类似这样的：  </p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">server</span> = <span class="string">&#x27;*.*.*.*&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">pppoe_flag</span> = <span class="string">&#x27;\x00&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">keep_alive2_flag</span> = <span class="string">&#x27;\xdc&#x27;</span></span><br></pre></td></tr></table></figure>
<p>全选复制<br>关闭，并把config.txt重命名为drcom.conf<br>5、打开latest-pppoe.py  将#CONFIG 到 # CONFIG_END 中间的部分粘贴成刚才的。<br>6、测试是否可用。<br>　　①打开命令提示符 将latest-pppoe.py拖进去并回车<br>　　②同时用电脑的宽带拨号进行拨号。看看能不能上网。可以的话，就说明抓包没错。  </p>
<h4 id="D版"><a href="#D版" class="headerlink" title="D版"></a>D版</h4><p>与P版基本相同，不过用到的是 <code>latest-wired.py</code> 与 <code>drcom_d_config.py</code><br>第5步得到的内容是类似这样的： </p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">server</span> = <span class="string">&quot;192.168.100.150&quot;</span></span><br><span class="line"><span class="attr">username</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">password</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">host_name</span> = <span class="string">&quot;LIYUANYUAN&quot;</span></span><br><span class="line"><span class="attr">host_os</span> = <span class="string">&quot;8089D&quot;</span></span><br><span class="line"><span class="attr">host_ip</span> = <span class="string">&quot;10.30.22.17&quot;</span></span><br><span class="line"><span class="attr">PRIMARY_DNS</span> = <span class="string">&quot;114.114.114.114&quot;</span></span><br><span class="line"><span class="attr">dhcp_server</span> = <span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line"><span class="attr">mac</span> = <span class="number">0</span>xb888e3051680</span><br><span class="line"><span class="attr">CONTROLCHECKSTATUS</span> = <span class="string">&#x27;\x20&#x27;</span></span><br><span class="line"><span class="attr">ADAPTERNUM</span> = <span class="string">&#x27;\x01&#x27;</span></span><br><span class="line"><span class="attr">KEEP_ALIVE_VERSION</span> = <span class="string">&#x27;\xdc\x02&#x27;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>折腾</tag>
        <tag>Drcom</tag>
        <tag>系列</tag>
      </tags>
  </entry>
  <entry>
    <title>Drcom校园网认证系列（二）将drcom认证交给路由器</title>
    <url>//post/drcom-2.html</url>
    <content><![CDATA[<p>drcom（俗称小地球）广泛用于各大高校的宽带认证，常见包括三个版本，5.2.0 的P、D、X版。<br>P版就是在普通的PPPOE拨号的基础上添加了一个客户端与服务器通信认证的过程。<br>D版直接通过客户端的接口与服务器建立连接。X版复杂许多，一般会先有802.1x认证再进行端口通讯认证。<br>本教程能够解决大部分的P、D版本，Alliot 学校只有这两个版本的测试条件，所以其他的版本就不用看了。<span id="more"></span>   </p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><blockquote class="blockquote-center">
<p>本教程大部分内容来自 github 上 drcom-generic 开源项目，以及网络上各大牛的帖子与文章，大牛众多且出名，就不一一感谢与强调其版权。Alliot 只进行了测试与整理以及部分错误的修正针对小白更友好一点，由阅读者实操所产生的一切后果，一概不负责。仅供学习与交流，请勿用于商业用途！</p>

</blockquote>  

<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="准备路由器以及所需软件环境"><a href="#准备路由器以及所需软件环境" class="headerlink" title="准备路由器以及所需软件环境"></a>准备路由器以及所需软件环境</h3><p>　　路由器刷进drcom最低要求内存64M闪存8M，建议内存64M闪存16M，要求已刷好oenwrt固件，推荐使用压缩包中的潘多拉（Pandora）固件，此固件进过很多次测试！<br>从网上找到wincap、Xshell并安装好。  </p>
<h3 id="路由器系统环境安装配置"><a href="#路由器系统环境安装配置" class="headerlink" title="路由器系统环境安装配置"></a>路由器系统环境安装配置</h3><p>（以包中潘多拉固件为例）<br>1、打开winscap,如图填写。并登陆(默认密码是admin)<br><img data-src="https://static.iots.vip/2016/09/201609207938_1542.png" alt="winscap"><br>2、将压缩包中ipk文件、文件夹下的所有文件拖到路由器的&#x2F;tmp中。<br>3、打开Xshell，登录（同winscap）。<br>　　依次将以下命令输入等待命令行出现root[@***]&#x2F;tmp # 再回车（一行一回车）  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">opkg update</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">opkg install /tmp/zlib_1.2.8-1_ralink.ipk</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">opkg install /tmp/python-mini.ipk</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">opkg install /tmp/libffi_3.0.13-1_ralink.ipk</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">opkg install /tmp/python.ipk</span><br></pre></td></tr></table></figure>

<p>完成后输入python 看出现&gt;&gt;&gt; 表示成功，按Ctrl+C退出  </p>
<h3 id="准备并修改配置文件"><a href="#准备并修改配置文件" class="headerlink" title="准备并修改配置文件"></a>准备并修改配置文件</h3><p>　　1、用notepad++打开抓包修改后的latest-pppoe.py，修改 IS_TEST &#x3D; True 为 IS_TEST &#x3D; False 并将文件重命名为drcom<br>　　2、将drcom拖进winscap的&#x2F;usr&#x2F;bin路径下，并右键drcom修改8进制的数字为777<br><img data-src="https://static.iots.vip/2016/09/201609205213_8783.png" alt="/usr/bin"><br>　　3、回到根目录下的etc,把drcom.conf拖进去。同样改为777<br>　　4、打开pppoe.sh，修改server&#x3D;”127.0.0.1”为抓包的IP，然后把pppoe.sh放入路由器 &#x2F;usr&#x2F;bin&#x2F;点属性修改八进制为777。<br>看&#x2F;usr&#x2F;bin&#x2F;里边有没有start.sh文件，没有的话直接把start.sh拖进去，修改八进制为777<br>　　5、回根目录，&#x2F;etc&#x2F;rc.local的exit 0 前加上：  </p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sleep</span> 15</span><br><span class="line"></span><br><span class="line">start.<span class="keyword">sh</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">sleep</span> 15</span><br><span class="line"></span><br><span class="line">pppoe.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>　　1、打开路由器后台，网络-WAN修改-协议-切换协议，在账号密码填上你的。保存&amp;应用。退出。<br>　　2、拔掉路由器电源，WAN口插上学校网线，LAN插你电脑网线，插上电源等待启动完成。<br>　　3、能上网了就恭喜你了。</p>
]]></content>
      <tags>
        <tag>折腾</tag>
        <tag>Drcom</tag>
        <tag>系列</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS服务器设置自动时间同步</title>
    <url>//post/centos-ntpdate.html</url>
    <content><![CDATA[<p>在虚拟机中使用centos的时候，经常进行挂起等操作，这样导致时间经常不准确，于是进行自动时间同步的设置，服务器同理。<span id="more"></span>  </p>
<h2 id="安装ntpdate"><a href="#安装ntpdate" class="headerlink" title="安装ntpdate"></a>安装ntpdate</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install ntp</span><br></pre></td></tr></table></figure>
<p>安装完成后，无需其他配置，直接执行  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ntpdate time.nist.gov</span><br></pre></td></tr></table></figure>
<p>如果出现以下内容，说明同步成功了。  </p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">15 </span>Jan <span class="number">11</span>:<span class="number">40</span>:<span class="number">25</span> ntpdate[<span class="number">804</span>]: adjust time server <span class="number">132.163</span>.<span class="number">4.101</span> offset <span class="number">0.093992</span> sec</span><br></pre></td></tr></table></figure>
<p>然后在crontab里面加上以下内容  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*/10 * * * * ntpdate time.nist.gov   <span class="comment">#域名或IP</span></span><br></pre></td></tr></table></figure>
<p>每隔十分钟同步一次。推荐几个时间服务器:  </p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">time</span><span class="selector-class">.nist</span><span class="selector-class">.gov</span></span><br><span class="line"><span class="selector-tag">time</span><span class="selector-class">.nuri</span><span class="selector-class">.net</span></span><br><span class="line">asia<span class="selector-class">.pool</span><span class="selector-class">.ntp</span><span class="selector-class">.org</span></span><br><span class="line">asia<span class="selector-class">.pool</span><span class="selector-class">.ntp</span><span class="selector-class">.org</span></span><br><span class="line">asia<span class="selector-class">.pool</span><span class="selector-class">.ntp</span><span class="selector-class">.org</span></span><br><span class="line">asia<span class="selector-class">.pool</span><span class="selector-class">.ntp</span>.org</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker依赖的Linux内核特性</title>
    <url>//post/linux-docker-1.html</url>
    <content><![CDATA[<p>　　<code>Docker</code> 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 <code>Linux</code> 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。 这里记录一些基本的概念<span id="more"></span></p>
<h2 id="Docker依赖的Linux内核特性"><a href="#Docker依赖的Linux内核特性" class="headerlink" title="Docker依赖的Linux内核特性"></a>Docker依赖的Linux内核特性</h2><h3 id="Namespaces-命名空间"><a href="#Namespaces-命名空间" class="headerlink" title="Namespaces 命名空间"></a>Namespaces 命名空间</h3><p>　　命名空间是 <code>Linux</code> 内核的一个强大特性，为容器虚拟化的实现带来了极大的便利。利用这一特性，每个容器都可以拥有自己单独的命名空间，运行在其中的应用都像是在独立的操作系统环境中一样。命名空间机制保证了容器之间彼此互不影响。</p>
<ul>
<li>PID (process ID) 进程ID隔离</li>
<li>NET(network) 管理网络端口</li>
<li>IPC(InterProcess Communication)</li>
<li>管理跨进程通信的访问</li>
<li>MNT(Mount) 管理挂载点</li>
<li>UTS(Unix Timesharing System) 隔离内核和版本标识</li>
<li>Control groups(c groups) 控制组</li>
</ul>
<h3 id="Control-groups-c-groups-控制组"><a href="#Control-groups-c-groups-控制组" class="headerlink" title="Control groups(c groups) 控制组"></a>Control groups(c groups) 控制组</h3><p>　　控制组是 <code>Linux</code> 内核的一个特性，主要用来对共享资源进行隔离、限制、审计等，只有能控制分配到容器的资源，才能避免多个容器同时运行时对宿主机系统的资源竞争。  </p>
<ul>
<li>资源限制  </li>
<li>优先级设定  </li>
<li>资源计量  </li>
<li>资源控制</li>
</ul>
<ul>
<li>用来分配资源  </li>
<li>来源于Google  </li>
<li>Linux kernel 2.6.24 @ 2007</li>
</ul>
<h2 id="Docker容器的能力"><a href="#Docker容器的能力" class="headerlink" title="Docker容器的能力"></a>Docker容器的能力</h2><ul>
<li>文件系统隔离：每个容器都有自己的root文件系统。  </li>
<li>进程隔离：每个容器都运行在自己的进程环境中。  </li>
<li>网络隔离：容器间的虚拟网络接口和IP地址都是分开的。  </li>
<li>资源隔离和分组：使用cgroup将CPU和内存之类的资源独立分配给每个Docker容器。</li>
</ul>
<hr>
<p>参考资料:<br><a href="https://book.douban.com/subject/26284823/">《Docker技术入门与实战》</a></p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>GitLab跨版本升级并迁移到Docker环境</title>
    <url>//post/gitlab-update-to-docker.html</url>
    <content><![CDATA[<p>　　GitLab 是一款开源的软件项目管理和代码托管程序，通过搭建该代码托管服务器可实现私有化软件项目和代码托管，开发人员可远程访问进行wiki和在线代码编辑，issue 跟踪、CI &#x2F; CD等功能。被互联网企业、软件开发公司所广泛使用。我司当然也不例外。由于我司的 GitLab 年代久远，一直没人去动它，最近频繁宕掉，加上上月底爆出高危漏洞，因此打算对其做一次升级与迁移，同时改成 Docker 方式来部署。<span id="more"></span>  </p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>　　GitLab 小版本的升级可以直接升级（当然别忘了做好备份），大版本的升级需要逐版本升级。所谓小版本升级，即 9.2.3 到 9.5.10 这种都算小版本升级，只需要在做好备份的情况下直接升级即可。大版本升级需要梯度升级，即先升级到当前大版本的最新版本，再升级到下个大版本的最旧版本，最后才能升级到下个大版本的最新版本。<br>　　如果是通过 rpm 包等方式直接安装到系统中的，迁移到 <code>docker-compose</code> 方式会给升级省去许多麻烦，日后维护也会方便许多。  </p>
<h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p>　　GitLab 的备份很简单，直接通过命令行执行：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/opt/gitlab/bin/gitlab-rake gitlab:backup:creat  </span><br></pre></td></tr></table></figure>
<p>　　之后会生成文件名类似 <code>1617738463_2021_04_07_9.5.3_gitlab_backup.tar</code> 的备份文件到 <code>/var/opt/gitlab/backups</code> 路径下（这个路径也可以在 <code>/etc/gitlab/gitlab.rb</code> 中的 <code>gitlab_rails[&#39;backup_path&#39;] = &quot;/var/opt/gitlab/backups&quot;</code> 字段定义，修改后需要重启 GitLib 生效）<br>同时备份如下文件： </p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/etc/gi</span>tlab/gitlab.rb  </span><br><span class="line"><span class="regexp">/etc/gi</span>tlab/gitlab-secrets.json  </span><br></pre></td></tr></table></figure>
<p>将上述文件传到新机器上即可。</p>
<h3 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h3><p>　　新机器上需要安装 docker 以及 docker-compose，这个过程不是重点，就省略了。(<a href="/post/centos-install-docker-ce.html">CentOS 7安装Docker</a>)  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~ </span><br><span class="line">mkdir gitlab  </span><br></pre></td></tr></table></figure>
<p>　　新建如下配置文件，其中 GITLAB_OMNIBUS_CONFIG 部分根据之前 <code>/etc/gitlab/gitlab.rb</code> 的实际配置来修改。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">gitlab:</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">&#x27;gitlab/gitlab-ce:9.5.3-ce.0&#x27;</span>     <span class="comment"># 切记！！这里务必选择旧版本相同的版本，否则会出现无法恢复备份的情况  </span></span><br><span class="line">      <span class="attr">container_name:</span> <span class="string">&quot;gitlab&quot;</span></span><br><span class="line">      <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">      <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">hostname:</span> <span class="string">&#x27;docker-gitlab-01&#x27;</span></span><br><span class="line">      <span class="attr">environment:</span></span><br><span class="line">        <span class="attr">TZ:</span> <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line">        <span class="comment"># 这里的配置其实就是 /etc/gitlab/gitlab.rb 中的配置，按自己的实际需求增减</span></span><br><span class="line">        <span class="attr">GITLAB_OMNIBUS_CONFIG:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          external_url &#x27;http://www.iots.vip&#x27;</span></span><br><span class="line"><span class="string">          gitlab_rails[&#x27;time_zone&#x27;] = &#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"><span class="string">          gitlab_rails[&#x27;smtp_enable&#x27;] = true</span></span><br><span class="line"><span class="string">          gitlab_rails[&#x27;smtp_address&#x27;] = &quot;www.iots.vip&quot;</span></span><br><span class="line"><span class="string">          gitlab_rails[&#x27;smtp_port&#x27;] = 465</span></span><br><span class="line"><span class="string">          gitlab_rails[&#x27;smtp_user_name&#x27;] = &quot;a@qq.com&quot;</span></span><br><span class="line"><span class="string">          gitlab_rails[&#x27;smtp_password&#x27;] = &quot;password&quot;</span></span><br><span class="line"><span class="string">          gitlab_rails[&#x27;smtp_domain&#x27;] = &quot;www.iots.vip&quot;</span></span><br><span class="line"><span class="string">          gitlab_rails[&#x27;smtp_authentication&#x27;] = &quot;login&quot;</span></span><br><span class="line"><span class="string">          gitlab_rails[&#x27;smtp_enable_starttls_auto&#x27;] = true</span></span><br><span class="line"><span class="string">          gitlab_rails[&#x27;smtp_tls&#x27;] = true</span></span><br><span class="line"><span class="string">          gitlab_rails[&#x27;gitlab_email_from&#x27;] = &#x27;a@qq.com&#x27;</span></span><br><span class="line"><span class="string">          gitlab_rails[&#x27;gitlab_shell_ssh_port&#x27;] = 10086</span></span><br><span class="line"><span class="string">          gitlab_rails[&#x27;git_max_size&#x27;] = 20971520</span></span><br><span class="line"><span class="string">          gitlab_rails[&#x27;git_timeout&#x27;] = 10</span></span><br><span class="line"><span class="string">          gitlab_rails[&#x27;gitlab_shell_git_timeout&#x27;] = 800</span></span><br><span class="line"><span class="string"></span>          </span><br><span class="line">          <span class="comment"># 以下三行当需要用外部nginx做代理转发的时候启用</span></span><br><span class="line">          <span class="comment"># 其中 IP 为nginx代理所在的IP，可以为网段</span></span><br><span class="line">          <span class="string">nginx[&#x27;real_ip_trusted_addresses&#x27;]</span> <span class="string">=</span> [<span class="string">&#x27;192.168.101.0/24&#x27;</span>, <span class="string">&#x27;192.168.202.0/24&#x27;</span>] </span><br><span class="line">          <span class="string">nginx[&#x27;real_ip_header&#x27;]</span> <span class="string">=</span> <span class="string">&#x27;X-Forwarded-For&#x27;</span></span><br><span class="line">          <span class="string">nginx[&#x27;real_ip_recursive&#x27;]</span> <span class="string">=</span> <span class="string">&#x27;on&#x27;</span></span><br><span class="line">          </span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&#x27;80:80&#x27;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&#x27;443:443&#x27;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&#x27;10086:10086&#x27;</span> <span class="comment"># 这里修改为上面配置的 gitlab_rails[&#x27;gitlab_shell_ssh_port&#x27;] </span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/opt/gitlab/config:/etc/gitlab</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/opt/gitlab/data:/var/opt/gitlab</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/opt/gitlab/logs:/var/log/gitlab</span></span><br><span class="line">        <span class="bullet">-</span> </span><br></pre></td></tr></table></figure>
<p>确认配置无误之后，我们启动这个容器组：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/gitlab</span><br><span class="line">docker-compose up -d # 以daemon模式启动docker-compose</span><br><span class="line">docker-compose logs -f -t --tail 100 # 动态查看容器日志的最后100行 </span><br></pre></td></tr></table></figure>
<p>　　当容器完成初始化启动完成后，我们通过 80 端口能正常访问 GitLab 后，开始恢复我们之前生成的备份。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将前面的备份文件 1617738463_2021_04_07_9.5.3_gitlab_backup.tar 复制到 /opt/gitlab/data/backups 下</span></span><br><span class="line">mv /tmp/1617738463_2021_04_07_9.5.3_gitlab_backup.tar /opt/gitlab/data/backups</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入容器</span></span><br><span class="line">docker-compose exec gitlab /bin/bash </span><br><span class="line"></span><br><span class="line">gitlab-ctl stop unicorn # 停止相关的服务</span><br><span class="line">gitlab-ctl stop sidekiq</span><br><span class="line">cd /var/opt/gitlab/backups  </span><br><span class="line">ls # 可以看到 1617738463_2021_04_07_9.5.3_gitlab_backup.tar 备份文件 </span><br><span class="line">gitlab-rake gitlab:backup:restore BACKUP=1617738463_2021_04_07_9.5.3   # 这里注意，不是完整的备份文件名，而是文件名去掉_gitlab_backup.tar后缀</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">之后便会开始恢复备份，过程中会需要输入两次<span class="built_in">yes</span></span></span><br></pre></td></tr></table></figure>
<p>　　这里插一句： 如果这里你没有注意到我前面提示的用相同版本容器镜像，而是使用了与备份包不同版本的容器镜像，在恢复备份时则会出现如下错误：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@docker-gitlab-01:/var/opt/gitlab/backups# gitlab-rake gitlab:backup:restore BACKUP=1617911251_2021_04_09_9.5.3</span><br><span class="line">Unpacking backup ... done</span><br><span class="line">GitLab version mismatch:</span><br><span class="line">  Your current GitLab version (13.7.4) differs from the GitLab version in the backup!</span><br><span class="line">  Please switch to the following version and try again:</span><br><span class="line">  version: 9.5.3</span><br></pre></td></tr></table></figure>
<p>这个时候只能删除 <code>/opt/gitlab</code> 下的所有文件，重新启动与备份包相同版本的容器。</p>
<p>恢复备份完成后，我们需要重启一下容器。  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这时候你应该还在容器中，需要退回到宿主机：</span></span><br><span class="line">exit</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启</span></span><br><span class="line">docker-compose restart </span><br></pre></td></tr></table></figure>
<p>　　重启完成后，需要通过网页查看我们的仓库数据是否正常，仓库推拉、邮件等功能是否正常。 确认一切正常后，就开始升级了。  </p>
<h3 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h3><p>　　GitLab 的升级，遵循小版本直接升，大版本需要升级到上一个大版本的最新版本，才能升级，否则会出错。  我当前的版本为 9.5.3，最新版本为 13.10.2，则升级路线应该为：  </p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 具体哪个版本是大版本的最新版本，一种方式是直接通过 dockerhub 中的 TAG 来查看，另外一种是直接通过官网的 release log 来查看。  </span></span><br><span class="line">  <span class="attribute">9</span>.<span class="number">5</span>.<span class="number">3</span> -&gt; <span class="number">9</span>.<span class="number">5</span>.<span class="number">10</span> -&gt; <span class="number">10</span>.<span class="number">0</span>.<span class="number">3</span>  -&gt; <span class="number">10</span>.<span class="number">8</span>.<span class="number">7</span> -&gt; <span class="number">11</span>.<span class="number">11</span>.<span class="number">8</span> -&gt; <span class="number">12</span>.<span class="number">0</span>.<span class="number">12</span>  -&gt; <span class="number">12</span>.<span class="number">10</span>.<span class="number">14</span> -&gt; <span class="number">13</span>.<span class="number">0</span>.<span class="number">14</span> -&gt; <span class="number">13</span>.<span class="number">10</span>.<span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>Docker 化的 GitLab 升级过程相对来说比较简单，我们仅仅需要做的就是，停止容器，然后修改 <code>docker-compose.yml</code> 中的 <code>image</code> 为新版本即可。  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止</span></span><br><span class="line">docker-compose stop </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">我当前的版本为 9.5.3，下个版本应该先升级到 9.5.10</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">则修改 docker-compose.yml 中的 images 为 9.5.10</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新启动一下</span> </span><br><span class="line">docker-compose up -d</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">看看容器日志有没有什么异常或报错</span>  </span><br><span class="line">docker-compose logs -f -t --tail 100 </span><br></pre></td></tr></table></figure>
<p>等待升级完成即可开始验证功能。  </p>
<p>依此类推，按照升级路线逐级升级即可。  </p>
<h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><h4 id="nginx代理转发"><a href="#nginx代理转发" class="headerlink" title="nginx代理转发"></a>nginx代理转发</h4><p>由于我们的 GitLab 所在的服务器是没有分配公网 IP 的，所有需要利用 NGINX 做代理转发，配置文件中需要配置如下的 <code>location</code>：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    # docker gitlab 所在的IP</span><br><span class="line">    proxy_pass       http://1.1.1.1:80; </span><br><span class="line"></span><br><span class="line">    # 由于部分仓库有比较大的文件，这里需要配置，否则在推拉大文件时会出错</span><br><span class="line">    client_max_body_size 1024m;    </span><br><span class="line">    </span><br><span class="line">    # 让后端获取真实的client IP</span><br><span class="line">    proxy_redirect off;</span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="gitlab-runner"><a href="#gitlab-runner" class="headerlink" title="gitlab-runner"></a>gitlab-runner</h4><p>升级完 GitLab 后，旧的版本的 runner 会无法连接，需要更新 runner 重新 register：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh | sudo bash</span><br><span class="line"></span><br><span class="line">yum install gitlab-runner -y</span><br><span class="line"></span><br><span class="line">gitlab-runner register</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输入 gitlab 服务器地址</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输入 token，可在 gitlab 管理后台获取</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输入该 runner 的描述，例如 runner-ali-npm-build</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输入该 runner 的 tag，例如 npm 或 backend</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输入该 runner 的 executor，例如 shell</span></span><br></pre></td></tr></table></figure>

<h4 id="gitlab-shell-hooks"><a href="#gitlab-shell-hooks" class="headerlink" title="gitlab-shell hooks"></a>gitlab-shell hooks</h4><p>公司有利用 gitlab-shell hooks 做内部 commit message 校验的，也需要将之前的 hooks 脚本手动迁移过来。<br>在 <code>docker-compose.yml</code> 文件的 volumes 字段添加如下映射：  </p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当配置了hooks的时候，需要映射出来，否则不用：</span></span><br><span class="line">- <span class="regexp">/opt/data</span><span class="regexp">/gitlab/hooks</span><span class="symbol">:/opt/gitlab/embedded/service/gitlab-shell/hooks</span></span><br></pre></td></tr></table></figure>
<p>再将旧的文件全部迁移过来即可。  </p>
<h4 id="gitlab-webhook"><a href="#gitlab-webhook" class="headerlink" title="gitlab webhook"></a>gitlab webhook</h4><p>升级迁移后，发现与 Jenkins 集成时使用的 webhook 无法使用，提示 <code>Url is blocked: Requests to the local network are not allowed</code>，这种情况需要使用管理员账号前往设置中：<br>依次进入： Admin area &#x3D;&gt; Settings &#x3D;&gt; Network<br>展开 <code>Outbound requests</code>，勾选 <code>Allow requests to the local network from web hooks and services</code> 即可。   </p>
<h4 id="定时备份"><a href="#定时备份" class="headerlink" title="定时备份"></a>定时备份</h4><p>docker-compose 跑的 GitLab 如果需要用 <code>crontab</code> 方式来进行备份的话，<code>docker-compose exec</code> 后面记得加 <code>-T</code>：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-T 为不分配 TTY，如果不加的话,利用 crontab 来运行会报： the input device is not a TTY</span> </span><br><span class="line">docker-compose exec -T gitlab gitlab-backup create</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Docker</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Cloudflare Tunnel前置代理支持</title>
    <url>//post/cloudflare-tunnel-proxy-support.html</url>
    <content><![CDATA[<p>　　赛博大善人的 Cloudflare Tunnel(前 Argo Tunnel) 只需要一个域名、一个 Cloudflare 帐号便可以将服务接入到 Cloudflare 的网络，提供了非常方便的内网穿透方式， 同时还提供了 ZeroTrust、防护等功能， 而这一切基本几乎都是免费的，相信看到此文的小伙伴已经薅上一段时间了，不过由于 Cloudflare Tunnel 官方的服务节点分布有限，在部分时空&#x2F;场景下，Tunnel 连通性会面临一些挑战， 这时候要是能够通过前置代理去连接到 Tunnel 服务，问题便能得到解决，可惜<a href="https://github.com/cloudflare/cloudflared/issues/350#issuecomment-1706842883">官方目前并没打算支持这个特性</a>。<span id="more"></span></p>
<p>　　目前比较有效的方案是 Xiaomage 同学的： <a href="https://blog.xmgspace.me/archives/cloudflare-tunnel-via-proxy.html">Cloudflare Tunnel速度慢？尝试给它加个前置代理提高速度</a> ，不过这种方式对动手能力还是有点要求的，同时也增加了部署的依赖。<br>　　这里看到社区有一个来自 <a href="https://github.com/Asutorufa">Asutorufa</a> 的PR: <a href="https://github.com/cloudflare/cloudflared/pull/1020">http2 tunnel support</a><br>经过测试，发现基本能实现这个需求。  根据这个思路，<a href="https://github.com/AlliotTech/cloudflared_proxy">Fork 仓库</a>后简单的加了个 GitHub Action 打包发布 Docker 镜像。 </p>
<p>　　顺便放一个 Docker compose 片段：  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cloudflare-tunnel:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">ghcr.io/alliottech/cloudflared_proxy:latest</span></span><br><span class="line">    <span class="comment"># network_mode: &quot;host&quot;</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">cloudflare-tunnel</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">cloudflare-tunnel</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">tunnel</span> <span class="string">run</span>  <span class="string">--protocol</span> <span class="string">http2</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;nginx&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime:ro</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;all_proxy=socks5://127.0.0.1:123&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;TUNNEL_TRANSPORT_PROTOCOL=http2&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;TUNNEL_TOKEN=xxxxxxxx&quot;</span></span><br></pre></td></tr></table></figure>
<p>　　直接替换之前的官方镜像片段为上述后即可愉快的玩耍了, 切记 <code>TUNNEL_TRANSPORT_PROTOCOL=http2</code> 这个环境变量是必须的: </p>
<blockquote>
<p><a href="https://github.com/cloudflare/cloudflared/pull/1020#issuecomment-1706843025">https://github.com/cloudflare/cloudflared/pull/1020#issuecomment-1706843025</a><br>This is something that we don’t actually want to support within cloudflared.<br>Furthermore, http2 transport only has a subset of features that cloudflared allows and the official transport to use should be QUIC, which wouldn’t work for the SOCKS proxy.</p>
</blockquote>
<p>　　当然，你也可以选择 Clone 仓库后，手动打包二进制直接使用：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make cloudflared TARGET_ARCH=amd64 TARGET_OS=linux</span><br></pre></td></tr></table></figure>
<p>使用编译后的 <code>cloudflared</code>: </p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="attribute">all_proxy</span>=socks5://127.0.0.1:123 ./cloudflared tunnel <span class="built_in">run</span> --protocol http2</span><br></pre></td></tr></table></figure>

<h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><p><a href="https://blog.xmgspace.me/archives/cloudflare-tunnel-via-proxy.html">Cloudflare Tunnel速度慢？尝试给它加个前置代理提高速度</a><br><a href="https://www.emengweb.com/p/%E6%8E%A2%E7%B4%A2Cloudflared-Tunnel-%E5%8E%9FArgo-Tunnel-%E5%AE%9E%E7%8E%B0%E4%B8%AD%E9%97%B4%E5%B1%82%E7%BD%91%E7%BB%9C%E5%8A%A0%E9%80%9F">探索Cloudflared Tunnel</a></p>
]]></content>
      <tags>
        <tag>折腾</tag>
        <tag>Docker</tag>
        <tag>Cloudflare</tag>
      </tags>
  </entry>
  <entry>
    <title>Git分支相关操作</title>
    <url>//post/git-branch-operations.html</url>
    <content><![CDATA[<p>　　本文将 Git 分支有关的常用操作做一下整理，便于查阅。<span id="more"></span><br>查看远程仓库：    </p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git remote -v</span></span><br></pre></td></tr></table></figure>
<p>将本地项目推送到远程仓库中：    </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">git remote add <span class="selector-attr">[远程仓库名]</span> <span class="selector-attr">[远程git服务器地址]</span></span><br></pre></td></tr></table></figure>
<p>删除远程仓库：  </p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git</span> remote rm<span class="meta"> [远程仓库名]</span></span><br></pre></td></tr></table></figure>
<p>当你的项目所在的远程仓库用的很不如意的时候(比如经常服务停止)你想换一个git服务器,可以使用下列命令以新git服务器地址替换旧git服务器地址,这样你本地文件夹不需要再克隆一份,直接就可以提交拉取新git服务器上的代码：  </p>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">git</span> <span class="string">remote</span> <span class="built_in">set-url</span> <span class="built_in">--push</span> [远程仓库名称] [更换的<span class="string">git</span>服务器地址]</span><br></pre></td></tr></table></figure>
<p>拉取远程仓库代码,如果你远程只有一个分支,本地只有一个分支,后面中括号内容都可以省略：  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">git pull <span class="selector-attr">[远程仓库名]</span> <span class="selector-attr">[本地分支名称]</span></span><br></pre></td></tr></table></figure>
<p>删除远程分支：  </p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> :branch1   #删除远程分支branch1  注意<span class="built_in">origin</span>后面的空格  </span><br></pre></td></tr></table></figure>
<p>删除本地分支：  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">git branch -d <span class="tag">&lt;<span class="name">分支名</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>合并分支：  </p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">git merge bra<span class="symbol">nch1</span> <span class="attr">#将branch1</span>分支合并到 当前分支 </span><br></pre></td></tr></table></figure>
<p>推送代码到远程仓库：  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">git push <span class="selector-attr">[远程仓库名]</span> <span class="selector-attr">[本地分支名称]</span></span><br></pre></td></tr></table></figure>
<p>提交本地分支提交到远程的master分支：  </p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">git push origin 本地分支名:<span class="keyword">master</span> <span class="title"></span></span><br></pre></td></tr></table></figure>

<p>提交指定本地分支到指定远程的分支：  </p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> 本地分支:远程仓库分支  </span><br></pre></td></tr></table></figure>

<p>提交本地当前分支到指定的远程分支：     </p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> [远程分支名称]</span><br></pre></td></tr></table></figure>
<p>查看本地分支：  </p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git branch</span></span><br></pre></td></tr></table></figure>
<p>查看远程仓库的分支：  </p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git branch -r</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Discuz X3.2出现UCenter info: Can not connect to MySQL server的解决方法</title>
    <url>//post/discuz-ucenter-cannot-connect-mysql.html</url>
    <content><![CDATA[<p>修改以下文件里面的mysql account password   </p>
<ul>
<li>安装目录&#x2F;config&#x2F;config_global.php         </li>
<li>安装目录&#x2F;config&#x2F;config_ucenter.php     </li>
<li>安装目录&#x2F;uc_server&#x2F;data&#x2F;config.inc.php</li>
</ul>
]]></content>
      <tags>
        <tag>Discuz</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下/etc/fstab详解</title>
    <url>//post/linux-fstab.html</url>
    <content><![CDATA[<p>　　平时我们使用 <code>mount</code> 来对设备进行挂载的时候，都是临时挂载的，在系统重启后，需要重新进行挂载，如果我们需要对一个分区进行开机自动挂载，可以通过编辑 &#x2F;etc&#x2F;fstab 来完成，系统在启动时，会根据 &#x2F;etc&#x2F;fstab 文件对分区进行自动挂载。 <span id="more"></span>  </p>
<h2 id="格式介绍"><a href="#格式介绍" class="headerlink" title="格式介绍"></a>格式介绍</h2><p>打开 &#x2F;etc&#x2F;fstab 内容如下：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># /etc/fstab</span></span><br><span class="line"><span class="comment"># Created by anaconda on Thu Jul  4 17:55:46 2019</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Accessible filesystems, by reference, are maintained under &#x27;/dev/disk&#x27;</span></span><br><span class="line"><span class="comment"># See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">/dev/mapper/centos-root /                       ext4    defaults        1 1</span><br><span class="line">UUID=2e53b1ff-e2ce-460b-9029-309ce81e811f /boot                   ext4    defaults        1 2</span><br><span class="line">/dev/mapper/centos-home /home                   ext4    defaults        1 2</span><br><span class="line">/dev/mapper/centos-var  /var                    ext4    defaults        1 2</span><br><span class="line">/dev/mapper/centos-swap swap                    swap    defaults        0 0</span><br></pre></td></tr></table></figure>
<p>格式为：  </p>
<blockquote>
<p>第一行：<br>设备名或 UUID 或 lable（设备卷标名）<br>第二行：<br>挂载点（要求目录为空）<br>第三行：<br>该分区文件系统格式，如 ext、ext2、msdos、iso9660、nfs、swap 等<br>第四行：<br>文件系统参数，即 mount 时要设定的状态，常用参数有 default、ro、rw、 suid、dev、exec、auto、nouser、async  等<br>第五行：<br>dump 备份设置 （0 不备份，1 每天进行 dump 备份，2 不定时进行 dump 备份）<br>第五行：<br>磁盘检查设置 （检查顺序，数值相同的同时检查，0 表示不自检，1 代表第一个检查，2 代表第二个检查，通常根目录是 1 的情况下，其他分区只能是 2）  </p>
</blockquote>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.cnblogs.com/simpman/archive/2013/05/28/3103070.html">https://www.cnblogs.com/simpman/archive/2013/05/28/3103070.html</a></p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>存储</tag>
      </tags>
  </entry>
  <entry>
    <title>Git初学笔记</title>
    <url>//post/linux-git1.html</url>
    <content><![CDATA[<p>“<a href="https://www.shiyanlou.com/">实验楼</a>”是一个不错的在线学习网站，提供了在线实战环境~  本文摘录在“实验楼”部分学习Git过程中的笔记。其次文中部分内容还来自<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">廖雪峰老师的博客</a> 在此晚辈敬过前辈。 <span id="more"></span>  </p>
<h2 id="Git是什么？"><a href="#Git是什么？" class="headerlink" title="Git是什么？"></a>Git是什么？</h2><blockquote>
<p>Git是目前世界上最先进的分布式版本控制系统（没有之一）。  </p>
</blockquote>
<h2 id="集中式和分布式版本控制系统的区别"><a href="#集中式和分布式版本控制系统的区别" class="headerlink" title="集中式和分布式版本控制系统的区别"></a>集中式和分布式版本控制系统的区别</h2><p>　　先说集中式版本控制系统，版本库是集中存放在中央服务器的，而大家工作的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始工作，工作完成，再把自己的修订推送给中央服务器。这类系统，都有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。<br>　　那分布式版本控制系统与集中式版本控制系统有何不同呢？首先，分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。<br>　　和集中式版本控制系统相比，分布式版本控制系统的安全性要高很多，因为每个人电脑里都有完整的版本库，某一个人的电脑坏掉了不要紧，随便从其他人那里复制一个就可以了。而集中式版本控制系统的中央服务器要是出了问题，所有人都没法干活了。<br>　　在实际使用分布式版本控制系统的时候，其实很少在两人之间的电脑上推送版本库的修改，因为可能你们俩不在一个局域网内，两台电脑互相访问不了，也可能今天你的同事病了，他的电脑压根没有开机。因此，分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活，只是交换修改不方便而已。<br>　　许多这类系统都可以指定和若干不同的远端代码仓库进行交互。籍此，你就可以在同一个项目中，分别和不同工作小组的人相互协作。你可以根据需要设定不同的协作流程，比如层次模型式的工作流，而这在以前的集中式系统中是无法实现的。  </p>
<h2 id="Git的安装"><a href="#Git的安装" class="headerlink" title="Git的安装"></a>Git的安装</h2><p>以CentOS为例：  </p>
<h3 id="方法一（yum安装）"><a href="#方法一（yum安装）" class="headerlink" title="方法一（yum安装）"></a>方法一（yum安装）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum install git</span></span><br></pre></td></tr></table></figure>
<h3 id="方法二（源码包安装）"><a href="#方法二（源码包安装）" class="headerlink" title="方法二（源码包安装）"></a>方法二（源码包安装）</h3><p>1、安装依赖包   </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum install  gcc perl-ExtUtils-MakeMaker</span></span><br></pre></td></tr></table></figure>
<h2 id="2、卸载旧版本Git3、下载并解压或4、编译安装5、检查Git版本"><a href="#2、卸载旧版本Git3、下载并解压或4、编译安装5、检查Git版本" class="headerlink" title="2、卸载旧版本Git3、下载并解压或4、编译安装5、检查Git版本"></a>2、卸载旧版本Git<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum remove git</span></span><br></pre></td></tr></table></figure><br>3、下载并解压<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd /usr/src</span></span><br></pre></td></tr></table></figure><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wget https://www.kernel.org/pub/software/scm/git/git-2.5.0.tar.gz</span></span><br></pre></td></tr></table></figure><br>或<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wget https://github.com/git/git/archive/v2.5.0.tar.gz</span></span><br></pre></td></tr></table></figure><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tar -zxvf git-2.5.0.tar.gz</span></span><br></pre></td></tr></table></figure><br>4、编译安装<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd git-2.5.0</span></span><br></pre></td></tr></table></figure><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># make prefix=/usr/local/git all</span></span><br></pre></td></tr></table></figure><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># make prefix=/usr/local/git install</span></span><br></pre></td></tr></table></figure><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># echo &quot;export PATH=$PATH:/usr/local/git/bin&quot; &gt;&gt; /etc/bashrc</span></span><br></pre></td></tr></table></figure><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># source /etc/bashrc</span></span><br></pre></td></tr></table></figure><br>5、检查Git版本<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># git --version</span></span><br></pre></td></tr></table></figure></h2><p>为了方便查阅整理 后续遇到的所有git相关问题将更新在 <a href="http://www.iots.vip/tags/Git/">git标签页</a>    </p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git服务器的搭建与配置</title>
    <url>//post/build-git-server.html</url>
    <content><![CDATA[<p>　　远程仓库诸如GitHub之类的其实与本地搭建的Git服务器没什么太大的区别，在一些对源代码保护比较看重的公司里，一般会选择自建Git服务器作为公司内网的私有仓库使用，这里记录的是Linux下的Git服务器搭建。<span id="more"></span>  </p>
<h2 id="Git服务器配置"><a href="#Git服务器配置" class="headerlink" title="Git服务器配置"></a>Git服务器配置</h2><h3 id="第一步-安装git"><a href="#第一步-安装git" class="headerlink" title="第一步 安装git"></a>第一步 安装git</h3><p>CentOS执行：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install -y git</span><br></pre></td></tr></table></figure>
<p>Ubuntu执行：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get intall -y git</span><br></pre></td></tr></table></figure>
<h3 id="第二步-权限配置"><a href="#第二步-权限配置" class="headerlink" title="第二步 权限配置"></a>第二步 权限配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo adduser git</span><br></pre></td></tr></table></figure>
<p>通过编辑&#x2F;etc&#x2F;passwd文件禁用git用户使用shell:<br>找到</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="symbol">git:</span><span class="symbol">x:</span><span class="number">1001</span><span class="symbol">:</span><span class="number">1001</span><span class="symbol">:</span>,,,<span class="symbol">:/home/git</span><span class="symbol">:/bin/bash</span></span><br></pre></td></tr></table></figure>
<p>修改为:  </p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="symbol">git:</span><span class="symbol">x:</span><span class="number">1001</span><span class="symbol">:</span><span class="number">1001</span><span class="symbol">:</span>,,,<span class="symbol">:/home/git</span><span class="symbol">:/usr/bin/git-shell</span></span><br></pre></td></tr></table></figure>
<p>之后给需要权限的用户分配一个ssh公钥，加入&#x2F;home&#x2F;git&#x2F;.ssh&#x2F;authorized_keys中。  </p>
<h3 id="初始化裸仓库"><a href="#初始化裸仓库" class="headerlink" title="初始化裸仓库"></a>初始化裸仓库</h3><p>进入需要放置的仓库的路径(如&#x2F;home&#x2F;git下)执行:  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo git init --bare test.git  </span><br></pre></td></tr></table></figure>
<p>这里是在此目录下初始化一个名为test.git的仓库。(所谓裸仓库是该仓库不包含工作区，也就是说我们不能在这个目录下执行一般我们使用的命令。)参见<a href="https://segmentfault.com/a/1190000007686496">Git 本地仓库和裸仓库 @TaoBeier</a><br>然后更改该目录的所有者与所处组为git:  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">chown</span> -R git:git test.git</span><br></pre></td></tr></table></figure>
<p>至此，Git服务器端已经配置完成，下面说说本地的使用： </p>
<h2 id="本地使用"><a href="#本地使用" class="headerlink" title="本地使用"></a>本地使用</h2><p>与GitHub等远程仓库基本一致。  </p>
<h3 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h3><p>假设Git服务器解析到git.iots.vip域名，则在项目目录下执行:  </p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">init</span> </span><br><span class="line">git <span class="keyword">add</span> -A *</span><br><span class="line">git commit -m <span class="string">&#x27;first commit&#x27;</span></span><br></pre></td></tr></table></figure>
<p>添加远程仓库：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">git remote <span class="keyword">add</span><span class="language-bash"> origin git@git.iots.vip:/home/git/test.git</span></span><br></pre></td></tr></table></figure>
<h3 id="提交至远程仓库"><a href="#提交至远程仓库" class="headerlink" title="提交至远程仓库"></a>提交至远程仓库</h3><p>执行</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">push</span> -u <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure>
<p>即可提交至远程仓库。  </p>
<h2 id="报错提示"><a href="#报错提示" class="headerlink" title="报错提示"></a>报错提示</h2><ul>
<li>报错”unpack failed: unpack-objects abnormal exit”，这是因为远程仓库的目录权限问题，服务器端执行:  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">chown</span> -R git:git [仓库路径]</span><br></pre></td></tr></table></figure></li>
<li>本地仓库git add报错”fatal: Not a git repository (or any of the parent directories): .git”  项目未初始化导致。<br>执行: <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></li>
</ul>
<p>待补充。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下.tar与.gz文件的生成与解包</title>
    <url>//post/linux-tar-gz.html</url>
    <content><![CDATA[<p>　　<code>.tar</code> 是归档文件，即打包不压缩，文件与原文件大小几乎没有多大的变化。<code>.gz</code> 则是 gzip 压缩所得文件，我们常见的一般是 <code>*.tar.gz</code> 格式的。本文记录了 <code>.tar</code> 与 <code>.gz</code> 文件的解包命令。<span id="more"></span>  </p>
<h2 id="tar"><a href="#tar" class="headerlink" title=".tar"></a>.tar</h2><p>生成：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -cvf Alliot.tar Alliot.<span class="built_in">log</span>    //仅打包，不压缩！ </span><br></pre></td></tr></table></figure>
<p>解包：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xvf Alliot.tar</span><br></pre></td></tr></table></figure>
<h2 id="gz"><a href="#gz" class="headerlink" title=".gz"></a>.gz</h2><p>生成：<br>一般来说都是搭配 <code>tar</code> 使用，因为 <code>gzip</code> 不能压缩目录，只能压缩单个文件，或者将目录下的文件单个压缩。  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gzip test.log     //将文件test.log压缩为test.log.gz</span><br><span class="line">gzip -rv test_dir     //这样，所有test_dir下面的文件都变成了*.gz，目录依然存在只是目录里面的文件相应变成了*.gz.这就是压缩，和打包不同。因为是对目录操作，所以需要加上-r选项，这样也可以对子目录进行递归了。  </span><br></pre></td></tr></table></figure>
<p>解压:  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gunzip test.log.gz </span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Jira与Confluence迁移至Docker</title>
    <url>//post/move-jira-confluence-to-docker.html</url>
    <content><![CDATA[<p>&emsp;&emsp;近期机房搬迁，帮忙将 Jira 与 Confluence 做了一次迁移。由于之前的维护人员几乎没有留下任何信息，环境比较乱，这里顺手改成了 Docker 方式部署。大问题没有，小坑比较多，此文用流水账的形式记录了一下搬迁时的大致步骤，以便不时之需。<span id="more"></span></p>
<h2 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h2><p>&emsp;&emsp;旧实例采用的物理机裸机部署，新实例改用 <code>docker</code> 部署方案。  </p>
<blockquote>
<p>操作系统： CentOS 7.9.2009<br>数据库: 一主一从  MySQL 5.7.35  (可以参考：<a href="/post/mysql-master-slave-replication.html">MySQL 主从同步配置 | Alliot’s blog</a>)  </p>
</blockquote>
<p>&emsp;&emsp;路径：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">jira       192.168.21.31</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">tree -L 1 /data/jira</span></span><br><span class="line">/data/jira</span><br><span class="line">├── data</span><br><span class="line">├── docker_config</span><br><span class="line">└── script</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">confluence  192.168.21.32</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">tree -L 1 /data/confluence</span></span><br><span class="line">/data/confluence</span><br><span class="line">├── data</span><br><span class="line">├── docker_config</span><br><span class="line">└── script</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">两者的 rsyncd 路径配置均为：</span> </span><br><span class="line">[DATA]</span><br><span class="line">path = /data/</span><br></pre></td></tr></table></figure>


<p>&emsp;&emsp;创建数据库：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 创建数据库，主要是注意编码格式  </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> DATABASE jira <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> DATABASE confluence <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin;</span><br><span class="line"></span><br><span class="line"># 创建数据库连接用户并授权</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> confluence.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;confluence&#x27;</span>@<span class="string">&#x27;192.168.%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;your_password&#x27;</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> jira.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;jira&#x27;</span>@<span class="string">&#x27;192.168.%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;your_password&#x27;</span>;</span><br></pre></td></tr></table></figure>


<h2 id="Jira"><a href="#Jira" class="headerlink" title="Jira"></a>Jira</h2><h3 id="部署新服务"><a href="#部署新服务" class="headerlink" title="部署新服务"></a>部署新服务</h3><p>&emsp;&emsp;部署与密钥生成部分请直接移步之前的文章： <a href="/post/atlassian-series-crack.html">Atlassian全家桶及其插件激活方法 | Alliot’s blog</a><br>需要注意是，<strong>生产环境别忘根据硬件配置来指定内存限制</strong>：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -itd -p 8080:8080 --name jira -v &quot;/data/jira/data:/var/atlassian/jira&quot; --env &quot;CATALINA_OPTS=-Xms8192m -Xmx8192m -Datlassian.plugins.enable.wait=300&quot; jira/jira:v7.13.0</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;启动完成后，打开 IP:8080 进入安装向导，根据向导配置好新的数据库后停止容器。  </p>
<h3 id="同步数据目录"><a href="#同步数据目录" class="headerlink" title="同步数据目录"></a>同步数据目录</h3><p>&emsp;&emsp;Jira 的数据目录为 <code>&lt;Jira PATH&gt;/application-data/jira/data</code><br>因此我们只需要进入旧的 Jira 服务器中，通过 <code>rsync</code> 将数据同步到新服务器即可，执行：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">路径与IP根据自己的实际情况修改</span></span><br><span class="line">rsync -avP --delete  --exclude=logs --exclude=temp /data01/atlassian/application-data/jira/data/ 192.168.21.31::DATA/jira/data/data/</span><br></pre></td></tr></table></figure>

<h3 id="导入数据库"><a href="#导入数据库" class="headerlink" title="导入数据库"></a>导入数据库</h3><p>进入新库，获取当前的 license 备用:    </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> use jira;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> productlicense\G</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">     ID: <span class="number">10200</span></span><br><span class="line">LICENSE: 这里是license</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">2.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">     ID: <span class="number">10201</span></span><br><span class="line">LICENSE: 这里是license</span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure>


<p>备份新库后，进入新库删除jira数据库内容，并导入旧库数据:  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">drop</span> database jira;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> DATABASE jira <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin;</span><br><span class="line">mysql<span class="operator">&gt;</span> use jira;</span><br><span class="line">mysql<span class="operator">&gt;</span> source jira<span class="operator">-</span>bak.sql;</span><br></pre></td></tr></table></figure>

<p>等待数据导入完成后，用上面得到的 license 替换（<strong>这一步很重要，否则新的 Jira 实例会起不来</strong>）：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> productlicense <span class="keyword">set</span> license <span class="operator">=</span><span class="string">&#x27;上面得到的 license&#x27;</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">10200</span>;</span><br><span class="line"><span class="keyword">update</span> productlicense <span class="keyword">set</span> license <span class="operator">=</span><span class="string">&#x27;上面得到的 license&#x27;</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">10201</span>;</span><br></pre></td></tr></table></figure>

<h3 id="重新启动新-Jira-实例"><a href="#重新启动新-Jira-实例" class="headerlink" title="重新启动新 Jira 实例"></a>重新启动新 Jira 实例</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker restart jira</span><br></pre></td></tr></table></figure>

<h3 id="部分问题处理"><a href="#部分问题处理" class="headerlink" title="部分问题处理"></a>部分问题处理</h3><h4 id="日志中出现数据库连接相关的警告"><a href="#日志中出现数据库连接相关的警告" class="headerlink" title="日志中出现数据库连接相关的警告"></a>日志中出现数据库连接相关的警告</h4><p>&emsp;&emsp;编辑 data&#x2F; 路径下的 <code>dbconfig.xml</code>，加入 <code>&amp;amp;useSSL=false&amp;amp;</code> 即可：  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">jdbc-datasource</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url</span>&gt;</span>jdbc:mysql://address=(protocol=tcp)(host=192.168.21.31)(port=3306)/jira?useUnicode=true<span class="symbol">&amp;amp;</span>useSSL=false<span class="symbol">&amp;amp;</span>characterEncoding=UTF8<span class="symbol">&amp;amp;</span>sessionVariables=default_storage_engine=InnoDB<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="原先的logo图缺失"><a href="#原先的logo图缺失" class="headerlink" title="原先的logo图缺失"></a>原先的logo图缺失</h4><p>&emsp;&emsp;同步 <code>/var/atlassian/jira/logos/</code> 路径下的资源。   </p>
<h4 id="部分插件图片缺失"><a href="#部分插件图片缺失" class="headerlink" title="部分插件图片缺失"></a>部分插件图片缺失</h4><p>&emsp;&emsp;同步 <code>/opt/atlassian/jira/atlassian-jira/images</code> 路径下的资源。  </p>
<h3 id="启用HTTPS"><a href="#启用HTTPS" class="headerlink" title="启用HTTPS"></a>启用HTTPS</h3><p>&emsp;&emsp;采用 Nginx 反向代理到 Docker 的方式。<br>部分配置参考：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    proxy_pass       http://127.0.0.1:8080; # 代理到 Jira 所在后端</span><br><span class="line">    proxy_set_header   X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header   X-Forwarded-Host $server_name;</span><br><span class="line">    proxy_set_header   X-Forwarded-Proto https;</span><br><span class="line">    proxy_read_timeout  1200s;</span><br><span class="line"></span><br><span class="line">    client_max_body_size 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Jira 与 Confluence 均必须做 http -&gt; https 的跳转：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name  www.iots.vip; # 域名</span><br><span class="line">    return 301 https://www.iots.vip$request_uri; # 301 到 https</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改容器内的 <code>/opt/atlassian/jira/conf/server.xml</code> connector 部分配置：  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Connector port=&quot;8080&quot; relaxedPathChars=&quot;[]|&quot; relaxedQueryChars=&quot;[]|&#123;&#125;^<span class="symbol">&amp;#x5c;</span><span class="symbol">&amp;#x60;</span><span class="symbol">&amp;quot;</span><span class="symbol">&amp;lt;</span><span class="symbol">&amp;gt;</span>&quot;</span><br><span class="line">                   maxThreads=&quot;150&quot; minSpareThreads=&quot;25&quot; connectionTimeout=&quot;20000&quot; enableLookups=&quot;false&quot;</span><br><span class="line">                   maxHttpHeaderSize=&quot;8192&quot; protocol=&quot;HTTP/1.1&quot; useBodyEncodingForURI=&quot;true&quot; redirectPort=&quot;8443&quot;</span><br><span class="line">                   acceptCount=&quot;100&quot; disableUploadTimeout=&quot;true&quot; bindOnInit=&quot;false&quot; proxyName=&quot;www.iots.vip&quot; proxyPort=&quot;443&quot; scheme=&quot;https&quot; secure=&quot;true&quot;/&gt;</span><br></pre></td></tr></table></figure>
<p>这里主要修改的是 scheme 为 https。之后登陆后台，将 BaseURL 修改为带 HTTPS 的 URL 重启即可。  </p>
<h2 id="Confluence"><a href="#Confluence" class="headerlink" title="Confluence"></a>Confluence</h2><p>&emsp;&emsp;Confluence 需要同步的仅仅是 attachments 目录（如果数据量非常大，重新索引会花费大量时间的话，也可以将 index 目录同步），以及数据库，但是需要注意的是，</p>
<h3 id="部署新服务-1"><a href="#部署新服务-1" class="headerlink" title="部署新服务"></a>部署新服务</h3><p>&emsp;&emsp;部署与密钥生成部分请直接移步之前的文章： <a href="/post/atlassian-series-crack.html">Atlassian全家桶及其插件激活方法 | Alliot’s blog</a>，同样的，<strong>生产环境别忘记配置内存限制</strong>：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -itd -p 8090:8090 --name confluence -v &quot;/data/confluence/data:/var/atlassian/confluence&quot; --env &quot;CATALINA_OPTS=-Xms8192m -Xmx8192m -Datlassian.plugins.enable.wait=300&quot; confluence/confluence:6.13.0</span><br></pre></td></tr></table></figure>
<p>启动完成后，打开 IP:8090，同样的，根据向导配置好新的数据库后停止容器。 </p>
<h3 id="同步数据目录-1"><a href="#同步数据目录-1" class="headerlink" title="同步数据目录"></a>同步数据目录</h3><p>&emsp;&emsp;登陆旧的 Confluence 实例，通过 <code>rsync</code> 同步附件数据到新服务器中：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rsync -avP --delete /data01/atlassian/application-data/confluence/attachments/ 192.168.21.32::DATA/confluence/data/attachments/</span><br></pre></td></tr></table></figure>

<h3 id="导入数据库-1"><a href="#导入数据库-1" class="headerlink" title="导入数据库"></a>导入数据库</h3><p>同 Jira，先 <code>DROP</code> 掉新安装的库，重新建库，然后导入旧库备份过来的数据。  </p>
<h3 id="重新启动Confluence实例"><a href="#重新启动Confluence实例" class="headerlink" title="重新启动Confluence实例"></a>重新启动Confluence实例</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker restart confluence</span><br></pre></td></tr></table></figure>

<h3 id="部分问题处理-1"><a href="#部分问题处理-1" class="headerlink" title="部分问题处理"></a>部分问题处理</h3><h4 id="日志中出现数据库连接相关的警告-1"><a href="#日志中出现数据库连接相关的警告-1" class="headerlink" title="日志中出现数据库连接相关的警告"></a>日志中出现数据库连接相关的警告</h4><p>&emsp;&emsp;编辑 data&#x2F; 路径下的 <code>confluence.cfg.xml</code>，找到数据库连接串，类似如下行：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.url&quot;</span>&gt;</span>jdbc:mysql://192.168.21.31:3306/confluence<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在 jdbc 连接串后加入 <code>?useSSL=false</code>，完成后如下：  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.url&quot;</span>&gt;</span>jdbc:mysql://192.168.21.31:3306/confluence?useSSL=false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>重启容器即可。  </p>
<h4 id="登陆失败"><a href="#登陆失败" class="headerlink" title="登陆失败"></a>登陆失败</h4><p>&emsp;&emsp;这种情况通常是出现在 Confluence 使用 Jira 作为认证手段的情况下，而由于 Jira 迁移变换了 IP，Confluence 无法链接到 Jira。这时候需要用 Confluence 本身的管理员账号登陆后台管理，重新更改 “后台 -&gt; 用户目录”（ URL： confluence地址&#x2F;plugins&#x2F;servlet&#x2F;embedded-crowd&#x2F;directories&#x2F;list）<br>&emsp;&emsp;同时，需要去到 Jira 后台修改 “后台 -&gt; 用户管理 -&gt; Jira用户服务器” 中的 IP 地址列表。（URL: jira地址&#x2F;secure&#x2F;admin&#x2F;ConfigureCrowdServer.jspa）  </p>
<h4 id="重置管理员密码"><a href="#重置管理员密码" class="headerlink" title="重置管理员密码"></a>重置管理员密码</h4><p>&emsp;&emsp;参考官方文档： <a href="https://confluence.atlassian.com/conf64/restore-passwords-to-recover-admin-user-rights-936511358.html">Restore Passwords To Recover Admin User Rights</a><br>&emsp;&emsp;登陆数据库后执行：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查看当前存在的管理员账号，以及激活状态</span><br><span class="line"><span class="keyword">SELECT</span> u.id, u.user_name, u.active <span class="keyword">FROM</span> cwd_user u</span><br><span class="line"><span class="keyword">JOIN</span> cwd_membership m <span class="keyword">ON</span> u.id<span class="operator">=</span>m.child_user_id JION cwd_group g <span class="keyword">ON</span> m.parent_id<span class="operator">=</span>g.id <span class="keyword">JOIN</span> cwd_directory d <span class="keyword">ON</span> d.id<span class="operator">=</span>g.directory_id</span><br><span class="line"><span class="keyword">WHERE</span> g.group_name <span class="operator">=</span>  <span class="string">&#x27;confluence-administrators&#x27;</span> <span class="keyword">AND</span> d.directory_name<span class="operator">=</span> <span class="string">&#x27;Confluence Internal Directory&#x27;</span> ;</span><br><span class="line"></span><br><span class="line"># 将 admin 用户设为活跃状态</span><br><span class="line"><span class="keyword">UPDATE</span> cwd_user</span><br><span class="line"><span class="keyword">SET</span> active <span class="operator">=</span> <span class="string">&#x27;T&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> user_name <span class="operator">=</span><span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 更新 admin 用户的密码为 admin</span><br><span class="line"><span class="keyword">UPDATE</span> cwd_user <span class="keyword">SET</span> credential <span class="operator">=</span></span><br><span class="line"><span class="string">&#x27;x61Ey612Kl2gpFL56FT9weDnpSo4AV8j8+qx2AuTHdRyY036xxzTTrw10Wq3+4qQyB+XURPWx1ONxp3Y3pB37A==&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1212121</span>;</span><br></pre></td></tr></table></figure>

<h3 id="启用HTTPS-1"><a href="#启用HTTPS-1" class="headerlink" title="启用HTTPS"></a>启用HTTPS</h3><p>&emsp;&emsp;需要修改的配置文件路径为 <code>/opt/atlassian/confluence/conf/server.xml</code>:  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8090&quot;</span> <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span> <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">maxThreads</span>=<span class="string">&quot;48&quot;</span> <span class="attr">minSpareThreads</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">enableLookups</span>=<span class="string">&quot;false&quot;</span> <span class="attr">acceptCount</span>=<span class="string">&quot;10&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;0&quot;</span> <span class="attr">URIEncoding</span>=<span class="string">&quot;UTF-8&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">protocol</span>=<span class="string">&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">proxyName</span>=<span class="string">&quot;www.iots.vip&quot;</span> <span class="attr">proxyPort</span>=<span class="string">&quot;443&quot;</span> <span class="attr">scheme</span>=<span class="string">&quot;https&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>其他配置同 Jira。  </p>
]]></content>
      <tags>
        <tag>折腾</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下crontab的使用与注意事项</title>
    <url>//post/linux-crontab.html</url>
    <content><![CDATA[<p>　　crontab是一个用于设置周期性被执行的指令。其守护进程为crond.  crontab分为两种配置模式，一种为用户级的crontab，一种为系统级的crontab，这里我们分开来谈。  <span id="more"></span></p>
<h2 id="用户级crontab"><a href="#用户级crontab" class="headerlink" title="用户级crontab"></a>用户级crontab</h2><p>　　用户使用新建循环型工作调度时，使用的crontab命令，crontab -e所有用户都可以使用，普通用户也只能为自己设置计划任务。然后自动写入&#x2F;var&#x2F;spool&#x2F;cron&#x2F;usename      </p>
<h3 id="用户控制文件"><a href="#用户控制文件" class="headerlink" title="用户控制文件"></a>用户控制文件</h3><p> <code>/etc/cron.allow</code> ：<br>将可以使用crontab的用户写入，仅该文件内的用户可以使用crontab，相当于白名单<br> <code>/etc/cron.deny</code> ：<br>将禁止使用crontab的用户写入，仅该文件内的用户禁止使用crontab，相当于黑名单<br>其中&#x2F;etc&#x2F;cron.allow优先级大于&#x2F;etc&#x2F;cron.deny，为避免混淆，建议二者仅使用一个。  </p>
<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">crontab [-u usename] [-l|-e|-r] </span><br><span class="line">参数：  </span><br><span class="line"><span class="deletion">-u：只有root才能进行这个任务，也即帮其他用户新建/删除crontab工作调度  </span></span><br><span class="line"><span class="deletion">-e: 调用vi编辑crontab的工作内容  </span></span><br><span class="line"><span class="deletion">-l: 列出crontab的工作内容  </span></span><br><span class="line"><span class="deletion">-r: 删除所有crontab的工作内容。</span></span><br></pre></td></tr></table></figure>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># .---------------- 分钟 (0 - 59) </span></span><br><span class="line"><span class="meta"># |  .------------- 小时 (0 - 23)</span></span><br><span class="line"><span class="meta"># |  |  .---------- 日期 (1 - 31)</span></span><br><span class="line"><span class="meta"># |  |  |  .------- 月份 (1 - 12) OR jan,feb,mar,apr ...</span></span><br><span class="line"><span class="meta"># |  |  |  |  .---- 周几 (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span></span><br><span class="line"><span class="meta"># |  |  |  |  |</span></span><br><span class="line"><span class="meta"># *  *  *  *  *  命令</span></span><br></pre></td></tr></table></figure>
<p>　　语法与系统级crontab很相似，不同点在于此处不需要指定执行用户，而系统级crontab(&#x2F;etc&#x2F;crontab)中需要。<br>举例如下：   </p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">*<span class="string">/10</span> * * * *  <span class="string">/home/test.sh</span>     <span class="comment">#每隔10分钟就以当前用户执行一次/home/test.sh脚本</span></span><br><span class="line">0 2 * * * <span class="string">/home/test.sh</span>         <span class="comment">#每天2点  </span></span><br><span class="line">0 5,17 * * * <span class="string">/home/test.sh</span>      <span class="comment">#每天5点、17点</span></span><br><span class="line">0 17 * * sun  <span class="string">/home/test.sh</span>     <span class="comment">#每周日17点</span></span><br><span class="line">0 4,17 * * sun,mon <span class="string">/home/test.sh</span><span class="comment">#每周一、周日</span></span><br><span class="line">@reboot <span class="string">/home/test.sh</span>           <span class="comment">#系统重启时</span></span><br></pre></td></tr></table></figure>
<p>　　这里推荐一个在线小工具：<a href="http://cron.qqe2.com/">在线生成cron表达式</a>  </p>
<h2 id="系统级crontab"><a href="#系统级crontab" class="headerlink" title="系统级crontab"></a>系统级crontab</h2><p>　　系统级crontab一般用于系统的例行性任务，这种方法更加方便与直接直接给其他用户设置计划任务，而且还可以指定执行shell等。配置文件为&#x2F;etc&#x2F;crontab，该文件仅root用户能够编辑。   </p>
<h3 id="编辑-etc-crontab"><a href="#编辑-etc-crontab" class="headerlink" title="编辑&#x2F;etc&#x2F;crontab"></a>编辑&#x2F;etc&#x2F;crontab</h3><p>默认内容如下：  </p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">SHELL</span>=<span class="regexp">/bin/bash</span>   这里是指定使用哪种shell接口  </span><br><span class="line"><span class="variable constant_">PATH</span>=<span class="regexp">/sbin:/bin</span><span class="symbol">:/usr/sbin</span><span class="symbol">:/usr/bin</span>  这里指定文件查找路径  </span><br><span class="line"><span class="variable constant_">MAILTO</span>=root                         如果有额外的<span class="variable constant_">STDOUT</span>，以email将数据送给谁，可以指定系统用户，也可以指定email地址，如a<span class="variable">@qq</span>.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># For details see man 4 crontabs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Example of job definition:</span></span><br><span class="line"><span class="comment"># .---------------- 分钟 (0 - 59) </span></span><br><span class="line"><span class="comment"># |  .------------- 小时 (0 - 23)</span></span><br><span class="line"><span class="comment"># |  |  .---------- 日期 (1 - 31)</span></span><br><span class="line"><span class="comment"># |  |  |  .------- 月份 (1 - 12) OR jan,feb,mar,apr ...</span></span><br><span class="line"><span class="comment"># |  |  |  |  .---- 周几 (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span></span><br><span class="line"><span class="comment"># |  |  |  |  |</span></span><br><span class="line"><span class="comment"># *  *  *  *  * 用户名  命令</span></span><br></pre></td></tr></table></figure>
<p>即：<br>分 时 日 月 周 执行用户 任务命令<br>　　比如我要添加一个计划任务，每隔10分钟就以root身份执行一次&#x2F;home&#x2F;test.sh脚本，则在后面添加:  </p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">*<span class="string">/10</span> * * * * root <span class="string">/home/test.sh</span></span><br></pre></td></tr></table></figure>
<p>　　这里注意，不要漏掉执行者root(用户级的crontab中不需要指定执行者)，否则会在&#x2F;var&#x2F;log&#x2F;cron日志中出现”ERROR (getpwnam() failed)”错误,计划任务无法正常运行。  </p>
<h3 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h3><blockquote>
<p> 一般来说Linux下的crontab会自动帮我们每分钟重新读取一次 <code>/etc/crontab</code> 的例行工作事项，但是出于某些原因或者是其他的Unix系统中，由于crontab是读到内存当中的，所以栽修改完 <code>/etc/crontab</code> 之后，可能并不会马上执行，这时候需要重启crontab服务。  </p>
</blockquote>
<p>这里以CentOS为例：  </p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="keyword">service </span><span class="title class_">crond</span> start    <span class="comment">//启动服务  </span></span><br><span class="line"><span class="keyword">service </span><span class="title class_">crond</span> stop     <span class="comment">//关闭服务  </span></span><br><span class="line"><span class="keyword">service </span><span class="title class_">crond</span> restart  <span class="comment">//重启服务  </span></span><br><span class="line"><span class="keyword">service </span><span class="title class_">crond</span> reload   <span class="comment">//重载配置  </span></span><br><span class="line"><span class="keyword">service </span><span class="title class_">crond</span> status   <span class="comment">//服务状态</span></span><br></pre></td></tr></table></figure>
<p>如果是CentOS 7则：  </p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">systemctl restart crond<span class="selector-class">.service</span> <span class="comment">//重启服务  </span></span><br><span class="line">systemctl start crond<span class="selector-class">.service</span>   <span class="comment">//启动服务  </span></span><br><span class="line">systemctl stop crond<span class="selector-class">.service</span>    <span class="comment">//停止服务  </span></span><br><span class="line">systemctl reload crond<span class="selector-class">.service</span>  <span class="comment">//重载配置  </span></span><br><span class="line">systemctl status crond<span class="selector-class">.service</span>  <span class="comment">//服务状态  </span></span><br></pre></td></tr></table></figure>
<h2 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h2><h3 id="取消不需要的输出"><a href="#取消不需要的输出" class="headerlink" title="取消不需要的输出"></a>取消不需要的输出</h3><p>　　当执行结果或者执行的选项中有输出的数据时，该数据会通过mail发送给MAILTO指定的账号，若某一个调度一直出错，同时mail服务出现问题（事实上我根本就没开这个服务），将会产生大量的文件于 <code>/var/spool/clientmqueue/</code> ，所以最好是将crontab里面的命令后面加上&gt; &#x2F;dev&#x2F;null 2&gt;&amp;1  </p>
<blockquote>
</blockquote>
<p>2&gt;：重定向错误。<br>2&gt;&amp;1：把错误重定向到输出要送到的地方。即把上述命令的执行结果重定向到 <code>/dev/null</code> ，即抛弃，同时，把产生的错误也抛弃。  </p>
<h3 id="检查日志"><a href="#检查日志" class="headerlink" title="检查日志"></a>检查日志</h3><p>日志保存在 <code>/var/log/cron</code> 中  </p>
<h3 id="语法区别"><a href="#语法区别" class="headerlink" title="语法区别"></a>语法区别</h3><ul>
<li>crontab -e命令会检查语法，而vim编辑 <code>/etc/crontab</code> 则不会，这里注意的是，crontab -e不需要写执行者用户名，而 <code>/etc/crontab</code> 需要指定。  </li>
<li>执行路径必须使用绝对路径，否则可能无法正常执行。  </li>
<li>周与日、月不能共存，即你可以分别以周或者是日、月为单位进行循环，但不可指定“几月几号且为星期几”的模式工作。</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>鸟哥的Linux私房菜</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux后台运行进程</title>
    <url>//post/linux-run-in-background.html</url>
    <content><![CDATA[<p>　　有时候我们需要将一个进程丢到后台运行，甚至需要在我们退出终端后还能继续运行。本文将几种实现方式与区别整理了一下。<span id="more"></span>  </p>
<h3 id="nohup"><a href="#nohup" class="headerlink" title="nohup"></a>nohup</h3><p>　　<code>nohup</code> 的作用是 “使程序运行时不挂起，不向 tty 输出信息” ，比如：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup ping www.iots.vip  </span><br></pre></td></tr></table></figure>
<p>这样的话，屏幕不会显示 <code>ping</code> 的运行输出，而只是提示 <code>nohup: ignoring input and appending output to ‘nohup.out’</code> ,这个时候，在当前目录下会生成一个 <code>nohup.out</code> 里面内容即为 <code>ping</code> 的输出内容。我们可以指定输出的文件，如: </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup ping www.iots.vip &gt; ping.mesg  </span><br></pre></td></tr></table></figure>
<p>那么，回到文题，怎样实现将进程丢到后台还能继续运行呢？在上面的例子中也就是让系统在后台一直 <code>ping www.iots.vip</code>，我们可以使用 <code>&amp;</code> 来实现将进程丢到后台:  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup ping www.iots.vip &gt; ping.msg 2&gt;&amp;1 &amp;  </span><br></pre></td></tr></table></figure>
<p>这里实现的是将 <code>ping</code> 的正确输出信息输出至 ping.msg 文件，而屏幕标准输出只输出错误信息，同时将进程丢进后台。<br>2&gt;&amp;1 解释：</p>
<p>将标准错误 2 重定向到标准输出 &amp;1 ，标准输出 &amp;1 再被重定向输入到 runoob.log 文档中。</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">0 </span>– stdin (standard <span class="keyword">input</span>，标准输入)</span><br><span class="line"><span class="symbol">1 </span>– stdout (standard output，标准输出)</span><br><span class="line"><span class="symbol">2 </span>– stderr (standard <span class="keyword">error</span>，标准错误输出)</span><br></pre></td></tr></table></figure>

<h3 id="Ctrl-Z"><a href="#Ctrl-Z" class="headerlink" title="Ctrl + Z"></a>Ctrl + Z</h3><p>　　Ctrl + Z 与上面的不同，Ctrl + Z 会将当前进程挂起丢入后台，也就是暂停至后台，不会继续运行。挂起的进程通过 <code>jobs</code> 可以看到:  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping www.iots.vip  # 按下 Ctrl + Z  </span><br><span class="line">^Z</span><br><span class="line">[1]+  Stopped                 ping www.iots.vip  </span><br></pre></td></tr></table></figure>
<p>执行 <code>jobs</code> 可以看到:  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jobs  </span><br><span class="line">[1]+  Stopped                 ping www.iots.vip</span><br></pre></td></tr></table></figure>
<p>使用 <code>bg %任务号</code> 可以在激活挂起的任务让其在后台运行:  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bg %1</span><br></pre></td></tr></table></figure>
<p>这里将会不停的输出 ping 的回复，必须要退出终端才能终止，在所运行的程序有标准输出的时候不推荐这样使用。<br>使用 <code>fg %任务号</code> 可以在激活挂起的任务让其在前台运行。  </p>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>值得注意的是，Ctrl + Z 后使用 <code>bg</code> 激活的后台运行进程以及使用 <code>nohup &amp;</code> 在后台运行的进程，在重登终端的时候 <code>jobs</code> 均不会显示，只能通过 <code>ps -ef</code> 看到，要停止运行也只能使用 <code>kill</code> 来停止。   </p>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充:"></a>补充:</h3><h4 id="screen"><a href="#screen" class="headerlink" title="screen"></a>screen</h4><p><del>2019年8月13日</del><br>感谢 @Bill 补充，<code>screen</code> 也是一个很棒的工具，不过需要单独安装：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install screen  </span><br></pre></td></tr></table></figure>
<p>　　通过执行 <code>screen</code> 来新建一个会话，使用 Ctrl + A,D 离开该会话，会话将在后台继续运行，之后 <code>screen -ls</code> 可以查看会话列表。 使用 <code>screen -r pid或tty或host</code> 恢复会话，使用 <code>exit</code> 可以退出会话，会话不会再运行。<br>　　<code>screen</code> 相比上面的方式更加方便，能做的事情也更多，</p>
<h4 id="常用screen参数"><a href="#常用screen参数" class="headerlink" title="常用screen参数"></a>常用screen参数</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">screen -S yourname # 新建一个叫 yourname 的 session</span><br><span class="line">screen -ls # 列出当前所有的 session</span><br><span class="line">screen -r yourname # 回到 yourname 这个 session</span><br><span class="line">screen -d yourname # 远程 detach 某个 session</span><br><span class="line">screen -d -r yourname # 结束当前 session 并回到 yourname 这个session</span><br></pre></td></tr></table></figure>
<h5 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h5><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">Ctrl + <span class="keyword">a</span> d   暂时离开screen会话,此时在screen session里，每个window内运行的<span class="built_in">process</span>(无论是前台/后台)都在继续执行，即使logout也不影响。</span><br><span class="line">Ctrl + <span class="keyword">a</span> ?   显示所有键绑定信息</span><br><span class="line">Ctrl + <span class="keyword">a</span> w   显示所有窗口列表</span><br><span class="line">Ctrl + <span class="keyword">a</span> C-<span class="keyword">a</span> 切换到之前显示的窗口</span><br><span class="line">Ctrl + <span class="keyword">a</span> c   创建一个新的运行<span class="built_in">shell</span>的窗口并切换到该窗口</span><br><span class="line">Ctrl + <span class="keyword">a</span> n   切换到下一个窗口</span><br><span class="line">Ctrl + <span class="keyword">a</span> p   切换到前一个窗口(与C-<span class="keyword">a</span> n相对)</span><br><span class="line">Ctrl + <span class="keyword">a</span> <span class="number">0.</span><span class="number">.9</span>    切换到窗口<span class="number">0.</span><span class="number">.9</span></span><br><span class="line">Ctrl + <span class="keyword">a</span> <span class="keyword">a</span>   发送 C-<span class="keyword">a</span>到当前窗口</span><br><span class="line">Ctrl + <span class="keyword">a</span> k   杀掉当前窗口</span><br><span class="line">Ctrl + <span class="keyword">a</span> [   进入拷贝/回滚模式</span><br></pre></td></tr></table></figure>

<h4 id="tmux"><a href="#tmux" class="headerlink" title="tmux"></a>tmux</h4><p><del>2022年5月</del>  近期开始使用 tmux 这个 screen 加强版，有兴趣的同学可以尝试一下。  </p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux故障排查之dmesg命令</title>
    <url>//post/linux-dmesg.html</url>
    <content><![CDATA[<p>　　<code>dmesg</code> 命令是用于检测和控制内核环缓冲的，可以用来输出 Linux 的开机启动信息，这些信息也可以从 <code>/var/log/dmesg</code> 中看到。这些信息对设备故障的诊断很有价值。<span id="more"></span>   </p>
<h2 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用dmesg [选项]，常用选项如下：</span>  </span><br><span class="line"></span><br><span class="line"> -C, --clear                 清除内核环形缓冲区(ring butter)</span><br><span class="line"> -c, --read-clear            读取并清除所有消息</span><br><span class="line"> -D, --console-off           禁止向终端打印消息</span><br><span class="line"> -d, --show-delta            显示打印消息之间的时间差</span><br><span class="line"> -e, --reltime               以易读格式显示本地时间和时间差</span><br><span class="line"> -E, --console-on            启用向终端打印消息</span><br><span class="line"> -F, --file &lt;文件&gt;           用 文件 代替内核日志缓冲区</span><br><span class="line"> -f, --facility &lt;列表&gt;       将输出限制为定义的设施</span><br><span class="line"> -H, --human                 易读格式输出</span><br><span class="line"> -k, --kernel                显示内核消息</span><br><span class="line"> -L, --color                 显示彩色消息</span><br><span class="line"> -l, --level &lt;列表&gt;          限制输出级别</span><br><span class="line"> -n, --console-level &lt;级别&gt;  设置打印到终端的消息级别</span><br><span class="line"> -P, --nopager               不将输出通过管道传递给分页程序</span><br><span class="line"> -r, --raw                   打印原生消息缓冲区</span><br><span class="line"> -S, --syslog                强制使用 syslog(2) 而非 /dev/kmsg</span><br><span class="line"> -s, --buffer-size &lt;大小&gt;    查询内核环形缓冲区所用的缓冲区大小</span><br><span class="line"> -T, --ctime                 显示易读的时间戳(如果您使用了</span><br><span class="line">                                SUSPEND/RESUME 则可能不准)</span><br><span class="line"> -t, --notime                不打印消息时间戳</span><br><span class="line"> -u, --userspace             显示用户空间消息</span><br><span class="line"> -w, --follow                等待新消息</span><br><span class="line"> -x, --decode                将设施和级别解码为可读的字符串</span><br><span class="line"></span><br><span class="line"> -h, --help     显示此帮助并退出</span><br><span class="line"> -V, --version  输出版本信息并退出</span><br></pre></td></tr></table></figure>

<h2 id="常见用例"><a href="#常见用例" class="headerlink" title="常见用例"></a>常见用例</h2><h3 id="查看所有内核加载到的硬盘："><a href="#查看所有内核加载到的硬盘：" class="headerlink" title="查看所有内核加载到的硬盘："></a>查看所有内核加载到的硬盘：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dmesg -L | grep sda  </span><br></pre></td></tr></table></figure>
<p>通常来说  sda 表示第一块 SATA 硬盘，sdb 表示第二块 SATA 硬盘；hda 表示第一块 IDE 硬盘，hdb 表示第二块 IDE 硬盘；部分 VPS 使用的是虚拟磁盘，为 vda、vdb 等。<br>查看当前有哪些磁盘，可以使用：   </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fdisk -l</span><br></pre></td></tr></table></figure>
<h3 id="查看-usb、dma、tty、memory等信息"><a href="#查看-usb、dma、tty、memory等信息" class="headerlink" title="查看 usb、dma、tty、memory等信息"></a>查看 usb、dma、tty、memory等信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dmesg -L | grep -i usb  <span class="comment"># grep -i 中的 i 表示忽略大小写 </span></span><br><span class="line">dmesg -L | grep -i <span class="built_in">tty</span>  </span><br><span class="line">dmesg -L | grep -i memory </span><br><span class="line">dmesg -L | grep -i eth  <span class="comment"># 查看网卡相关信息  </span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux中MySQL、FTP修改密码方法</title>
    <url>//post/linux-changepasswd-mysql-ftp.html</url>
    <content><![CDATA[<p>　　通常一键包安装的环境都会设置默认密码，我们需要修改默认密码来保证安全。<span id="more"></span>   </p>
<h2 id="MySQL修改密码"><a href="#MySQL修改密码" class="headerlink" title="MySQL修改密码"></a>MySQL修改密码</h2><hr>
<ul>
<li><p>用SET PASSWORD命令：  </p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">mysql -u root</span></span><br></pre></td></tr></table></figure>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">SET</span> <span class="keyword">PASSWORD</span> <span class="keyword">FOR</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> = <span class="keyword">PASSWORD</span>(<span class="string">&#x27;newpass&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>用mysqladmin</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">mysqladmin</span> -u root password <span class="string">&quot;newpass&quot;</span></span><br></pre></td></tr></table></figure>
<p>如果root已经设置过密码，采用如下方法:</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">mysqladmin</span> -u root password oldpass <span class="string">&quot;newpass&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>用UPDATE直接编辑user表  </p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">mysql -u root</span></span><br></pre></td></tr></table></figure>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">mysql&gt; use mysql<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">UPDATE</span> <span class="keyword">user</span> <span class="keyword">SET</span> <span class="keyword">Password</span> = <span class="keyword">PASSWORD</span>(<span class="string">&#x27;newpass&#x27;</span>) <span class="keyword">WHERE</span> <span class="keyword">user</span> = <span class="string">&#x27;root&#x27;</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">mysql&gt; FLUSH PRIVILEGES<span class="comment">;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>在丢失root密码的时候，可以:  </p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">mysqld_safe <span class="comment">--skip-grant-tables&amp;  </span></span><br><span class="line">mysql -u root mysql  </span><br><span class="line">mysql&gt; <span class="keyword">UPDATE</span> <span class="keyword">user</span> <span class="keyword">SET</span> <span class="keyword">password</span>=<span class="keyword">PASSWORD</span>(&quot;new password&quot;) <span class="keyword">WHERE</span> <span class="keyword">user</span>=<span class="string">&#x27;root&#x27;</span>;  </span><br><span class="line">mysql&gt; FLUSH <span class="keyword">PRIVILEGES</span>;  	</span><br></pre></td></tr></table></figure>

<ul>
<li>直接修改：<br><img data-src="https://static.iots.vip/2016/09/201609167408_2399.png" alt="MySQL"><br> 注意：-p 和旧密码之间没有空格，password 和新密码之间有空格。</li>
</ul>
<h2 id="FTP修改密码"><a href="#FTP修改密码" class="headerlink" title="FTP修改密码"></a>FTP修改密码</h2><hr>
<ul>
<li>用 root 用户登录系统，然后执行下面命令：<br><img data-src="https://static.iots.vip/2016/09/201609165276_6865.png" alt="执行"><br>然后输入新FTP密码</li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux踢出当前登录的指定终端</title>
    <url>//post/linux-kill-other-terminal.html</url>
    <content><![CDATA[<p>　　Linux 下通常使用 <code>pkill</code> 掉终端来踢掉用户。 <span id="more"></span>  </p>
<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>查看当前登录的所有终端:  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# w  </span><br><span class="line">00:46:02 up 1 day, 23:21,  4 users,  load average: 0.01, 0.03, 0.05</span><br><span class="line">USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT</span><br><span class="line">root     tty1                      237月19 20:02   9.72s  9.72s -bash</span><br><span class="line">root     pts/0    192.168.31.1     15:43    6:51m  0.06s  0.06s -bash</span><br><span class="line">root     pts/1    192.168.31.1     00:43    2.00s  0.03s  0.01s w</span><br><span class="line">root     pts/2    192.168.31.1     00:26    8:42   0.03s  0.03s -bash</span><br><span class="line">[root@localhost ~]#</span><br></pre></td></tr></table></figure>
<p>查看当前使用的 TTY 名:  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# who am i </span><br><span class="line">root     pts/1        2019-08-14 00:43 (192.168.31.1)</span><br><span class="line">[root@localhost ~]#     </span><br></pre></td></tr></table></figure>
<h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>这里想踢掉 pts&#x2F;2，则可以直接执行:   </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pkill -kill -t pts/2  </span><br></pre></td></tr></table></figure>
<p>再次使用 <code>w</code> 查看该 TTY 是否已经被踢掉，如果没有则可以添加 -9 参数:  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pkill -9 -t pts/2  </span><br></pre></td></tr></table></figure>
<p>强制踢掉。</p>
<h2 id="重新连接到指定-PTS"><a href="#重新连接到指定-PTS" class="headerlink" title="重新连接到指定 PTS"></a>重新连接到指定 PTS</h2><p>ssh 连接退出后，经常出现会话还存在的情况，此时使用 <code>w</code> 命令依旧可以看到存在 pts 未退出。  </p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">apt-<span class="keyword">get</span> install reptyr</span><br><span class="line"></span><br><span class="line">reptyr -T [PID] <span class="comment"># 即可恢复会话</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Navicat激活方法及补丁下载</title>
    <url>//post/navicat-crack.html</url>
    <content><![CDATA[<p>　　Navicat是一个非常不错的数据库管理软件。本文记录了 <code>Navicat Premium</code> 激活方法及补丁的下载地址。<span id="more"></span>  </p>
<h2 id="旧版"><a href="#旧版" class="headerlink" title="旧版"></a>旧版</h2><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>　　清理残留(如果从未安装过Navicat家的产品的童鞋可以直接跳过)，正常卸载后的Navicat会在注册表、用户文件夹中留下注册的残留，我们需要将这些残留清理掉。  </p>
<h4 id="清理注册表"><a href="#清理注册表" class="headerlink" title="清理注册表"></a>清理注册表</h4><p>　　使用 win+R 打开运行，输入 <code>regedit</code> 打开注册表编辑器，点击 编辑-查找，输入 <code>navicat</code> 查找下一个，将光标所定位的注册表右键删除。这里注意，不止残留一条注册表，需要重复多次，直到提示 <code>注册表搜索完毕</code> 即可。<br><img data-src="https://static.iots.vip/%E6%B8%85%E7%90%86navicat%E6%B3%A8%E5%86%8C%E8%A1%A8%E6%AE%8B%E7%95%99.png" alt="清理navicat注册表残留">  </p>
<h4 id="清理用户文件夹"><a href="#清理用户文件夹" class="headerlink" title="清理用户文件夹"></a>清理用户文件夹</h4><p>　　一般在 <code>C:\Users\Alliot(用户名)\Documents\Navicat</code> 下删除即可。(有 everything 软件的童鞋，直接搜索 <code>navicat</code> 删除即可)  </p>
<h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>补丁与安装包  链接：<a href="https://pan.baidu.com/s/1cIBI5dojUmdpNhCC3lyeDw">https://pan.baidu.com/s/1cIBI5dojUmdpNhCC3lyeDw</a> 密码：ettf 解压密码: <a href="http://www.iots.vip/">www.iots.vip</a><br>　　以管理员身份运行 <code>navicat112_premium_cs_x64</code> (其他安装包也一样)，安装完成后先别打开 Navicat，断网，右键桌面快捷方式，打开文件所在的位置，将 <code>Navicat11.exe</code> 复制到该路径下(12版本请复制 <code>Navicat12.exe</code>)<br>　　右键以管理员身份运行，点击<code>补丁</code>选择安装路径下的 <code>navicat.exe</code> 确定，点击<code>生成</code>将注册码复制，右键桌面上的 <code>Navicat Premium</code> 以管理员身份运行，这时候会提示注册，点击注册，粘贴刚才复制的注册码，切换到注册机，点击注册机内的 <code>激活</code>，将 <code>license_file</code> 文件保存到安装目录下，切换回 Navicat 的注册界面，按住 <code>ctrl</code>+<code>shit</code> 点击激活，选择刚才保存的 <code>license_file</code> 即可完成软件激活。  </p>
<h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>　　关闭 Navicat 的自动更新：工具-选项-激活和更新程序，取消勾选即可。  </p>
<p><del>2020年11月17日10:01:13</del> 更新 <code>Navicat Premium 15</code> 版本激活方法：  </p>
<h2 id="新版"><a href="#新版" class="headerlink" title="新版"></a>新版</h2><p>By: <a href="https://github.com/DoubleLabyrinth">@doublelabyrinth</a>  </p>
<h3 id="第一步-1"><a href="#第一步-1" class="headerlink" title="第一步"></a>第一步</h3><p>　　从官网下载最新版本（网络环境不好的也可以直接使用压缩包里的安装包）：<a href="https://www.navicat.com.cn/products">下载链接</a> 按照提示安装好。Alliot 这里安装的路径是 <code>D:\\navicat</code> 这里需要记住这个路径。  </p>
<h3 id="第二步-1"><a href="#第二步-1" class="headerlink" title="第二步"></a>第二步</h3><p>　　根据自己的系统版本选择对应的破解补丁，Alliot 是 64 位，选择 <code>navicat-keygen-for-x64.zip</code> 并解压，记录好解压的路径，Alliot 这里是解压到 <code>D:\\navicat-keygen</code>。<br>　　打开 <code>cmd</code>，进入到 <code>D:\\navicat-keygen</code> ：  </p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="function">D:\</span></span><br><span class="line"><span class="function"><span class="title">cd</span> <span class="title">navicat</span>-<span class="title">keygen</span>  </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"># 这里替换成你安装的路径，两次回车  </span></span><br><span class="line"><span class="function"><span class="title">navicat</span>-<span class="title">patcher.exe</span> &quot;<span class="title">D</span>:\<span class="title">navicat</span>&quot;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"># 这里回车后选择自己的版本， <span class="title">name</span> <span class="title">organization</span> 随意填写</span></span><br><span class="line"><span class="function"># 生成的 <span class="title">Serial</span> <span class="title">number</span> 复制下来</span></span><br><span class="line"><span class="function"><span class="title">navicat</span>-<span class="title">keygen.exe</span> -<span class="title">text</span> .\<span class="title">RegPrivateKey.pem</span>  </span></span><br></pre></td></tr></table></figure>
<p>不要关闭 <code>cmd</code> 窗口 ！  </p>
<h3 id="第三步-1"><a href="#第三步-1" class="headerlink" title="第三步"></a>第三步</h3><p>　　断网后，打开 <code>Navicat</code> 点击注册，输入前面复制的 <code>Serial number</code> 点击 “激活” 再点击 ”手动激活“，复制 ”请求码“，粘贴到前面的 <code>cmd</code> 窗口，两次回车后会生成 <code>Activation Code</code> 填入激活即可。  </p>
<p>　　
　　</p>
]]></content>
      <tags>
        <tag>折腾</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux文件类型分类</title>
    <url>//post/linux-files-types.html</url>
    <content><![CDATA[<p> Linux文件类型常见的有：普通文件、目录、字符设备文件、块设备文件、符号链接文件等；本文来自@<a href="http://www.cnblogs.com/acpp/archive/2009/12/05/1617547.html">诗小蓝</a>  本人进行了一些增删与整理,作笔记用。<span id="more"></span><br><img data-src="https://static.iots.vip/2016/11/201611132719_3009.png"></p>
<h2 id="普通文件"><a href="#普通文件" class="headerlink" title="普通文件"></a>普通文件</h2><p>用 ls -lh 来查看某个文件的属性，可以看到有类似 -rw-r–r– ，值得注意的是第一个符号是 - ，这样的文件在Linux中就是普通文件。这些文件一般是用一些相关的应用程序创建，比如图像工具、文档工具、归档工具… …. 或 cp工具等。这类文件的删除方式是用rm 命令；  </p>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>目录在Linux是一个比较特殊的文件。注意它的第一个字符是d。创建目录的命令可以用 mkdir 命令，或cp命令，cp可以把一个目录复制为另一个目录。删除用rm 或rmdir命令。  </p>
<h2 id="字符设备或块设备文件"><a href="#字符设备或块设备文件" class="headerlink" title="字符设备或块设备文件"></a>字符设备或块设备文件</h2><p>如进入&#x2F;dev目录，列一下文件，会看到类似如下的:  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ls -la /dev/tty</span></span><br><span class="line">crw-rw-rw- 1 root <span class="built_in">tty</span> 5, 0 04-19 08:29 /dev/tty</span><br><span class="line">[root@localhost ~]<span class="comment"># ls -la /dev/hda1</span></span><br><span class="line">brw-r----- 1 root disk 3, 1 2006-04-19 /dev/hda1</span><br></pre></td></tr></table></figure>
<p>我们看到&#x2F;dev&#x2F;tty的属性是 crw-rw-rw- ，注意前面第一个字符是 c ，这表示字符设备文件。比如猫等串口设备。<br>我们看到 &#x2F;dev&#x2F;hda1 的属性是 brw-r—– ，注意前面的第一个字符是b，这表示块设备，比如硬盘，光驱等设备；<br>这个种类的文件，是用mknode来创建，用rm来删除。目前在最新的Linux发行版本中，我们一般不用自己来创建设备文件。因为这些文件是和内核相关联的。  </p>
<h2 id="套接口文件"><a href="#套接口文件" class="headerlink" title="套接口文件"></a>套接口文件</h2><p>当我们启动MySQL服务器时，会产生一个mysql.sock的文件。  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ls -lh /var/lib/mysql/mysql.sock</span></span><br><span class="line">srwxrwxrwx 1 mysql mysql 0 04-19 11:12 /var/lib/mysql/mysql.sock</span><br></pre></td></tr></table></figure>
<p>注意这个文件的属性的第一个字符是s，是socket的缩写。  </p>
<h2 id="符号链接文件"><a href="#符号链接文件" class="headerlink" title="符号链接文件"></a>符号链接文件</h2><p> 查看文件属性时，会看到有类似 lrwxrwxrwx,注意第一个字符是l，这类文件是链接文件。是通过ln -s 源文件名 新文件名。lrwxrwxrwx 1 root root 11 04-19 11:18 setup.log -&gt; install.log，表示setup.log是install.log的软链接文件。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx下给站点设置301跳转</title>
    <url>//post/nginx-301-jump.html</url>
    <content><![CDATA[<p>301重定向通常是SEO中的重要的一步，这里记录了Nginx下设置301的过程。<span id="more"></span></p>
<blockquote>
<p>页面永久性移走（301重定向）是一种非常重要的“自动转向”技术。网址重定向最为可行的一种办法。当用户或搜索引擎向网站服务器发出浏览请求时，服务器返回的HTTP数据流中头信息(header)中的状态码的一种，表示本网页永久性转移到另一个地址。  </p>
</blockquote>
<h2 id="方法如下："><a href="#方法如下：" class="headerlink" title="方法如下："></a>方法如下：</h2><ol>
<li>网站设置，设置主域名为<a href="http://www.iots.vip(zblog程序的需要,其他程序按需设置)/">www.iots.vip（zblog程序的需要，其他程序按需设置）</a></li>
<li>进入nginx&#x2F;conf&#x2F;vhost&#x2F;   编辑***.conf(你的站点配置文件) 在配置文件最后面加上如下代码： <figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span> iots.vip;</span><br><span class="line"><span class="attribute">return</span> <span class="number">301</span> http://www.iots.vip<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
如果是想让http强制跳转到https，把里面的http换成https就行。  <figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line"><span class="attribute">server_name</span> www.iots.vip;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span> www.iots.vip;</span><br><span class="line"><span class="attribute">return</span> <span class="number">301</span> https://www.iots.vip<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>Nginx</tag>
        <tag>SEO</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 主从同步配置</title>
    <url>//post/mysql-master-slave-replication.html</url>
    <content><![CDATA[<p>　　MySQL 主从同步是最为常见的架构之一，通常被用来做数据的热备或读写分离（主库写，从库读）。 本文记录了 CentOS 下的 MySQL 安装方法与主从同步的配置方案 。<span id="more"></span></p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>　　master 开启 binlog 日志，将改变记录到 binlog 中，slave 每隔一段时间检测 master 的 binlog 是否有改变，如果有，则启动一个 IO 线程与主库的  dump 线程连接，将主库的 binlog 以事件的形式同步到自己的中继日志（relay log）中，之后启动 SQL 线程，从中继日志重做 binlog，解析成SQL，将变更应用到从库中，实现与主库数据的同步。  </p>
<h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><p>一个 slave 只能有一个 master<br>一个 master 可以有多个 slave（即一主多从）<br>每个库的 server-id 必须不同  </p>
<h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h2><p>注： 以 CentOS 7 为例  </p>
<h3 id="配置yum源"><a href="#配置yum源" class="headerlink" title="配置yum源"></a>配置yum源</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">wget http:<span class="operator">/</span><span class="operator">/</span>dev.mysql.com<span class="operator">/</span><span class="keyword">get</span><span class="operator">/</span>mysql57<span class="operator">-</span>community<span class="operator">-</span><span class="keyword">release</span><span class="operator">-</span>el7<span class="number">-9.</span>noarch.rpm</span><br><span class="line">yum <span class="operator">-</span>y install mysql57<span class="operator">-</span>community<span class="operator">-</span><span class="keyword">release</span><span class="operator">-</span>el7<span class="number">-9.</span>noarch.rpm </span><br></pre></td></tr></table></figure>
<h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">yum list | grep mysql-community-<span class="keyword">server</span></span><br><span class="line">yum -y install mysql-community-<span class="keyword">server</span></span><br></pre></td></tr></table></figure>


<h3 id="定义数据路径"><a href="#定义数据路径" class="headerlink" title="定义数据路径"></a>定义数据路径</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /mysqldata/datadir</span><br><span class="line"><span class="built_in">mkdir</span> -p /data/mysql</span><br><span class="line"><span class="built_in">mkdir</span> -p /var/lib/mysql/</span><br><span class="line"><span class="built_in">mkdir</span> -p /var/run/mysqld/</span><br></pre></td></tr></table></figure>

<h3 id="覆盖my-cnf"><a href="#覆盖my-cnf" class="headerlink" title="覆盖my.cnf"></a>覆盖my.cnf</h3><p>参考配置：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-set = utf8</span><br><span class="line">port    = 3306</span><br><span class="line">socket  = /var/lib/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">character_set_server=utf8</span><br><span class="line">user    = mysql</span><br><span class="line">port    = 3306</span><br><span class="line"></span><br><span class="line"># 主从同步配置（指定同步哪个库，多个库重复多行，所有库同步，则直接注释掉该配置）</span><br><span class="line">replicate-do-db  = appdb</span><br><span class="line"></span><br><span class="line"># 忽略的库</span><br><span class="line">binlog-ignore-db = mysql</span><br><span class="line">binlog-ignore-db = test</span><br><span class="line">binlog-ignore-db = information_schema</span><br><span class="line"></span><br><span class="line">socket  = /var/lib/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line"># 路径配置</span><br><span class="line">basedir = /data/mysql</span><br><span class="line">datadir = /mysqldata/datadir</span><br><span class="line">log-error=/var/log/mysqld.log</span><br><span class="line">pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line"></span><br><span class="line"># 监听本机内网IP</span><br><span class="line">bind-address=192.168.1.111</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">open_files_limit = 10240</span><br><span class="line">back_log = 600</span><br><span class="line">max_connections = 5000</span><br><span class="line">max_connect_errors = 6000</span><br><span class="line">external-locking = FALSE</span><br><span class="line">max_allowed_packet = 32M</span><br><span class="line">sort_buffer_size = 1M</span><br><span class="line">join_buffer_size = 1M</span><br><span class="line">thread_cache_size = 300</span><br><span class="line">#thread_concurrency = 8</span><br><span class="line">query_cache_size = 512M</span><br><span class="line">query_cache_limit = 2M</span><br><span class="line">query_cache_min_res_unit = 2k</span><br><span class="line">default-storage-engine = INNODB</span><br><span class="line">thread_stack = 192K</span><br><span class="line">transaction_isolation = READ-COMMITTED</span><br><span class="line">tmp_table_size = 256M</span><br><span class="line">max_heap_table_size = 256M</span><br><span class="line">long_query_time = 3</span><br><span class="line">log-slave-updates</span><br><span class="line"></span><br><span class="line"># 启用binlog(必选)</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line">binlog_cache_size = 4M</span><br><span class="line">binlog_format = MIXED</span><br><span class="line">max_binlog_cache_size = 8M</span><br><span class="line">max_binlog_size = 1G</span><br><span class="line">expire_logs_days = 30</span><br><span class="line">key_buffer_size = 256M</span><br><span class="line">read_buffer_size = 1M</span><br><span class="line">read_rnd_buffer_size = 16M</span><br><span class="line">bulk_insert_buffer_size = 64M</span><br><span class="line">myisam_sort_buffer_size = 128M</span><br><span class="line">myisam_max_sort_file_size = 1G</span><br><span class="line">myisam_repair_threads = 1</span><br><span class="line">#myisam_recover</span><br><span class="line"></span><br><span class="line">#interactive_timeout = 120</span><br><span class="line">#wait_timeout = 120</span><br><span class="line"></span><br><span class="line">skip-name-resolve</span><br><span class="line"></span><br><span class="line"># 该 id 主从库必须不同  </span><br><span class="line">server-id = 1</span><br><span class="line"></span><br><span class="line"># 自增字段相关配置，一般在主主同步架构时需要配置，避免自增 ID 冲突，其他情况可以忽略：     </span><br><span class="line"># 自增长字段每次递增的量，其默认值是1，取值范围是[1，65535]  </span><br><span class="line">auto-increment-increment = 2</span><br><span class="line"># 自增长字段的起始值，取值范围是[1, 65535]</span><br><span class="line">auto-increment-offset = 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">innodb_buffer_pool_size = 4096M</span><br><span class="line">#innodb_data_file_path = ibdata1:512M:autoextend</span><br><span class="line">innodb_flush_log_at_trx_commit = 2</span><br><span class="line">innodb_log_buffer_size = 16M</span><br><span class="line">innodb_log_file_size = 128M</span><br><span class="line">innodb_log_files_in_group = 3</span><br><span class="line">innodb_max_dirty_pages_pct = 90</span><br><span class="line">innodb_lock_wait_timeout = 120</span><br><span class="line">innodb_file_per_table = 1</span><br><span class="line"></span><br><span class="line"># 慢日志相关： </span><br><span class="line">slow_query_log = 1</span><br><span class="line">slow_query_log_file = /var/log/mysql/mysqlslow.log</span><br><span class="line"></span><br><span class="line">[mysqldump]</span><br><span class="line">quick</span><br><span class="line">max_allowed_packet = 32M</span><br></pre></td></tr></table></figure>


<h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight nsis"><table><tr><td class="code"><pre><span class="line"><span class="params">system</span>ctl enable mysqld &amp;&amp; <span class="params">system</span>ctl start mysqld</span><br></pre></td></tr></table></figure>

<h3 id="查看初始密码"><a href="#查看初始密码" class="headerlink" title="查看初始密码"></a>查看初始密码</h3><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">grep <span class="string">&quot;temporary password&quot;</span> /<span class="keyword">var</span>/<span class="built_in">log</span>/mysqld.<span class="built_in">log</span></span><br><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure>

<h3 id="基本安全设置"><a href="#基本安全设置" class="headerlink" title="基本安全设置"></a>基本安全设置</h3><p>生产环境中 MySQL 安装完成后，需要执行安全配置向导：  </p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">mysql_secure_installation</span></span><br><span class="line"><span class="comment"># 这里使用上面得到的初始密码来登陆</span></span><br></pre></td></tr></table></figure>
<p>根据此向导，将依次执行以下操作：  </p>
<ul>
<li>为 root 用户设置密码  </li>
<li>删除匿名账号  </li>
<li>取消 root 用户远程登录  </li>
<li>删除 test 库和对 test 库的访问权限  </li>
<li>刷新授权表使修改生效</li>
</ul>
<h2 id="配置主从"><a href="#配置主从" class="headerlink" title="配置主从"></a>配置主从</h2><h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3><p>master: 192.168.1.110<br>slave: 192.168.1.111  </p>
<h3 id="master配置"><a href="#master配置" class="headerlink" title="master配置"></a>master配置</h3><p>在MySQL master 执行如下操作检查</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登录到数据库</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查master状态</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">show master status\G</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个用于复制的用户</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">CREATE USER <span class="string">&#x27;copy&#x27;</span>@<span class="string">&#x27;192.168.%.%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;Aa.123456789&#x27;</span>;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">赋予权限</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">GRANT REPLICATION SLAVE ON *.* TO <span class="string">&#x27;copy&#x27;</span>@<span class="string">&#x27;192.168.%.%&#x27;</span>;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭ONLY_FULL_GROUP_BY</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash"><span class="built_in">set</span> sql_mode =<span class="string">&#x27;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&#x27;</span>;</span></span><br></pre></td></tr></table></figure>

<h3 id="slave配置"><a href="#slave配置" class="headerlink" title="slave配置"></a>slave配置</h3><p>在MySQL slave 执行如下操作  </p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改 my.cnf 文件参数中的 server-id，要求与 master 的 server-id 不同</span></span><br><span class="line"><span class="attribute">server</span>-id = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启服务后，验证上述账号是否能正常登录连通主库  </span></span><br><span class="line"><span class="attribute">mysql</span> -ucopy -p -P <span class="number">3306</span> -h<span class="number">192.168.1.110</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">mysql</span>&gt; SHOW DATABASES;</span><br></pre></td></tr></table></figure>

<h3 id="加锁并导出master数据"><a href="#加锁并导出master数据" class="headerlink" title="加锁并导出master数据"></a>加锁并导出master数据</h3><p>在MySQL master继续如下操作  </p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对主库上所有表加锁</span></span><br><span class="line">mysql&gt; FLUSH TABLES WITH <span class="keyword">READ</span> LOCK;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 记录对应值</span></span><br><span class="line">mysql&gt; SHOW <span class="keyword">MASTER</span> <span class="title">STATUS</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 新开终端，对数据库进行备份</span></span><br><span class="line">mysqldump --all-databases --<span class="literal">master</span>-data -u root -p -P <span class="number">3306</span> &gt; <span class="literal">master</span>.sql</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份完成后解锁</span></span><br><span class="line">mysql&gt; UNLOCK TABLES;</span><br></pre></td></tr></table></figure>

<h3 id="拷贝主库备份到从库中"><a href="#拷贝主库备份到从库中" class="headerlink" title="拷贝主库备份到从库中"></a>拷贝主库备份到从库中</h3><p>在MySQL slave继续如下操作：<br>将主库导出的 sql 拷贝到从库中，并让从库导入主库的 sql  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登录到数据库</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加载备份</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash"><span class="built_in">source</span> master.sql;</span></span><br></pre></td></tr></table></figure>

<h3 id="将从库与主库建立连接"><a href="#将从库与主库建立连接" class="headerlink" title="将从库与主库建立连接"></a>将从库与主库建立连接</h3><p>在 MySQL slave 继续如下操作。将从库与主库建立连接，启动同步进程:  </p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># MASTER_LOG_FILE 参数为前面主库中获取的binlog文件名</span></span><br><span class="line"><span class="comment"># MASTER_LOG_POS 参数为前面从主库获取的 Position 值，忘记了可以填 0 一般系统会自动匹配对齐</span></span><br><span class="line">mysql&gt; CHANGE MASTER <span class="keyword">TO</span></span><br><span class="line">    <span class="attribute">MASTER_HOST</span>=<span class="string">&#x27;192.168.1.110&#x27;</span>,</span><br><span class="line">    <span class="attribute">MASTER_PORT</span>=3306,</span><br><span class="line">    <span class="attribute">MASTER_USER</span>=<span class="string">&#x27;copy&#x27;</span>,</span><br><span class="line">    <span class="attribute">MASTER_PASSWORD</span>=<span class="string">&#x27;Aa.123456789&#x27;</span>,</span><br><span class="line">    <span class="attribute">MASTER_LOG_FILE</span>=<span class="string">&#x27;mysql-bin.000005&#x27;</span>,</span><br><span class="line">    <span class="attribute">MASTER_LOG_POS</span>=1074;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 启动从库复制</span></span><br><span class="line">mysql&gt; START SLAVE;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 检查主从状态</span></span><br><span class="line">mysql&gt; SHOW SLAVE STATUS\G</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 主要检查以下两个字段：</span></span><br><span class="line"><span class="comment"># Slave_IO_Running: Yes　　   # 观察IO进程是否为yes，如果为yes说明正常，如果长时间处于 &quot;Connecting&quot; 状态需检查你的从库指定的主库的链接信息是否正确；如果为NO，检查my.ini的 server-id 是否已经修改并重启了mysqld</span></span><br><span class="line"><span class="comment"># Slave_SQL_Running: Yes　    # 观察SQL进程是否为yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Seconds_Behind_Master: 0    # 该参数表示从库和主库有多少秒的延迟，咱们可以理解为再过多少秒数据和主库保持一致，如果为 0 表示当前从库和主库的数据是一致的，如果该数较大，需考虑它的合理性。需要注意下该参数的值。</span></span><br></pre></td></tr></table></figure>

<h3 id="验证主从同步"><a href="#验证主从同步" class="headerlink" title="验证主从同步"></a>验证主从同步</h3><p>在 master 创建数据：  </p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"># 登录到 master 数据库</span><br><span class="line">mysql -uroot -p</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 新建一个测试复制的数据库</span><br><span class="line">mysql&gt; <span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> test_copy <span class="keyword">DEFAULT</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> = utf8mb4;</span><br><span class="line"></span><br><span class="line"># 新建数据库对应的用户（此步骤可以省略）</span><br><span class="line">mysql&gt; <span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> test_copy.* <span class="keyword">TO</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;192.168.%.%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;Aa.123456789&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>;	</span><br></pre></td></tr></table></figure>

<p>登录到 slave 数据库检查数据库是否有创建:  </p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line">mysql&gt; SHOW SLAVE STATUS\G</span><br><span class="line"><span class="section">mysql&gt; SHOW DATABASES;</span></span><br><span class="line"><span class="section">+--------------------+</span></span><br><span class="line"><span class="section">| Database           |</span></span><br><span class="line"><span class="section">+--------------------+</span></span><br><span class="line">| information<span class="emphasis">_schema |</span></span><br><span class="line"><span class="emphasis">| test_copy          |</span></span><br><span class="line"><span class="emphasis">| mysql              |</span></span><br><span class="line"><span class="emphasis">| performance_</span>schema |</span><br><span class="line">| sys                |</span><br><span class="line"><span class="code">+--------------------+</span> </span><br></pre></td></tr></table></figure>
<p>如果同步正常，则表示主从同步成功，之后可以删除示例数据库与示例用户： </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">DROP</span> DATABASE test_copy;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;192.168.%.%&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h2><ul>
<li>如果发现 <code>SHOW SLAVE STATUS\\G</code> 状态正常，但从库没有正确同步数据，可以看看主库与从库的 <code>my.cnf</code> 是不是用 <code>replicate-do-db</code> 指定了只同步部分数据库。</li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx搭建WebDAV服务</title>
    <url>//post/nginx-webdav-server.html</url>
    <content><![CDATA[<p>　　迫于无法忍受现成的 NAS 系统的限制，Alliot 正在着手将最常用的一些服务剥离出来，方便迁移与定制， WebDAV 首当其冲， Alliot 在许多场景下的同步与备份都依赖它。<br>　　WebDAV 作为一种基于HTTP&#x2F;HTTPS协议的网络通信协议，预想是非常简单的，然而在具体动手的过程中还是遇到了挺多坑，Obsidian 的 Remotely-save 便是其中一个。<br>　　本文将基于 Nginx&#x2F;Tengine 手把手构建一个 WebDAV 服务。  <span id="more"></span></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>　　Obsidian 的 Remotely-Save 插件在尝试使用 Nginx + <a href="https://github.com/arut/nginx-dav-ext-module">nginx-dav-ext-module</a> 搭建的 WebDAV 服务上同步时出现了 “405 Method Not Allowed” 的错误:  </p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"> *<span class="number">26</span> <span class="built_in">mkdir</span>() <span class="string">&quot;/webdav/obsidian/note/.obsidian&quot;</span> <span class="built_in">failed</span> (<span class="number">17</span>: <span class="built_in">File</span> exists)  </span><br><span class="line">request: <span class="string">&quot;MKCOL /webdav/obsidian/note/.obsidian/ HTTP/2.0&quot;</span>  </span><br></pre></td></tr></table></figure>

<p>　　之前是直接使用的群晖 WebDAV 服务，没有遇到过这个问题， 而群晖使用的是 httpd 作为 WebDAV 服务端。  </p>
<p>经过一轮测试与研究，发现了如下 Github Issue：<br><a href="https://github.com/remotely-save/remotely-save/issues/81">https://github.com/remotely-save/remotely-save/issues/81</a>  </p>
<p>RootOfCase 在于 nginx-dav-ext-module 这个拓展模块没有正确的对 <code>.</code> 开头的文件(即隐藏文件)处理，而 Obsidian 的配置文件夹 <code>.obsidian</code> 刚好是 <code>.</code> 开头：<br><a href="https://github.com/arut/nginx-dav-ext-module/issues/41">https://github.com/arut/nginx-dav-ext-module/issues/41</a>  </p>
<p>不过这个项目已经年久失修，从评论区我们找到了一个修复这个问题的 Fork 仓库：<br><a href="https://github.com/mid1221213/nginx-dav-ext-module">https://github.com/mid1221213/nginx-dav-ext-module</a>   </p>
<h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><p>注： Alliot 本文是以 Tengine 为例来进行编译安装的，Nginx 与 Openresty 基本一致，在此文中可以同等看待。  </p>
<p>编译 Nginx：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载 nginx-dav-ext-module</span></span><br><span class="line">git clone https://github.com/mid1221213/nginx-dav-ext-module   </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载Nginx源码</span></span><br><span class="line">wget https://tengine.taobao.org/download/tengine-3.0.0.tar.gz</span><br><span class="line">tar -zxf tengine-3.0.0.tar.gz</span><br><span class="line">cd tengine-3.0.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装编译源码必要的依赖</span></span><br><span class="line">apt-get install build-essential libpcre3 libpcre3-dev zlib1g zlib1g-dev libssl-dev libgd-dev libxml2 libxml2-dev uuid-dev</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">./configure     --prefix=/var/www/html \</span><br><span class="line">                --sbin-path=/usr/sbin/nginx \</span><br><span class="line">                --conf-path=/etc/nginx/nginx.conf \</span><br><span class="line">                --user=www --group=www \ </span><br><span class="line">                --error-log-path=/var/log/nginx/error.log \</span><br><span class="line">                --http-log-path=/var/log/nginx/access.log \</span><br><span class="line">                --lock-path=/var/lock/nginx.lock \</span><br><span class="line">                --pid-path=/var/run/nginx.pid \</span><br><span class="line">                --with-http_stub_status_module  \</span><br><span class="line">                --with-http_realip_module \</span><br><span class="line">                --with-http_ssl_module \</span><br><span class="line">                --with-http_gzip_static_module \</span><br><span class="line">                --with-http_v2_module \</span><br><span class="line">                --with-pcre \</span><br><span class="line">                --with-http_dav_module \</span><br><span class="line">                --add-module=../nginx-dav-ext-module</span><br><span class="line">make -j</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<p>Nginx 配置文件如下， 可以直接追加到 <code>/etc/nginx/nginx.conf</code>：  </p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">dav_ext_lock_zone</span> zone=webdav:<span class="number">10m</span>;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl http2;</span><br><span class="line">    <span class="attribute">server_name</span> www.iots.vip;</span><br><span class="line">    <span class="attribute">access_log</span> /var/log/nginx/webdav.log;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># SSL 证书配置</span></span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/letsencrypt/live/www.iots.vip/fullchain.pem;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/letsencrypt/live/www.iots.vip/privkey.pem;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</span><br><span class="line">    <span class="attribute">ssl_session_cache</span> shared:MozSSL:<span class="number">10m</span>;</span><br><span class="line">    <span class="attribute">ssl_dhparam</span> /etc/ssl/dhparam.pem;</span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">    <span class="attribute">ssl_ciphers</span> ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;</span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">off</span>;</span><br><span class="line">    <span class="attribute">ssl_stapling</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">ssl_stapling_verify</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">error_page</span> <span class="number">497</span> https://<span class="variable">$host</span>:<span class="variable">$server_port</span><span class="variable">$request_uri</span>;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> /webdav/ &#123;</span><br><span class="line">        <span class="attribute">create_full_put_path</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">autoindex</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">autoindex_exact_size</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">autoindex_localtime</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">dav_methods</span> PUT DELETE MKCOL COPY MOVE;</span><br><span class="line">        <span class="attribute">dav_ext_methods</span> PROPFIND OPTIONS LOCK UNLOCK;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">dav_access</span> user:rw group:rw all:rw;</span><br><span class="line">        <span class="attribute">dav_ext_lock</span> zone=webdav;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">client_max_body_size</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">client_body_temp_path</span>   /tmp/nginx_client-bodies;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 用户名 密码</span></span><br><span class="line">        <span class="attribute">auth_basic</span> <span class="string">&quot;Restricted&quot;</span>;</span><br><span class="line">        <span class="attribute">auth_basic_user_file</span> /etc/nginx/htpasswd;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># webdav存储路径</span></span><br><span class="line">        <span class="attribute">alias</span> /data/sync/webdav/;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这里的用户名密码使用 <code>apache2-utils</code> 中的 <code>htpasswd</code> 来生成:  </p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">apt install -y apache2-utils</span><br><span class="line"></span><br><span class="line">htpasswd -c <span class="regexp">/etc/</span>nginx/htpasswd &lt;username&gt;</span><br><span class="line"><span class="comment"># 输入密码即可  </span></span><br></pre></td></tr></table></figure>



<p>使用 Systemd 来托管 Nginx 进程：  </p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">cat &gt; /lib/systemd/system/nginx.service &lt;&lt; EOF</span><br><span class="line">[Unit]</span><br><span class="line"><span class="attribute">Description</span>=The NGINX HTTP <span class="keyword">and</span> reverse<span class="built_in"> proxy server</span></span><br><span class="line"><span class="built_in"></span><span class="attribute">After</span>=syslog.target network-online.target remote-fs.target nss-lookup.target</span><br><span class="line"><span class="attribute">Wants</span>=network-online.target</span><br><span class="line">        </span><br><span class="line">[Service]</span><br><span class="line"><span class="attribute">Type</span>=forking</span><br><span class="line"><span class="attribute">PIDFile</span>=/var/run/nginx.pid</span><br><span class="line"><span class="attribute">ExecStartPre</span>=/usr/sbin/nginx -t</span><br><span class="line"><span class="attribute">ExecStart</span>=/usr/sbin/nginx</span><br><span class="line"><span class="attribute">ExecReload</span>=/usr/sbin/nginx -s reload</span><br><span class="line"><span class="attribute">ExecStop</span>=/bin/kill -s QUIT <span class="variable">$MAINPID</span></span><br><span class="line"><span class="attribute">PrivateTmp</span>=<span class="literal">true</span></span><br><span class="line">        </span><br><span class="line">[Install]</span><br><span class="line"><span class="attribute">WantedBy</span>=multi-user.target</span><br><span class="line">EOF </span><br><span class="line"></span><br><span class="line"><span class="comment"># 重载systemd配置，开机启动Nginx</span></span><br><span class="line">systemctl daemon-reload </span><br><span class="line">systemctl <span class="built_in">enable</span> --now nginx.service</span><br></pre></td></tr></table></figure>

<h3 id="测试同步"><a href="#测试同步" class="headerlink" title="测试同步"></a>测试同步</h3><p>Alliot 使用 Obsidian 的 Remotely-save 配置：<br><strong>服务器地址</strong>:  <a href="https://domain/webdav/obsidian">https://domain/webdav/obsidian</a> (这里注意，一定要加上obsidian子路径，因为这个插件不像其他的客户端，它不会帮你创建目录，如果不加obsidian，便会将所有的文件直接同步到webdav下)<br><strong>用户名，密码</strong><br><strong>鉴权类型</strong>： basic<br><strong>同步配置文件夹</strong>： 开启  </p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h3><p>2023-10-23： 就在今天，蚂蚁旗下的云笔记——语雀，不出意外的出现了重大故障，故障时间长达八小时（五个 9 的 SLO 直接炸了），各个技术群里一片骂声。<br>笔记作为 IT 人的核心生产力工具，我始终相信最简单的 Markdown + Local-First + 云备份，才是最优解。  </p>
]]></content>
      <tags>
        <tag>折腾</tag>
        <tag>Linux</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下利用inode号删除乱码文件</title>
    <url>//post/use-inode-delete-file.html</url>
    <content><![CDATA[<p>　　Linux 由于与 Windows 的字符编码不同等原因,经常会遇到中文文件名乱码无法显示的情况,命令行下使用通常的 <code>rm filename</code> 的方法删除文件就不可行了，我们可以通过文件的 inode number 来对文件进行操作。<span id="more"></span>  </p>
<h3 id="inode-是什么"><a href="#inode-是什么" class="headerlink" title="inode 是什么"></a>inode 是什么</h3><p>　　Wikipedia 对于 inode 的定义是：  </p>
<blockquote>
<p>inode是指在许多“类Unix文件系统”中的一种数据结构。每个inode保存了文件系统中的一个文件系统对象（包括文件、目录、设备文件、socket、管道, 等等）的元信息数据，但不包括数据内容或者文件名。</p>
</blockquote>
<p>简单来说，每个文件都有一个独一无二的 inode，我们可以通过 inode 来定位一个文件。  </p>
<h3 id="显示文件-inode-号"><a href="#显示文件-inode-号" class="headerlink" title="显示文件 inode 号"></a>显示文件 inode 号</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls -i  # ls 显示 inode number </span><br></pre></td></tr></table></figure>

<p>ps: 显示文件的详细 inode 信息可以通过 <code>stat filename</code> 来显示，于本文无关，不讨论。 </p>
<h3 id="删除乱码文件"><a href="#删除乱码文件" class="headerlink" title="删除乱码文件"></a>删除乱码文件</h3><p>这里通过 <code>find</code> 来找到该文件，执行 <code>rm</code> 操作。（这里假设上一步找到的 inode number 为 123456 ）  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find . -inum 123456 | xargs rm -f # -f 表示强制删除，如果出现 rm : missing operand 可以加上该参数  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者是:</span>  </span><br><span class="line">find . -inum 123456 -delete</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者是：</span>  </span><br><span class="line">find . -inum 123456 -exec rm -rf &#123;&#125; \;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx添加ngx-fancyindex模块</title>
    <url>//post/ngx-fancyindex.html</url>
    <content><![CDATA[<p>　　为了安全起见，Nginx默认是不允许列出整个目录的，即当访问一个不包含首页的目录时会返回 <code>403</code> 错误，当我们需要将服务器某一目录列出索引以便下载，我们可以使用 <code>autoindex</code> 来实现，但是 <code>autoindex</code> 模块生成的索引非常简陋，我们可以使用 <code>ngx-fancyindex</code> 代替 <code>autoindex</code> 实现索引目录美化。<span id="more"></span>  </p>
<p>本文为已安装 Nginx 环境下的操作。  </p>
<h2 id="安装ngx-fancyindex"><a href="#安装ngx-fancyindex" class="headerlink" title="安装ngx-fancyindex"></a>安装ngx-fancyindex</h2><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>查看已安装的 Nginx 版本与模块信息：   </p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nginx -V</span></span><br></pre></td></tr></table></figure>
<p>输出信息类似于：   </p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nginx</span> version: nginx/<span class="number">1</span>.<span class="number">8</span>.<span class="number">0</span></span><br><span class="line"><span class="attribute">built</span> by gcc <span class="number">4</span>.<span class="number">8</span>.<span class="number">5</span> <span class="number">20150623</span> (Red Hat <span class="number">4</span>.<span class="number">8</span>.<span class="number">5</span>-<span class="number">4</span>) (GCC) </span><br><span class="line"><span class="attribute">TLS</span> SNI support enabled</span><br><span class="line"><span class="attribute">configure</span> arguments: --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-http_gzip_static_module --user=nginx --group=nginx </span><br></pre></td></tr></table></figure>
<h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>下载对应版本的 Nginx 源码包: <a href="http://nginx.org/download/">http://nginx.org/download/</a><br>下载最新版本的 ngx-fancyindex 源码包: <a href="https://github.com/aperezdc/ngx-fancyindex/releases">https://github.com/aperezdc/ngx-fancyindex/releases</a><br>上传至服务器并解压，这里我们上传到&#x2F;tmp目录。  </p>
<h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>编译 Nginx </p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/tmp/nginx-1.8.0</span>		<span class="comment">#进入源码目录  </span></span><br><span class="line"><span class="string">./configure</span>  <span class="params">--prefix=/usr/local/nginx</span> <span class="params">--with-http_stub_status_module</span>  <span class="params">--with-http_ssl_module</span> <span class="params">--with-http_gzip_static_module</span> <span class="params">--user=nginx</span> <span class="params">--group=nginx</span> <span class="params">--add-module=</span><span class="string">../ngx-fancyindex-0.4.2</span></span><br><span class="line">make					<span class="comment">#编译</span></span><br></pre></td></tr></table></figure>
<p>特别注意：  </p>
<ul>
<li>.&#x2F;configure后面的配置要对应第一步的输出信息，防止不必要的麻烦，–add-module&#x3D;..&#x2F;ngx-fancyindex-0.4.2  这里根据你下载解压后的 ngx-fancyindex 目录名来。  </li>
<li>只需要 make，不需要 install.</li>
</ul>
<h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><p>重命名旧的 nginx 文件： </p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mv <span class="regexp">/usr/</span>local<span class="regexp">/nginx /u</span>sr<span class="regexp">/local/</span>nginx.bak</span><br></pre></td></tr></table></figure>
<p>复制重新编译的nginx文件到nginx原来安装目录下：   </p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cp .<span class="regexp">/objs/</span>nginx  <span class="regexp">/usr/</span>local<span class="regexp">/nginx/</span>sbin/</span><br></pre></td></tr></table></figure>
<p>重新启动 nginx 服务：  </p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">service nginx restart</span> 	</span><br></pre></td></tr></table></figure>

<h2 id="配置ngx-fancyindex"><a href="#配置ngx-fancyindex" class="headerlink" title="配置ngx-fancyindex"></a>配置ngx-fancyindex</h2><h3 id="修改nginx配置文件"><a href="#修改nginx配置文件" class="headerlink" title="修改nginx配置文件"></a>修改nginx配置文件</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span> /path/	<span class="comment">#指定~/path目录开启自动列目录</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="attribute">alias</span> /alliot/path/;				<span class="comment">#虚拟目录/alliot/path/开启自动列目录</span></span><br><span class="line">	<span class="attribute">root</span> /path/;						<span class="comment">#实际目录/path/开启自动列目录  与alias二选一</span></span><br><span class="line">	<span class="attribute">fancyindex</span> <span class="literal">on</span>;						<span class="comment">#开启nginx目录浏览功能 </span></span><br><span class="line">	<span class="attribute">fancyindex_exact_size</span> <span class="literal">off</span>;			<span class="comment">#文件大小从KB开始显示 </span></span><br><span class="line">	<span class="attribute">fancyindex_localtime</span> <span class="literal">on</span>;			<span class="comment">#显示文件修改时间为服务器本地时间 </span></span><br><span class="line">	<span class="attribute">fancyindex_footer</span> <span class="string">&quot;footer.html&quot;</span>;	<span class="comment">#设置footer为当前目录下的footer.html</span></span><br><span class="line">	<span class="attribute">fancyindex_ignore</span> <span class="string">&quot;footer.html&quot;</span>;	<span class="comment">#设置不列出当前目录下的footer.html</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面 <code>alias</code> 与 <code>root</code> 的区别在于，<code>alias</code> 指定的是当前目录，而 <code>root</code> 指定的是根目录，一般情况下，建议在 “location &#x2F;” 中通过root命令来配置根目录。<br>更多配置见 <a href="https://github.com/aperezdc/ngx-fancyindex">https://github.com/aperezdc/ngx-fancyindex</a> </p>
<h3 id="重载配置"><a href="#重载配置" class="headerlink" title="重载配置"></a>重载配置</h3><p>执行  </p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nginx -s reload</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx proxy_pass到AWS ALB的504问题</title>
    <url>//post/nginx-proxy-pass-aws-alb-504-issue.html</url>
    <content><![CDATA[<p>　　我们的部分后端服务正在经历容器化的改造， 由于历史包袱，现网的网关等设施无法一次性迁移到 k8s 集群中， 因此使用 Nginx <code>proxy_pass</code> 转发到 AWS ALB 这样一个曲线救国的临时方案。<br>　　但是在使用时，我们发现一段时间后 Nginx 出现了 504 的错误，检查后端服务均是正常的，而单独访问 ALB 也是正常响应的，因此便有了此文。  <span id="more"></span></p>
<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>我们的 <code>upstream</code> 配置如下:  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location /xxx-service/ &#123;</span><br><span class="line">  proxy_pass http://gateway-service-alb-xxx.xxx.elb.amazonaws.com/xxx-service/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在重载了 Nginx 后恢复了正常，但过一段时间后同样的问题又出现了，检查 Nginx 的错误日志如下：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[error] 297612#297612: *2235585 no live upstreams while connecting to upstream, client: 3.0.xx.183, server: xxx.xxx.xxx, request: &quot;GET /health HTTP/1.1&quot;, upstream: &quot;http://gateway-service-alb-xxx.xxx.elb.amazonaws.com/&quot;, host: &quot;xxx.xxx.xxx&quot;</span><br><span class="line"></span><br><span class="line">... # reload 后过一段时间再次出现 error </span><br><span class="line"></span><br><span class="line">[error] 297612#297612: *2235596 no live upstreams while connecting to upstream, client: 210.3.xx.148, server: xxx.xxx.xxx, request: &quot;GET /health HTTP/1.1&quot;, upstream: &quot;http://gateway-service-alb-xxx.xxx.elb.amazonaws.com/&quot;, host: &quot;xxx.xxx.xxx&quot;</span><br></pre></td></tr></table></figure>


<h3 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h3><p>如上的问题描述有个关键的点： <code>nginx -s reload</code> 后即恢复了正常，通过这个点可以察觉到这个问题可能出现在 Nginx 上，而不是网关应用上。<br>根据 Nginx 的错误日志，我突然发现 <code>upstream</code> 的 IP 地址在 <code>reload</code> 后变化了。 那么便有了方向了， 问题可能出现在 Nginx 对 <code>proxy_pass</code> 中域名的解析上。 </p>
<p>通过查阅资料发现：<br>原生的 Nginx 使用 <code>proxy_pass</code> 到一个包含域名的 <code>upstream</code> 时，会在配置加载时对这个域名做一次 DNS Query，之后会将这次解析到的 DNS Record 缓存，直到下一次配置加载或重启时才会重新做 DNS Query。<br>而 AWS ALB 作为托管的弹性负载均衡器，默认情况下的 IP 地址是会不定期进行变化更新的：<br><a href="https://repost.aws/questions/QUdkDdF1yASQ65nlvaz3_WuA/about-dynamic-change-of-ip-address-when-using-elb">About dynamic change of IP address when using ELB | AWS</a><br><a href="https://repost.aws/questions/QUyjryn7t7SOOhYQDtpfR2pg/application-load-balancer-ip-change-event?sc_ichannel=ha&sc_ilang=en&sc_isite=repost&sc_iplace=hp&sc_icontent=QUyjryn7t7SOOhYQDtpfR2pg&sc_ipos=8">Application Load Balancer IP Change Event</a></p>
<p>这就导致了当 ALB 的 IP 地址发生变化时，Nginx 无法感知到 DNS Record 的变化，没有正确的将流量转发到新的 <code>uptream</code>，引发了 504 的问题。    </p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>明确了问题原因，要想解决这个问题，当然是要在 ALB 的 DNS 发生变化的时候，告诉 Nginx，让其获取最新的 DNS Record，从而正确的路由流量。  </p>
<p>那我们是要定时来 <code>reload</code> Nginx 吗？显然这一点都不优雅，我们有更好的方式来实现同样的目的：  </p>
<h4 id="使用变量动态解析"><a href="#使用变量动态解析" class="headerlink" title="使用变量动态解析"></a>使用变量动态解析</h4><p>在 Nginx 官方文档<a href="https://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass">Module ngx_http_proxy_module</a> 中有这么一段话：   </p>
<blockquote>
<p>Parameter value can contain variables. In this case, if an address is specified as a domain name, the name is searched among the described server groups, and, if not found, is determined using a <a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#resolver">resolver</a>.   </p>
</blockquote>
<p>这里提到，我们的 <code>proxy_pass</code> value 可以是一个变量， 这样 Nginx 会从 <a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#resolver">resolver</a> 中去做 DNS Query 获取 IP 地址。  </p>
<p>这样就好办了， 我们可以将配置修改为如下:  </p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">  <span class="attribute">server_name</span> xxx.xxx;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 指定 DNS resolver </span></span><br><span class="line">  <span class="attribute">resolver</span> <span class="number">8.8.8.8</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 定义一个变量 lb_upstream</span></span><br><span class="line">  <span class="attribute">set</span> <span class="variable">$lb_upstream</span> http://gateway-service-alb-xxx.xxx.elb.amazonaws.com;</span><br><span class="line"></span><br><span class="line">  <span class="section">location</span> / &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 使用变量形式指定 proxy_pass </span></span><br><span class="line">    <span class="attribute">proxy_pass</span> <span class="variable">$lb_upstream</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>指定 Nginx 使用 resolver 动态解析 proxy_pass 的 DNS， 按照设想，Nginx 每次请求都会去请求 DNS Query 来获得最新的 DNS 解析记录。</p>
<p>这里我们在 Nginx 所在服务器来进行 DNS Query 的抓包，以验证我们的猜测：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">抓取所有网卡中 53 端口（也就是 DNS Query）相关的包，过滤出我们指定的 8.8.8.8 DNS resolver:</span>  </span><br><span class="line">sudo tcpdump -i any -n &#x27;udp port 53 or tcp port 53&#x27;|grep &#x27;8.8.8.8.53&#x27;</span><br></pre></td></tr></table></figure>

<p>使用 <code>tcpdump</code> 抓包后，访问我们的 Nginx，可以得到如下类似日志： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</span><br><span class="line">listening on any, link-type LINUX_SLL (Linux cooked v1), capture size 262144 bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">14:42:32.020783 IP 10.0.60.121.34798 &gt; 8.8.8.8.53: 9593+ A? http://gateway-service-alb-xxx.xxx.elb.amazonaws.com. (87)</span><br><span class="line">14:42:32.020801 IP 10.0.60.121.34798 &gt; 8.8.8.8.53: 37392+ AAAA? http://gateway-service-alb-xxx.xxx.elb.amazonaws.com. (87)</span><br><span class="line">14:42:32.026549 IP 8.8.8.8.53 &gt; 10.0.60.121.34798: 9593 2/0/0 A x.x.x.x, A x.x.x.2x (119) </span><br><span class="line">14:42:32.071872 IP 8.8.8.8.53 &gt; 10.0.60.121.34798: 37392 0/1/0 (169)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>诶，似乎不太对， Nginx 并没有在每次请求时都去对 <code>proxy_pass</code> 做 DNS Query， 这时候我再回想起 <a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#resolver">resolver</a>  文档中有个选项：  </p>
<blockquote>
<p>By default, nginx caches answers using the TTL value of a response. An optional valid parameter allows overriding it:<br>resolver 127.0.0.1 [::1]:5353 valid&#x3D;30s;</p>
</blockquote>
<p>也就是说，Nginx <code>resolver</code> 默认是遵循 DNS 的 TTL 的，而 AWS ALB 的域名 TTL 默认为 60s：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dig gateway-service-alb-xxx.xxx.elb.amazonaws.com  @8.8.8.8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.16.1-Ubuntu &lt;&lt;&gt;&gt; gateway-service-alb-xxx.xxx.elb.amazonaws.com @8.8.8.8</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 36168</span><br><span class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 1</span><br><span class="line"></span><br><span class="line">;; OPT PSEUDOSECTION:</span><br><span class="line">; EDNS: version: 0, flags:; udp: 512</span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;gateway-service-alb-xxx.xxx.elb.amazonaws.com. IN A</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">gateway-service-alb-xxx.xxx.elb.amazonaws.com. 60 IN A x.x.x.x</span><br><span class="line">gateway-service-alb-xxx.xxx.elb.amazonaws.com. 60 IN A x.x.x.2x</span><br><span class="line"></span><br><span class="line">;; Query time: 4 msec</span><br><span class="line">;; SERVER: 8.8.8.8#53(8.8.8.8)</span><br><span class="line">;; WHEN: Wed Jan 24 15:56:47 CST 2024</span><br><span class="line">;; MSG SIZE  rcvd: 130</span><br></pre></td></tr></table></figure>

<p>我们在上面的配置中加入这一参数再次来验证一下：  </p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定 DNS resolver </span></span><br><span class="line"><span class="attribute">resolver</span> <span class="number">8.8.8.8</span> valid=<span class="number">1</span>s;</span><br></pre></td></tr></table></figure>
<p><code>nginx -s reload</code> 后，再次抓包后发现，现在每隔 1s 的请求都会进行 DNS Query，验证了我们的猜想：    </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</span><br><span class="line">listening on any, link-type LINUX_SLL (Linux cooked v1), capture size 262144 bytes</span><br><span class="line"></span><br><span class="line">14:43:32.020783 IP 10.0.60.121.34798 &gt; 8.8.8.8.53: 9593+ A? http://gateway-service-alb-xxx.xxx.elb.amazonaws.com. (87)</span><br><span class="line">14:43:32.020801 IP 10.0.60.121.34798 &gt; 8.8.8.8.53: 37392+ AAAA? http://gateway-service-alb-xxx.xxx.elb.amazonaws.com. (87)</span><br><span class="line">14:43:32.026549 IP 8.8.8.8.53 &gt; 10.0.60.121.34798: 9593 2/0/0 A x.x.x.x, A x.x.x.2x (119) </span><br><span class="line">14:43:32.071872 IP 8.8.8.8.53 &gt; 10.0.60.121.34798: 37392 0/1/0 (169)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">14:43:33.020783 IP 10.0.60.121.34798 &gt; 8.8.8.8.53: 9593+ A? http://gateway-service-alb-xxx.xxx.elb.amazonaws.com. (87)</span><br><span class="line">14:43:33.020801 IP 10.0.60.121.34798 &gt; 8.8.8.8.53: 37392+ AAAA? http://gateway-service-alb-xxx.xxx.elb.amazonaws.com. (87)</span><br><span class="line">14:43:33.026549 IP 8.8.8.8.53 &gt; 10.0.60.121.34798: 9593 2/0/0 A x.x.x.x, A x.x.x.2x (119) </span><br><span class="line">14:43:33.071872 IP 8.8.8.8.53 &gt; 10.0.60.121.34798: 37392 0/1/0 (169)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">14:43:34.020783 IP 10.0.60.121.34798 &gt; 8.8.8.8.53: 9593+ A? http://gateway-service-alb-xxx.xxx.elb.amazonaws.com. (87)</span><br><span class="line">14:43:34.020801 IP 10.0.60.121.34798 &gt; 8.8.8.8.53: 37392+ AAAA? http://gateway-service-alb-xxx.xxx.elb.amazonaws.com. (87)</span><br><span class="line">14:43:34.026549 IP 8.8.8.8.53 &gt; 10.0.60.121.34798: 9593 2/0/0 A x.x.x.x, A x.x.x.2x (119) </span><br><span class="line">14:43:34.071872 IP 8.8.8.8.53 &gt; 10.0.60.121.34798: 37392 0/1/0 (169)</span><br></pre></td></tr></table></figure>

<p>那么我们真的需要手动去指定这个 <code>valid</code> 参数吗？<br>其实是不用的， 在此文的这个场景下，直接遵循 ALB 域名的 DNS TTL 即可，过于频繁的 DNS Query 并不是一件好事，这会带来额外的不必要的性能开销， 我们也无法决定 ALB 的 TTL。<br>如果是用于类似 <code>DDNS</code> 等需要快速获得最新 DNS 记录的场景，这时候才需要按需手动调整 <code>valid</code> 参数。  </p>
<h4 id="upstream使用变量带来的问题"><a href="#upstream使用变量带来的问题" class="headerlink" title="upstream使用变量带来的问题"></a>upstream使用变量带来的问题</h4><p>前面我们虽然利用变量来解决了 DNS 解析的问题，但同时引入了一个新的问题，当 <code>location</code> 参数不为 <code>/</code>，而 <code>proxy_pass</code> 的参数是一个变量时，<code>proxy_pass</code> 的行为与我们预期的有些不同：  </p>
<h5 id="proxy-pass-不使用变量"><a href="#proxy-pass-不使用变量" class="headerlink" title="proxy_pass 不使用变量"></a>proxy_pass 不使用变量</h5><p>当我们的 <code>proxy_pass</code> 不使用变量，且不带 <code>/</code>：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location /a/ &#123;</span><br><span class="line">    proxy_pass http://127.0.0.1:8080;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们访问 nginx&#x2F;a&#x2F;b&#x2F;c 时，Nginx 会将请求转发至 <a href="http://127.0.0.1:8080/a/b/c">http://127.0.0.1:8080/a/b/c</a>  </p>
<p>当我们在 <code>proxy_pass</code> 后面带上了 <code>/</code>:  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location /a/ &#123;</span><br><span class="line">    proxy_pass http://127.0.0.1:8080/; # 注意后面的 /</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们访问 nginx&#x2F;a&#x2F;b&#x2F;c 时, Nginx 会将在 <code>location</code> 中匹配的参数部分截掉，这样请求转发到的就是 <a href="http://127.0.0.1:8080/b/c">http://127.0.0.1:8080/b/c</a> ,匹配到的 <code>/a/</code> 被截取掉了。  </p>
<h5 id="proxy-pass-使用变量"><a href="#proxy-pass-使用变量" class="headerlink" title="proxy_pass 使用变量"></a>proxy_pass 使用变量</h5><p>当我们使用上文说到的，在 upstream 中使用变量来实现动态解析时，上述的行为就变成了这样：<br>当我们的 <code>proxy_pass</code> 使用变量，不带 <code>/</code>：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  # 指定 DNS resolver </span><br><span class="line">  resolver 8.8.8.8;</span><br><span class="line"></span><br><span class="line">  # 定义一个变量 lb_upstream</span><br><span class="line">  set $lb_upstream http://gateway-service-alb-xxx.xxx.elb.amazonaws.com;</span><br><span class="line"></span><br><span class="line">location /a/ &#123;</span><br><span class="line">    proxy_pass $lb_upstream;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们访问 nginx&#x2F;a&#x2F;b&#x2F;c 时，Nginx 会将请求转发至 <a href="http://gateway-service-alb-xxx.xxx.elb.amazonaws.com/a/b/c">http://gateway-service-alb-xxx.xxx.elb.amazonaws.com/a/b/c</a> 这个行为与 <code>proxy_pass</code> 不使用变量是一样的，符合预期。  </p>
<p>当我们的 <code>proxy_pass</code> 使用变量，但 <code>upsteam</code> 变量带了 <code>/</code>：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  # 指定 DNS resolver </span><br><span class="line">  resolver 8.8.8.8;</span><br><span class="line"></span><br><span class="line">  # 定义一个变量 lb_upstream</span><br><span class="line">  set $lb_upstream http://gateway-service-alb-xxx.xxx.elb.amazonaws.com/;  # 注意后面这里带了/</span><br><span class="line"></span><br><span class="line">location /a/ &#123;</span><br><span class="line">    proxy_pass $lb_upstream;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们访问 nginx&#x2F;a&#x2F;b&#x2F;c 时, Nginx 会将请求直接转发至 <a href="http://gateway-service-alb-xxx.xxx.elb.amazonaws.com/">http://gateway-service-alb-xxx.xxx.elb.amazonaws.com/</a> ，既不是我们期望的 <code>/b/c</code> 也不是 <code>/a/b/c</code>，直接转发到了 <code>/</code>。  </p>
<p>那么我们应该怎样去实现我们期望的转发到 <code>/b/c</code> 呢？答案就是不要在变量的尾部添加 <code>/</code>, 转而使用 <code>rewrite</code> 在 <code>location</code> 中重写:  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  # 指定 DNS resolver </span><br><span class="line">  resolver 8.8.8.8;</span><br><span class="line"></span><br><span class="line">  # 定义一个变量 lb_upstream</span><br><span class="line">  set $lb_upstream http://gateway-service-alb-xxx.xxx.elb.amazonaws.com;</span><br><span class="line"></span><br><span class="line">location /a/ &#123;</span><br><span class="line">    rewrite ^/a/(.*) /$1 break;</span><br><span class="line">    proxy_pass $lb_upstream;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述配置，当我们访问 nginx&#x2F;a&#x2F;b&#x2F;c 时, Nginx 会将请求直接转发至 <a href="http://gateway-service-alb-xxx.xxx.elb.amazonaws.com/b/c">http://gateway-service-alb-xxx.xxx.elb.amazonaws.com/b/c</a> </p>
<h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h4><p>除去上述 Nginx 原生的方案，我们还有很多选择：  </p>
<h5 id="ngx-http-upstream-dynamic-module"><a href="#ngx-http-upstream-dynamic-module" class="headerlink" title="ngx_http_upstream_dynamic_module"></a>ngx_http_upstream_dynamic_module</h5><p>Alibaba 的 Tengine 实现了一个动态 <code>upstream</code> 模块：<br><a href="https://tengine.taobao.org/document/http_upstream_dynamic.html">ngx_http_upstream_dynamic_module | Tengine</a>  </p>
<blockquote>
<p>The ‘fail_timeout’ parameter specifies how long time tengine considers the DNS server as unavailiable if a DNS query fails for a server in the upstream. In this period of time, all requests comming will follow what ‘fallback’ specifies.  </p>
</blockquote>
<p>只需要使用如下配置即可： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream backend &#123;</span><br><span class="line">    dynamic_resolve fallback=stale fail_timeout=30s;</span><br><span class="line"></span><br><span class="line">    server a.com;</span><br><span class="line">    server b.com;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    proxy_pass http://backend;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个模块提供了 <code>failback</code> 机制，你如果使用的是 Tengine 的话，这将是个比较优雅的解决方案。<br>值得注意的是，在 Tengine 2.3 开始，这个模块并不内置， 在后续的版本里，你可能需要重新编译。   </p>
<h5 id="使用-ngx-upstream-jdomain"><a href="#使用-ngx-upstream-jdomain" class="headerlink" title="使用 ngx_upstream_jdomain"></a>使用 ngx_upstream_jdomain</h5><p><a href="https://www.nginx.com/resources/wiki/modules/domain_resolve/">ngx_upstream_jdomain | Nginx</a><br><a href="https://github.com/nicholaschiasson/ngx_upstream_jdomain">ngx_upstream_jdomain | Github </a><br>该模块默认情况下，会每秒做一次 DNS 解析。    </p>
<h5 id="使用-nginx-upstream-dynamic-servers"><a href="#使用-nginx-upstream-dynamic-servers" class="headerlink" title="使用 nginx-upstream-dynamic-servers"></a>使用 nginx-upstream-dynamic-servers</h5><p><a href="https://github.com/GUI/nginx-upstream-dynamic-servers">nginx-upstream-dynamic-servers</a><br>该模块在第一次启动的时候会进行一次解析，之后遵循 TTL 再次发起解析请求。  </p>
<h5 id="Nginx-Plus"><a href="#Nginx-Plus" class="headerlink" title="Nginx Plus"></a>Nginx Plus</h5><p>Nginx Plus 是商业版本，提供了动态解析的特性：<br><a href="https://docs.nginx.com/nginx/admin-guide/load-balancer/http-load-balancer/#resolve">http-load-balancer</a> </p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://github.com/alibaba/tengine/blob/master/docs/modules/ngx_http_upstream_dynamic.md">Tengine Github</a><br><a href="https://tengine.taobao.org/document/http_upstream_dynamic.html">ngx_http_upstream_dynamic_module | Tengine</a><br><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#resolver">resolver</a><br><a href="https://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass">Module ngx_http_proxy_module</a><br><a href="https://tenzer.dk/nginx-with-dynamic-upstreams/">Nginx with dynamic upstreams</a><br><a href="https://stackoverflow.com/questions/44739841/nginx-proxy-pass-to-elb-with-variable">NGINX proxy_pass to ELB with Variable</a>  </p>
]]></content>
      <tags>
        <tag>AWS</tag>
        <tag>Linux</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx开启SSL与重定向优化</title>
    <url>//post/nginx-ssl-seo.html</url>
    <content><![CDATA[<p>SSL已经不是什么新鲜东西了，早在前几个月就有消息称，Chrome将逐渐把所有的HTTP网站标记为“不安全”的红色警告。虽说此博客为全静态，且不涉及到密码登录与支付相关页面服务，但是小绿锁对于爱折腾的我的诱惑还是挺大的。这里记录了Nginx下开启SSL的过程与优化。<span id="more"></span></p>
<h3 id="申请证书"><a href="#申请证书" class="headerlink" title="申请证书"></a>申请证书</h3><p>本站用的是腾讯云申请的由亚洲诚信免费提供的DV SSL证书，有效期一年。网上有很多证书的获得方式，这里不再赘述（七牛云、阿里云等均有免费SSL证书提供申请）<br><a href="https://console.qcloud.com/ssl">腾讯云免费SSL证书</a><br>申请后会得到2个文件，一个.crt后缀、一个.key后缀。这里我们将它们上传到nginx目录下。</p>
<h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>登录服务器，输入  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -V</span><br></pre></td></tr></table></figure>
<p>查看输出中是否包含http_ssl，如果没有，请参考<a href="https://my.oschina.net/u/923772/blog/716172">此文</a>  </p>
<p>打开该站点的.conf文件，修改server块如下：  </p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">       <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">       <span class="comment">#新增监听443端口，并指定443为ssl：</span></span><br><span class="line">       <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">       <span class="attribute">server_name</span> www.iots.vip;</span><br><span class="line">	   </span><br><span class="line">       <span class="comment">#ssl配置</span></span><br><span class="line">       <span class="attribute">ssl_certificate</span> xxx.crt; <span class="comment">#证书公钥文件路径(替换为自己的证书路径与文件名)</span></span><br><span class="line">       <span class="attribute">ssl_certificate_key</span>  xxx.key;   <span class="comment">#证书私钥文件路径(替换为自己的证书路径与与文件名)</span></span><br><span class="line">       <span class="attribute">ssl_session_timeout</span>  <span class="number">5m</span>;  <span class="comment">#5分钟session会话保持</span></span><br><span class="line">       <span class="attribute">ssl_protocols</span> SSLv3 TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">       <span class="attribute">ssl_ciphers</span>  HIGH:!ADH:!EXPORT56:RC4+RSA:+MEDIUM;</span><br><span class="line">       <span class="comment">#ssl配置</span></span><br><span class="line">	   </span><br><span class="line">       <span class="section">location</span> / &#123;</span><br><span class="line">                 <span class="comment">#其他规则保持不变</span></span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>保存退出，执行nginx -t，提示success，则执行nginx -s reload </p>
<h3 id="部分优化"><a href="#部分优化" class="headerlink" title="部分优化"></a>部分优化</h3><h4 id="我们需要对http做跳转到https"><a href="#我们需要对http做跳转到https" class="headerlink" title="我们需要对http做跳转到https"></a>我们需要对http做跳转到https</h4><p>添加一个server模块，监听80端口请求：  </p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">#301跳转</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">	<span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">	<span class="attribute">server_name</span> www.iots.vip iots.vip;</span><br><span class="line">	<span class="attribute">return</span> <span class="number">301</span> https://www.iots.vip<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="部分还有http的页面会被提示不安全"><a href="#部分还有http的页面会被提示不安全" class="headerlink" title="部分还有http的页面会被提示不安全"></a>部分还有http的页面会被提示不安全</h4><ul>
<li>我们只需要将页面内非https资源去除即可(或者将其转为https)   </li>
<li>旧版的腾讯公益404页面调用的js是不支持https的，这里可以替换为新版的：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">title: 404错误|Alliot&#x27;s blog</span><br><span class="line">layout: false  <span class="comment">&lt;!--设置标题，同时取消layout--&gt;</span></span><br><span class="line">---</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>404错误|Alliot&#x27;s blog<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;404错误，页面不存在！&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;content-type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=utf-8;&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge,chrome=1&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;robots&quot;</span> <span class="attr">content</span>=<span class="string">&quot;all&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;robots&quot;</span> <span class="attr">content</span>=<span class="string">&quot;index,follow&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> <span class="attr">homePageUrl</span>=<span class="string">&quot;https://www.iots.vip&quot;</span> <span class="attr">homePageName</span>=<span class="string">&quot;回到我的博客&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><del>遗留问题</del><br>之前以为配置错误，原来是因为缓存的原因。</p>
<p>考虑到SEO的因素（强迫症），我想做到一篇文章只有唯一的URL，即不管访问  <a href="https://iots.vip/">https://iots.vip</a> 还是  <a href="http://iots.vip/">http://iots.vip</a>  亦或者是  <a href="http://www.iots.vip/">http://www.iots.vip</a>  ，均301自动跳转到<a href="https://www.iots.vip/">https://www.iots.vip</a>  ， 也就是说  <a href="https://www.iots.vip/">https://www.iots.vip</a>  作为唯一的访问Url。<br>我想直接通过两次的301达到这个目的：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">	<span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">	<span class="attribute">server_name</span> www.iots.vip iots.vip;</span><br><span class="line">	<span class="attribute">return</span> <span class="number">301</span> https://www.iots.vip<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">	<span class="attribute">listen</span> <span class="number">443</span>;</span><br><span class="line">	<span class="attribute">server_name</span> iots.vip;</span><br><span class="line">	<span class="attribute">return</span> <span class="number">301</span> https://www.iots.vip<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="上面的空格必须要，不能丢。因为nginx语法检测特别严格，if和后面括号以及变量等号这些元素都要有空格。"><a href="#上面的空格必须要，不能丢。因为nginx语法检测特别严格，if和后面括号以及变量等号这些元素都要有空格。" class="headerlink" title="上面的空格必须要，不能丢。因为nginx语法检测特别严格，if和后面括号以及变量等号这些元素都要有空格。   
  "></a>上面的空格必须要，不能丢。因为nginx语法检测特别严格，if和后面括号以及变量等号这些元素都要有空格。   
  </h2><h3 id="证书更新"><a href="#证书更新" class="headerlink" title="证书更新"></a>证书更新</h3><p>2017年9月18日更新：<br>　　今天发现访问博客的时候，提示SSL证书不受保护，意味着证书到期了。  这里我们需要更新一下证书：<br>更新证书很简单，分如下三步：  </p>
<h4 id="重新申请证书"><a href="#重新申请证书" class="headerlink" title="重新申请证书"></a>重新申请证书</h4><p>　　再次申请一个证书，下载，上传并覆盖之前的旧文件（存放位置见上文）。  </p>
<h4 id="重启web服务器"><a href="#重启web服务器" class="headerlink" title="重启web服务器"></a>重启web服务器</h4><p>　　覆盖旧文件后，还未生效，我们需要重启web服务器。<br>Nginx直接执行：  </p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nginx -s reload</span>  </span><br></pre></td></tr></table></figure>
<p>Apache执行：  </p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">service httpd reload</span>  </span><br></pre></td></tr></table></figure>

<h4 id="部署CDN证书"><a href="#部署CDN证书" class="headerlink" title="部署CDN证书"></a>部署CDN证书</h4><p>　　（未开启CDN中HTTPS功能的请忽略此步）我们完成以上两步后，还需要在CDN控制台更新我们的证书文件，腾讯云请直接选择：域名-管理-高级配置-部署已有证书<br>　　这样整个更新步骤完成，小绿锁又回来了。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Nginx</tag>
        <tag>SEO</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenV**手动指定路由规则</title>
    <url>//post/openvxx-manual-static-route-configuration.html</url>
    <content><![CDATA[<p>　　我们在远程办公时通常需要通过内部 OpenV** 来访问公司内部的敏感系统， 默认情况下， OpenV** 会临时修改本地路由表，将所有流量都指向了 v**_gateway，导致一些本地规则被覆盖，甚至无法打开部分国内的网站，带来了很多不便。这里记录一下手动指定路由规则的配置，仅让指定的网段或域名走 gateway。 <span id="more"></span>  </p>
<blockquote class="blockquote-center">
<p>　　文中为了脱敏，涉及到的关键字均由 <code>**</code> 替代， 配置文件处请手动替换回来，避免配置错误。  </p>

</blockquote>    
<h3 id="指定网段-IP路由"><a href="#指定网段-IP路由" class="headerlink" title="指定网段&#x2F;IP路由"></a>指定网段&#x2F;IP路由</h3><p>默认情况下，OpenV** 启动时会增加类似的路由， 这些路由来自服务端定义，由客户端 pull 下来:  </p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">add</span> net <span class="number">0.0.0.0</span>: gateway <span class="number">10.40.79.1</span></span><br><span class="line">add net <span class="number">128.0.0.0</span>: gateway <span class="number">10.40.79.1</span></span><br></pre></td></tr></table></figure>
<p>我们可以在配置文件中添加如下规则，取消pull路由，并新增我们需要路由的网段:   </p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不pull远端路由规则，改为手动配置路由规则  </span></span><br><span class="line"><span class="attribute">route</span>-nopull</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认只允许添加100条路由，如果需要添加的路由数大于100，需要如下参数</span></span><br><span class="line"><span class="attribute">max</span>-routes <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定IP 123.123.123.123 走网关    ! ! ! 记得替换**  ! ! !</span></span><br><span class="line"><span class="attribute">route</span> <span class="number">123</span>.<span class="number">123</span>.<span class="number">123</span> <span class="number">255.255.255.255</span> v**_gateway</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定网段走网关   ! ! ! 记得替换**  ! ! !</span></span><br><span class="line"><span class="attribute">route</span> <span class="number">10.0.0.0</span> <span class="number">255.255.255.0</span>  v**_gateway</span><br><span class="line"><span class="attribute">route</span> <span class="number">172.16.0.0</span> <span class="number">255.255.255.0</span>  v**_gateway</span><br></pre></td></tr></table></figure>
<p>　　
　　</p>
<h3 id="指定域名路由"><a href="#指定域名路由" class="headerlink" title="指定域名路由"></a>指定域名路由</h3><p>只通过 IP&#x2F;网段来配置路由多少有些不方便，我们可以通过域名&#x2F;FQDN来配置路由规则，例如我们仅 <a href="http://www.iots.vip/">www.iots.vip</a> 需要走网关，则可以添加如下规则: </p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不pull远端路由规则，改为手动配置路由规则  </span></span><br><span class="line"><span class="attribute">route</span>-nopull</span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许客户端从服务段pull DNS记录.   </span></span><br><span class="line"><span class="comment">#  --allow-pull-fqdn</span></span><br><span class="line"><span class="comment">#    Allow client to pull DNS names from server (rather than being limited to IP address) for --ifconfig, --route, and --route-gateway.</span></span><br><span class="line"><span class="attribute">allow</span>-pull-fqdn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 仅www.iots.vip走网关   ! ! ! 记得替换**  ! ! !</span></span><br><span class="line"><span class="attribute">route</span> www.iots.vip <span class="number">255.255.255.255</span> v**_gateway</span><br></pre></td></tr></table></figure>

<h3 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h3><p>注意， IP&#x2F;网段路由与域名&#x2F;FQDN 两者不冲突，可以共存。<br>同时，如果你是 macOS ，建议直接使用 CLI 版本:   </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装CLI， ! ! ! 记得替换**  ! ! !</span></span><br><span class="line">brew install openv**</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">连接，需要用sudo    ! ! ! 记得替换**  ! ! !</span></span><br><span class="line">sudo openv** --config config.ov**(配置文件路径) --script-security 2 </span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>折腾</tag>
        <tag>Linux</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title> Nginx的基本配置：日志文件、缓存、自动列目录、Gzip压缩的配置</title>
    <url>//post/nginx-gzip.html</url>
    <content><![CDATA[<p>今天与网上的一位朋友一同探讨了一下Nginx服务器配置的问题。下文是关于Nginx的基本配置解析与用法 <span id="more"></span><br><img data-src="https://static.iots.vip/2017/01/201701317210_1680.png" alt="Nginx基础"><br>（图侵删，来自网络）  </p>
<h2 id="日志文件"><a href="#日志文件" class="headerlink" title="日志文件"></a>日志文件</h2><p>记录了Nginx服务器操作的一些信息。可以使用log_format来配置日志文件的记录格式。  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/nginx/conf</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi nginx.conf</span><br></pre></td></tr></table></figure>
<p>变量如下：  </p>
<figure class="highlight nsis"><table><tr><td class="code"><pre><span class="line"><span class="variable">$remote_addr</span>：客户端的IP地址</span><br><span class="line"><span class="variable">$remote_user</span>：客户端的用户名</span><br><span class="line"><span class="variable">$request</span>：请求的URL</span><br><span class="line"><span class="variable">$status</span>：请求状态（请求中还是请求结束了）</span><br><span class="line"><span class="variable">$body_bytes_sent</span>：发送给客户端的字节数</span><br><span class="line"><span class="variable">$http_referer</span>：访问的原网页（客户从哪里访问到当前网页的）</span><br><span class="line"><span class="variable">$http_user_agent</span>：客户端的浏览器对应的信息（类型：火狐/google...）</span><br><span class="line"><span class="variable">$http_x_forwarded_for</span>：客户端的IP的值 和 <span class="variable">$remote_addr</span>差不多</span><br><span class="line"></span><br><span class="line"><span class="comment">#主要记录的是日志文件的信息是如何排列的</span></span><br><span class="line">log_format main <span class="string">&#x27;<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] &quot;<span class="variable">$request</span>&quot; &#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> &quot;<span class="variable">$http_referer</span>&quot; &#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&quot;<span class="variable">$http_user_agent</span>&quot; &quot;<span class="variable">$http_x_forwarded_for</span>&quot;&#x27;</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h3 id="日志默认存储地址"><a href="#日志默认存储地址" class="headerlink" title="日志默认存储地址"></a>日志默认存储地址</h3><p>在nginx.conf中也可以进行配置：  </p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">error_log  /alidata/<span class="built_in">log</span>/nginx/<span class="keyword">error</span>.<span class="built_in">log</span> crit;</span><br><span class="line">access_log  /alidata/<span class="built_in">log</span>/nginx/host.access.<span class="built_in">log</span>  main;</span><br></pre></td></tr></table></figure>
<h3 id="关闭日志记录"><a href="#关闭日志记录" class="headerlink" title="关闭日志记录"></a>关闭日志记录</h3><p>则添加：  </p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">#不记录日志信息</span></span><br><span class="line"><span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line"><span class="attribute">access_log</span>  /alidata/log/nginx/host.access.log  main;</span><br><span class="line"><span class="comment">#注意：更改了配置文件之后要重新加载</span></span><br></pre></td></tr></table></figure>
<h3 id="日志文件的切割"><a href="#日志文件的切割" class="headerlink" title="日志文件的切割"></a>日志文件的切割</h3><p>为了使日志文件的存储更合理、有序，可以利用计划任务crontab将日志文件自动切割<br>1、</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi cutlog.sh   <span class="comment">#新建并编辑一个批处理</span></span><br></pre></td></tr></table></figure>
<p>2、添加以下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nowDate=$(<span class="built_in">date</span> +%Y%m%D)  <span class="comment">#获取当前日期</span></span><br><span class="line"><span class="built_in">mv</span> /usr/local/nginx/logs/host.access.log <span class="variable">$&#123;nowDate&#125;</span>.<span class="built_in">log</span>  <span class="comment">#将老的日志文件备份到今天的文件中</span></span><br><span class="line"><span class="comment">#cat /usr/local/nginx/nginx.pid 获取主进程号</span></span><br><span class="line"><span class="built_in">kill</span> -usr1 $(<span class="built_in">cat</span> /usr/local/nginx/nginx.pid)</span><br></pre></td></tr></table></figure>
<p>3、定时执行批处理，shell中执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure>
<p>按i输入：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment">#意思是在每天23：59分定时执行这段代码</span></span><br><span class="line"> <span class="number">23</span> <span class="number">59</span>  *** <span class="regexp">/bin/</span>bash <span class="regexp">/usr/</span>local<span class="regexp">/nginx/</span>logs/cutlog.sh</span><br></pre></td></tr></table></figure>
<p>并保存。  </p>
<hr>
<h2 id="Nginx缓存功能"><a href="#Nginx缓存功能" class="headerlink" title="Nginx缓存功能"></a>Nginx缓存功能</h2><h2 id="觉得每次blog的打开都有点慢，怀疑是nginx没打开缓存导致的。在站点的nginx配置文件下添加以下内容：其中expires-7d-表示-缓存时间为7天，7天后自动清除。"><a href="#觉得每次blog的打开都有点慢，怀疑是nginx没打开缓存导致的。在站点的nginx配置文件下添加以下内容：其中expires-7d-表示-缓存时间为7天，7天后自动清除。" class="headerlink" title="觉得每次blog的打开都有点慢，怀疑是nginx没打开缓存导致的。在站点的nginx配置文件下添加以下内容：其中expires 7d;表示 缓存时间为7天，7天后自动清除。  
  "></a>觉得每次blog的打开都有点慢，怀疑是nginx没打开缓存导致的。在站点的nginx配置文件下添加以下内容：<br><img data-src="https://static.iots.vip/2016/10/201610214679_6994.png" alt="开启缓存"><br>其中expires 7d;表示 缓存时间为7天，7天后自动清除。  
  </h2><h2 id="Nginx自动列目录功能"><a href="#Nginx自动列目录功能" class="headerlink" title="Nginx自动列目录功能"></a>Nginx自动列目录功能</h2><h2 id="所谓的自动列目录就是，当你的目录下没有index文件的时候，浏览器访问此目录，会自动列出该目录下的文件。实现这个功能需要同时具备两个条件：1、不存在index之类的默认首页文件2、服务器配置了自动列目录的功能操作如下：打开nginx-conf加入以下代码："><a href="#所谓的自动列目录就是，当你的目录下没有index文件的时候，浏览器访问此目录，会自动列出该目录下的文件。实现这个功能需要同时具备两个条件：1、不存在index之类的默认首页文件2、服务器配置了自动列目录的功能操作如下：打开nginx-conf加入以下代码：" class="headerlink" title="所谓的自动列目录就是，当你的目录下没有index文件的时候，浏览器访问此目录，会自动列出该目录下的文件。实现这个功能需要同时具备两个条件：1、不存在index之类的默认首页文件2、服务器配置了自动列目录的功能操作如下：打开nginx.conf加入以下代码：
  "></a>所谓的自动列目录就是，当你的目录下没有index文件的时候，浏览器访问此目录，会自动列出该目录下的文件。<br>实现这个功能需要同时具备两个条件：<br>1、不存在index之类的默认首页文件<br>2、服务器配置了自动列目录的功能<br>操作如下：<br>打开nginx.conf<br>加入以下代码：<br><figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">server</span> &#123;</span><br><span class="line">          .......</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /apps/oaapp;</span><br><span class="line">            <span class="keyword">index</span>  <span class="keyword">index</span>.jsp <span class="keyword">index</span>.html <span class="keyword">index</span>.htm;</span><br><span class="line"></span><br><span class="line">           <span class="meta">#开启自动列目录</span></span><br><span class="line">            autoindex on;</span><br><span class="line"></span><br><span class="line">            ......</span><br></pre></td></tr></table></figure>
  </h2><h2 id="Nginx的Gzip压缩功能"><a href="#Nginx的Gzip压缩功能" class="headerlink" title="Nginx的Gzip压缩功能"></a>Nginx的Gzip压缩功能</h2><p>下文均引用自@<a href="http://www.jb51.net/article/48995.htm">脚本之家</a><br>Nginx的gzip模块是内置的，在http中添加配置，以下是配置详解：  </p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">gzip</span> <span class="literal">on</span>|<span class="literal">off</span></span><br><span class="line"><span class="comment"># 默认值: gzip off </span></span><br><span class="line"><span class="comment"># 开启或者关闭gzip模块</span></span><br><span class="line">gzip_static <span class="literal">on</span>|<span class="literal">off</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># nginx对于静态文件的处理模块</span></span><br><span class="line"><span class="comment"># 该模块可以读取预先压缩的gz文件，这样可以减少每次请求进行gzip压缩的CPU资源消耗。该模块启用后，nginx首先检查是否存在请求静态文件的gz结尾的文件，如果有则直接返回该gz文件内容。为了要兼容不支持gzip的浏览器，启用gzip_static模块就必须同时保留原始静态文件和gz文件。这样的话，在有大量静态文件的情况下，将会大大增加磁盘空间。我们可以利用nginx的反向代理功能实现只保留gz文件。</span></span><br><span class="line"><span class="comment"># 可以google&quot;nginx gzip_static&quot;了解更多</span></span><br><span class="line">gzip_comp_level <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认值：1(建议选择为4)</span></span><br><span class="line"><span class="comment"># gzip压缩比/压缩级别，压缩级别 1-9，级别越高压缩率越大，当然压缩时间也就越长（传输快但比较消耗cpu）。</span></span><br><span class="line">gzip_buffers <span class="number">4</span> <span class="number">16k</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认值: gzip_buffers 4 4k/8k </span></span><br><span class="line"><span class="comment"># 设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。 例如 4 4k 代表以4k为单位，按照原始数据大小以4k为单位的4倍申请内存。 4 8k 代表以8k为单位，按照原始数据大小以8k为单位的4倍申请内存。</span></span><br><span class="line"><span class="comment"># 如果没有设置，默认值是申请跟原始数据相同大小的内存空间去存储gzip压缩结果。</span></span><br><span class="line">gzip_types mime-type [mime-type ...]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认值: gzip_types text/html (默认不对js/css文件进行压缩)</span></span><br><span class="line"><span class="comment"># 压缩类型，匹配MIME类型进行压缩</span></span><br><span class="line"><span class="comment"># 不能用通配符 text/*</span></span><br><span class="line"><span class="comment"># (无论是否指定)text/html默认已经压缩 </span></span><br><span class="line"><span class="comment"># 设置哪压缩种文本文件可参考 conf/mime.types</span></span><br><span class="line">gzip_min_length  <span class="number">1k</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认值: 0 ，不管页面多大都压缩</span></span><br><span class="line"><span class="comment"># 设置允许压缩的页面最小字节数，页面字节数从header头中的Content-Length中进行获取。</span></span><br><span class="line"><span class="comment"># 建议设置成大于1k的字节数，小于1k可能会越压越大。 即: gzip_min_length 1024</span></span><br><span class="line">gzip_http_version <span class="number">1</span>.<span class="number">0</span>|<span class="number">1</span>.<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认值: gzip_http_version 1.1(就是说对HTTP/1.1协议的请求才会进行gzip压缩)</span></span><br><span class="line"><span class="comment"># 识别http的协议版本。由于早期的一些浏览器或者http客户端，可能不支持gzip自解压，用户就会看到乱码，所以做一些判断还是有必要的。 </span></span><br><span class="line"><span class="comment"># 注：99.99%的浏览器基本上都支持gzip解压了，所以可以不用设这个值,保持系统默认即可。</span></span><br><span class="line"><span class="comment"># 假设我们使用的是默认值1.1，如果我们使用了proxy_pass进行反向代理，那么nginx和后端的upstream server之间是用HTTP/1.0协议通信的，如果我们使用nginx通过反向代理做Cache Server，而且前端的nginx没有开启gzip，同时，我们后端的nginx上没有设置gzip_http_version为1.0，那么Cache的url将不会进行gzip压缩</span></span><br><span class="line">gzip_proxied [<span class="literal">off</span>|expired|<span class="literal">no</span>-cache|<span class="literal">no</span>-store|private|no_last_modified|no_etag|auth|any] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认值：off</span></span><br><span class="line"><span class="comment"># Nginx作为反向代理的时候启用，开启或者关闭后端服务器返回的结果，匹配的前提是后端服务器必须要返回包含&quot;Via&quot;的 header头。</span></span><br><span class="line"><span class="literal">off</span> - 关闭所有的代理结果数据的压缩</span><br><span class="line">expired - 启用压缩，如果header头中包含 <span class="string">&quot;Expires&quot;</span> 头信息</span><br><span class="line"><span class="literal">no</span>-cache - 启用压缩，如果header头中包含 <span class="string">&quot;Cache-Control:no-cache&quot;</span> 头信息</span><br><span class="line"><span class="literal">no</span>-store - 启用压缩，如果header头中包含 <span class="string">&quot;Cache-Control:no-store&quot;</span> 头信息</span><br><span class="line">private - 启用压缩，如果header头中包含 <span class="string">&quot;Cache-Control:private&quot;</span> 头信息</span><br><span class="line">no_last_modified - 启用压缩,如果header头中不包含 <span class="string">&quot;Last-Modified&quot;</span> 头信息</span><br><span class="line">no_etag - 启用压缩 ,如果header头中不包含 <span class="string">&quot;ETag&quot;</span> 头信息</span><br><span class="line">auth - 启用压缩 , 如果header头中包含 <span class="string">&quot;Authorization&quot;</span> 头信息</span><br><span class="line">any - 无条件启用压缩</span><br><span class="line">gzip_vary <span class="literal">on</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 和http头有关系，加个vary头，给代理服务器用的，有的浏览器支持压缩，有的不支持，所以避免浪费不支持的也压缩，所以根据客户端的HTTP头来判断，是否需要压缩</span></span><br><span class="line">gzip_disable <span class="string">&quot;MSIE [1-6].&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁用IE6的gzip压缩，又是因为杯具的IE6。当然，IE6目前依然广泛的存在，所以这里你也可以设置为“MSIE [1-5].”</span></span><br><span class="line">IE6的某些版本对gzip的压缩支持很不好，会造成页面的假死，今天就测试出了这个问题  </span><br><span class="line">后来调试后，发现是对img进行gzip后造成IE6的假死，把对img的gzip压缩去掉后就正常了  </span><br><span class="line">为了确保其它的IE6版本不出问题，所以建议加上gzip_disable的设置  </span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx反向代理将某端口反向代理到80端口</title>
    <url>//post/nginx-proxy.html</url>
    <content><![CDATA[<p>　　最近使用 <code>Docker</code> 部署了一个网站应用，然而服务器上的 80 端口已经被占用了，所以给这个容器分配了一个端口 x,但是又不想通过 ip:x 的方式来访问该网站应用，所以需要将 x 端口反向代理到 80 端口，这样在绑定二级域名后能够直接进行访问。<span id="more"></span>  </p>
<h2 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h2><p>新建 <code>Nginx</code> 的 vhost.conf 配置文件，内容如下:  </p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">	<span class="attribute">server_name</span> localhost xxx.iots.vip;<span class="comment">#这里将域名改为自己的二级域名</span></span><br><span class="line">	<span class="section">location</span> / &#123;</span><br><span class="line">	<span class="attribute">proxy_pass</span> http://localhost:x; <span class="comment">#这里是你的端口 x</span></span><br><span class="line">	<span class="attribute">proxy_redirect</span> default;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="重载配置"><a href="#重载配置" class="headerlink" title="重载配置"></a>重载配置</h2><p>执行：  </p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nginx -s reload</span></span><br></pre></td></tr></table></figure>
<p>即可。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Nginx</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Openwrt出现md5sum mismatch错误的解决方法</title>
    <url>//post/linux-drcom-openwrt.html</url>
    <content><![CDATA[<p> 之前路由器刷潘多拉玩<a href="http://http//www.iots.vip/tags/Drcom/">drcom认证</a>的时候，装ipk出现</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">Collected errors:</span><br><span class="line">* opkg_install_pkg: <span class="keyword">Package</span> <span class="title">******* md5sum m</span>ismatch. Either the opkg <span class="keyword">or</span> the <span class="keyword">package</span> <span class="title">index are corrupt. Try ‘opkg update’.</span></span><br><span class="line">* opkg_install_cmd: Cannot install <span class="keyword">package</span> <span class="title">*******.</span></span><br></pre></td></tr></table></figure>
<p>这是由于从源列表安装软件必须校验md5，于是手动下载了ipk，安装时同样错误提示，后来找到解决办法：<br>只需要注释掉&#x2F;etc&#x2F;opkg.conf里面第一行src pacages这一句即可，这样可以直接安装本地或者其他的ipk，而不需要校验源里面的md5值。<span id="more"></span></p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Drcom</tag>
      </tags>
  </entry>
  <entry>
    <title>Prometheus relabel实现动态metrics path</title>
    <url>//post/prometheus-metrics-path-relabel.html</url>
    <content><![CDATA[<p>　　Prometheus 的 relabel 功能可以在目标的 label 被抓取之前重写它，每个采集配置可以配置多个 relabel，并按照配置的顺序来应用于每个 target 的 label。利用这个特性，我们可以实现动态的 metrics-path。<span id="more"></span></p>
<h3 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h3><p>现在 Alliot 有如下的 metrics endpoint 需要被监控：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http://192.168.1.1:80/payment-service/metrics</span><br><span class="line">http://192.168.1.1:80/order-service/metrics</span><br><span class="line">http://192.168.1.1:80/user-service/metrics</span><br></pre></td></tr></table></figure>
<p>这种情况下，我们的 target 均为 192.168.1.1:80，不同的是 metrics_path，这样我们就不得不写3个 job 来监控，因为在 prometheus 的配置中，<code>target</code> 字段只能是 [host]:[ip] 不能包含路径。  </p>
<p><a href="https://github.com/prometheus/prometheus/issues/1852">https://github.com/prometheus/prometheus/issues/1852</a> 官方仓库也有人提出了这样的需求，但是并没有被通过。</p>
<p>众所周知，Prometheus 在 scrape 的过程中，有个十分好用的 feature：<code> relabel</code>。 通过 <code>relabel</code> 可以将 scrape 到的标签进行修改、重打标签。通过 [prometheus URL]:9090&#x2F;targets 下对各个 target 的查看，我们可以发现，endpoint 的 <code>Before relabeling</code> 中存在一个名为 <code>__metrics_path__</code> 的 label，  因此，我们可以通过设置一个新的 relabel 作为动态的值，之后将其 relabel 重打标来达到我们的目的：<br><img data-src="https://static.iots.vip/prometheus-before-relabeling.png" alt="prometheus Before relabeling"></p>
<h3 id="static-config下的实现"><a href="#static-config下的实现" class="headerlink" title="static config下的实现"></a>static config下的实现</h3><p>静态配置下，通过为每个 target 指定一个新的 label 并将其 replace 为 <code>__metrics_path__</code> 即可：  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">prometheus_dynamic_metrics_path</span></span><br><span class="line">  <span class="attr">honor_labels:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">honor_timestamps:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scrape_interval:</span> <span class="string">15s</span></span><br><span class="line">  <span class="attr">scrape_timeout:</span> <span class="string">10s</span></span><br><span class="line">  <span class="attr">metrics_path:</span> <span class="string">/metrics</span></span><br><span class="line">  <span class="attr">scheme:</span> <span class="string">http</span></span><br><span class="line">  <span class="attr">follow_redirects:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">relabel_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">_new_path</span>]</span><br><span class="line">    <span class="attr">separator:</span> <span class="string">;</span></span><br><span class="line">    <span class="attr">regex:</span> <span class="string">(.*)</span></span><br><span class="line">    <span class="attr">target_label:</span> <span class="string">__metrics_path__</span></span><br><span class="line">    <span class="attr">replacement:</span> <span class="string">/metrics/$1</span></span><br><span class="line">    <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">  <span class="attr">static_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">targets:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">_new_path:</span> <span class="string">payment-service</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">targets:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.2</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">_new_path:</span> <span class="string">order-service</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">targets:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.2</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">_new_path:</span> <span class="string">user-service</span></span><br></pre></td></tr></table></figure>

<p>在如上配置下，我们仅需要配置一个 Job 即可完成对多个 metric endpoint 的 scrape。  </p>
<h3 id="动态发现场景下"><a href="#动态发现场景下" class="headerlink" title="动态发现场景下"></a>动态发现场景下</h3><p>同样的，这种 relabel 的方式在自动发现等机制场景下，也能很方便的通过添加一个额外的 label 来达到简化配置的目的。  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">ecs_jvm_actuator</span></span><br><span class="line">    <span class="attr">scrape_interval:</span> <span class="string">30s</span></span><br><span class="line">    <span class="attr">scrape_timeout:</span> <span class="string">20s</span></span><br><span class="line">    <span class="attr">consul_sd_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">server:</span> <span class="string">localhost:8500</span></span><br><span class="line">        <span class="attr">token:</span> <span class="string">&#x27;alliot,www.iots.vip&#x27;</span></span><br><span class="line">    <span class="attr">relabel_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">&quot;__meta_consul_service_metadata_instance&quot;</span>]</span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">__address__</span></span><br><span class="line">        <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里将 consul 配置的对象的 service_name 值作为 _metrics_path</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">&quot;__meta_consul_service_metadata_service_name&quot;</span>]</span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">__metrics_path__</span></span><br><span class="line">        <span class="attr">action:</span> <span class="string">replace</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>运维监控</tag>
        <tag>可观测性</tag>
      </tags>
  </entry>
  <entry>
    <title>Python函数之sys.argv</title>
    <url>//post/python-sys-argv.html</url>
    <content><![CDATA[<p>　　<code>sys.argv</code> 一般用来获取程序外部参数。建议结合 <a href="/post/linux-c1.html">带参数的主函数——C语言</a> 一文来理解。<span id="more"></span><br>　　很多编程语言中都有这个关键字，含义大致相同： </p>
<blockquote>
<p>argv[0] 指向程序运行的全路径名<br>argv[1] 指向在DOS命令行中执行程序名后的第一个字符串<br>argv[2] 指向执行程序名后的第二个字符串   </p>
</blockquote>
<p>通过实例来看功能：  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="built_in">print</span>(sys.argv)</span><br></pre></td></tr></table></figure>
<p>命名为 <code>alliot.py</code> 保存到 <code>/tmp/</code> 下，执行：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./alliot.py</span><br></pre></td></tr></table></figure>
<p>结果为:  </p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">[<span class="symbol">&#x27;./alliot.py</span>&#x27;]</span><br></pre></td></tr></table></figure>

<p>如果在执行时，带上两个参数 a,b:  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./alliot.py a b</span><br></pre></td></tr></table></figure>
<p>结果为:  </p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">[<span class="symbol">&#x27;./alliot.py</span>&#x27;, <span class="symbol">&#x27;a</span>&#x27;, <span class="symbol">&#x27;b</span>&#x27;]</span><br></pre></td></tr></table></figure>
<p>如果我们将程序中的 <code>sys.argv</code> 修改为 <code>sys.argv[0]</code>,在执行时，仍然带上两个参数 a,b:  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./alliot.py a b</span><br></pre></td></tr></table></figure>
<p>这时候，结果为：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./alliot.py</span><br></pre></td></tr></table></figure>
<p>同理，改为 <code>sys.argv[1]</code>，结果为：  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span></span><br></pre></td></tr></table></figure>
<p>改为 <code>sys.argv</code> 则为：  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">b</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python实现i人事自动打卡</title>
    <url>//post/python-ihr360-auto-doSign.html</url>
    <content><![CDATA[<p>　　我司使用的打卡软件是 i 人事，不过我这记性，经常漏了打卡签退，定了闹钟都会忘，今天又被老大屌了。于是准备抓一下签到接口，利用 crontab 来实现自动签到签退。<span id="more"></span>  </p>
<h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>　　这里使用的是 Fiddler 进行抓包，Fiddler 是一个 HTTP 调试代理工具，以代理服务器的形式实现对网络数据流的监听。之所以没有用 Wireshark，一是因为我不是很熟悉 wireshark 的筛选器，二是因为本文使用模拟器（手机应用后台流量多，不便于分析）来抓包，代理服务器方式更方便。</p>
<h4 id="安装Fiddler"><a href="#安装Fiddler" class="headerlink" title="安装Fiddler"></a>安装Fiddler</h4><p>　　先安装 Fiddler(<a href="https://www.telerik.com/download/fiddler">官网地址</a>)，安装完成之后需要安装 fiddlercertmaker 证书生成工具(<a href="http://www.telerik.com/docs/default-source/fiddler/addons/fiddlercertmaker.exe?sfvrsn=2">官网地址</a>)  </p>
<h4 id="Fiddler配置"><a href="#Fiddler配置" class="headerlink" title="Fiddler配置"></a>Fiddler配置</h4><p>　　如图，打开Fiddler，Tools 选择 Fiddler Options，将图中所标识地方勾选，配置后点击 OK 保存并重启 Fiddler<img data-src="https://static.iots.vip/%E9%85%8D%E7%BD%AEFiddler.png" alt="配置Fiddler.png"><br>　　再次打开该选项卡，点击 Action 生成证书到桌面(文件名 FiddlerRoot.cer) <img data-src="https://static.iots.vip/%E5%AF%BC%E5%87%BAFiddler%E8%AF%81%E4%B9%A6.png" alt="导出Fiddler证书.png"><br>　　将该证书文件上传到模拟器即可。  </p>
<h4 id="模拟器配置"><a href="#模拟器配置" class="headerlink" title="模拟器配置"></a>模拟器配置</h4><p>　　记录 Windows 当前网卡的 IP 备用。<br>　　打开模拟器，在模拟器内的系统设置中选择 “安全”，选择 “从 SD 卡安装”，选择前面上传的证书，安装即可。（过程中会要求设置屏保密码，设置即可）<br>　　选择模拟器内的 WiFi 连接，长按当前的 WiFi，选择修改网络，选择手动配置代理，地址填前面记录的 Windows 本地 IP，端口为 8888，保存后重启模拟器即可。  <img data-src="https://static.iots.vip/%E6%A8%A1%E6%8B%9F%E5%99%A8WiFi%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE.png" alt="模拟器WiFi代理设置.png">  </p>
<h3 id="开始抓包"><a href="#开始抓包" class="headerlink" title="开始抓包"></a>开始抓包</h3><h4 id="配置过滤器"><a href="#配置过滤器" class="headerlink" title="配置过滤器"></a>配置过滤器</h4><p>　　打开 Fiddler 后，打开模拟器，这时候在 Fiddler 会监听到大量的流量信息，便于查找，我们需要使用过滤器，如图，在 Fiddler 界面右侧，选择 “Filters”并勾选，选择 “Use Filters”，在 “Hosts” 项目中，选择 “Show only the following Hosts”，并填入 “<a href="http://www.ihr360.com/">www.ihr360.com</a>“ 这样能过滤掉除 i 人事以外的域名流量信息，同时，在 “Request Headers” 中，勾选 “Show only if URL contains”，填入 “gateway&#x2F;attendance&#x2F;aggregate&#x2F;attendance&#x2F;api&#x2F;sign&#x2F;doSign” ，点击右上角的 Actions，选择 “Run Filterset now” 以生效过滤器。在 Fiddler 左侧的流量信息栏中，使用 Ctrl + X 清除当前所有流量信息。<img data-src="https://static.iots.vip/Fiddler%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%8A%93%E5%8C%85%E9%85%8D%E7%BD%AE.png" alt="Fiddler模拟器抓包配置.png">  </p>
<h4 id="模拟器签到"><a href="#模拟器签到" class="headerlink" title="模拟器签到"></a>模拟器签到</h4><p>　　将模拟器的模拟定位定位到需要打卡的位置，打开 i 人事，点击考勤打卡，打卡签到，这时候在 Fiddler 中会出现一条监听到的请求，双击打开，如图所示，<img data-src="https://static.iots.vip/Fiddler%E6%8A%93%E5%8C%85%E6%88%90%E5%8A%9F%E8%BF%94%E5%9B%9E.png" alt="Fiddler抓包成功返回.png"><br>　　可以看到，实际上打卡签到动作就是一条 POST 请求。我们了解了这条 POST 请求的基本内容后就可以利用 Python 的 requests 模块来模拟提交了。  </p>
<h3 id="模拟请求"><a href="#模拟请求" class="headerlink" title="模拟请求"></a>模拟请求</h3><p>　　模拟 POST 请求很简单，这里就不多说，直接贴代码（很烂&#x3D;.&#x3D;! ,能用就行啦…勿喷…）：  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># www.iots.vip  </span></span><br><span class="line"><span class="comment"># Alliot  </span></span><br><span class="line"><span class="comment"># 2020-1-8  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.utils <span class="keyword">import</span> formataddr</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> strftime, localtime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略 requests 请求认证警告</span></span><br><span class="line">requests.packages.urllib3.disable_warnings()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 邮件设置</span></span><br><span class="line">server = <span class="string">&#x27;smtp.163.com&#x27;</span></span><br><span class="line">port = <span class="string">&#x27;25&#x27;</span></span><br><span class="line">sender = <span class="string">&#x27;发件人邮箱&#x27;</span></span><br><span class="line">passwd = <span class="string">&#x27;密码(授权码)&#x27;</span></span><br><span class="line">receiver = <span class="string">&#x27;收件人&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># i 人事签到接口地址</span></span><br><span class="line">url = <span class="string">&quot;https://www.ihr360.com/gateway/attendance/aggregate/attendance/api/sign/doSign&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 抓包签到请求头</span></span><br><span class="line">headersValue = &#123;</span><br><span class="line">    <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;SESSION=XXXXXXXXXXXXXX; Path=/; HttpOnly&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;accept&#x27;</span>: <span class="string">&#x27;application/json;charset=UTF-8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;appKey&#x27;</span>: <span class="string">&#x27;com.irenshi.personneltreasure&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;appVersion&#x27;</span>: <span class="string">&#x27;XXXX&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;osVersion&#x27;</span>: <span class="string">&#x27;XXXX&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;udid&#x27;</span>: <span class="string">&#x27;XXXXXX&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;IRENSHI_APP_AGENT&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;os&#x27;</span>: <span class="string">&#x27;Android&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;irenshilocale&#x27;</span>: <span class="string">&#x27;zh_CN&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json; charset=utf-8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Content-Length&#x27;</span>: <span class="string">&#x27;272&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;www.ihr360.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;Keep-Alive&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抓包请求 json</span></span><br><span class="line">jsonValue = &#123;</span><br><span class="line">    <span class="string">&quot;deviceToken&quot;</span>: <span class="string">&quot; &quot;</span>,</span><br><span class="line">    <span class="string">&quot;deviceType&quot;</span>: <span class="string">&quot;NORMAL&quot;</span>,</span><br><span class="line">    <span class="string">&quot;latitude&quot;</span>: XXX,</span><br><span class="line">    <span class="string">&quot;locationName&quot;</span>: <span class="string">&quot;XXX&quot;</span>,</span><br><span class="line">    <span class="string">&quot;longitude&quot;</span>: XXX,</span><br><span class="line">    <span class="string">&quot;phoneName&quot;</span>: <span class="string">&quot;MI6&quot;</span>,</span><br><span class="line">    <span class="string">&quot;signSource&quot;</span>: <span class="string">&quot;APP&quot;</span>,</span><br><span class="line">    <span class="string">&quot;wifiMac&quot;</span>: <span class="string">&quot;XXX&quot;</span>,</span><br><span class="line">    <span class="string">&quot;wifiName&quot;</span>: <span class="string">&quot;Alliot&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 签到方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">doSign</span>(<span class="params">url, jsonValue, headersValue</span>):</span><br><span class="line">    r = requests.post(url, json=jsonValue, headers=headersValue, verify=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">global</span> results</span><br><span class="line">    results = json.loads(r.text)</span><br><span class="line">    <span class="built_in">print</span>(strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, localtime()))</span><br><span class="line">    <span class="keyword">return</span> results</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 邮件提醒方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sendMail</span>(<span class="params">server, port, sender, passwd, msg</span>):</span><br><span class="line">    smtp = smtplib.SMTP()</span><br><span class="line">    smtp.connect(server, port)</span><br><span class="line">    smtp.login(sender, passwd)</span><br><span class="line">    smtp.sendmail(msg[<span class="string">&#x27;From&#x27;</span>], msg[<span class="string">&#x27;To&#x27;</span>], msg.as_string())</span><br><span class="line">    smtp.quit()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;邮件发送成功email has send out !&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">newMail</span>(<span class="params">status</span>):</span><br><span class="line">    msg = MIMEText(<span class="built_in">str</span>(results), <span class="string">&#x27;plain&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    msg[<span class="string">&#x27;From&#x27;</span>] = formataddr([<span class="string">&quot;AlliotSigner&quot;</span>, sender])</span><br><span class="line">    msg[<span class="string">&#x27;To&#x27;</span>] = formataddr([<span class="string">&quot;Alliot&quot;</span>, receiver])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> status == <span class="literal">None</span>:</span><br><span class="line">        msg[<span class="string">&#x27;Subject&#x27;</span>] = <span class="string">&#x27;打卡失败-_-!&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;打卡失败&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        msg[<span class="string">&#x27;Subject&#x27;</span>] = <span class="string">&#x27;自动打卡成功&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;打卡成功&quot;</span>)</span><br><span class="line">    sendMail(server, port, sender, passwd, msg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 签到并邮件通知结果,不用通知则改为 doSign(url, jsonValue, headersValue) 即可</span></span><br><span class="line">newMail(doSign(url, jsonValue, headersValue)[<span class="string">&quot;data&quot;</span>])</span><br><span class="line"><span class="comment"># doSign(url, jsonValue, headersValue)</span></span><br></pre></td></tr></table></figure>
<p>修改其中的配置为上文抓到的数据即可（这里注意，<code>headersValue</code> 请求头为字典格式，<code>jsonValue</code> 则为 Json 格式，执行报错的时候检查一下是否是格式错误。）<br>上传到服务器中，执行：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ihr.py # 你的文件名  </span><br></pre></td></tr></table></figure>
<p>执行后，打开 i 人事查看是否成功产生一次签到记录，成功即可添加进计划任务。 </p>
<h3 id="定时执行"><a href="#定时执行" class="headerlink" title="定时执行"></a>定时执行</h3><p>　　利用 crontab 来实现自动执行。关于 crontab 的具体使用，可见 <a href="/post/linux-crontab.html">Linux下crontab的使用与注意事项 | Alliot’s blog</a><br>　　我是定义每周工作日的 8 点 18 点打卡，crontab 配置为：  </p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">0 </span><span class="number">8</span>,<span class="number">18</span> * * mon,tue,wed,thu,fri,sat /<span class="keyword">usr</span>/bin/python3 /alliot/ihr.py&gt;&gt;/alliot/ihr_log.txt</span><br></pre></td></tr></table></figure>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>　　整个流程很简单粗暴，其实一般后台都是能看出来的，因为每次的签到位置都是一样，所以如果想要逼真一点，可以在请求中经纬度、位置名里使用范围的随机数等等… 不过，还是那句话：  可以，但没必要。</p>
]]></content>
      <tags>
        <tag>折腾</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>VS2017中&#39;scanf&#39;: This function or variable may be unsafe.报错</title>
    <url>//post/c-error-C4996.html</url>
    <content><![CDATA[<p>　　今天在使用 VS 2017 编译一段 C 代码的时候，出现 “error C4996: ‘scanf’: This function or variable may be unsafe.” 的报错。同样的一段代码在 Dev cpp 中成功编译运行。<span id="more"></span>  </p>
<h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i][j]);</span><br></pre></td></tr></table></figure>
<p>报错出现在 <code>scanf</code> 处。 </p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>　　将 <code>scanf</code> 改为 <code>scanf_s</code>  </p>
<h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>　　使用 <code>#define _CRT_SECURE_NO_WARNINGS</code> 宏定义   </p>
<h3 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h3><p>　　在 VS 中新建项目的时候去掉“安全开发生命周期(SDL)检查”即可将错误转变成警告  </p>
<h3 id="方案四"><a href="#方案四" class="headerlink" title="方案四"></a>方案四</h3><p>　　在头文件中加入 <code>#pragma warning（disable：4996）</code> </p>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>　　因为 <code>scanf</code> 函数不检查边界，因此很容易出现内存泄漏的问题，如：  </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> s[<span class="number">3</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;s); </span><br></pre></td></tr></table></figure>
<p>如果我输入一段超过3个字节的字符串，由于s只有3个字节的长度，剩下的文字就写入了s后面的其他空间，出现缓冲区溢出。而_s后缀的函数,会有额外的参数,用来说明缓冲区的长度.比如:  </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">scanf_s(<span class="string">&quot;%s&quot;</span>, &amp;s, <span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<p>因此，微软在新版的 VS 中强制使用安全的 <code>scanf_s</code> </p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>关于 <code>scanf_s</code> 的更多细节： <a href="http://code.wikia.com/wiki/Scanf_s">http://code.wikia.com/wiki/Scanf_s</a> </p>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware虚拟机桥接无法ping通主机的解决方法</title>
    <url>//post/vmware-ping.html</url>
    <content><![CDATA[<p>今天装了个Kali玩玩，发现arpspoof总是失败，ping不通，本文记录虚拟机桥接无法ping通主机的解决方法。<span id="more"></span><br> 看一下VMware的网卡设置：<br><img data-src="https://static.iots.vip/2016/09/201609234136_8621.png" alt="网卡设置"><br> 桥接没毛病。<br>看看虚拟网络编辑器，发现是这样的：<br><img data-src="https://static.iots.vip/2016/09/201609234805_7485.png" alt="虚拟网络编辑器"><br>找了一下网上：先关闭虚拟机，然后，从设备管理器中将VMware的虚拟网卡全部卸载。同时将虚拟网络编辑器中的网络也移除。最后还原默认设置。确定。搞定  </p>
<hr>
<p>补充一下虚拟机网络配置：  </p>
<blockquote>
<p>VMnet0：这是VMware用于虚拟桥接网络下的虚拟交换机；<br>VMnet1：这是VMware用于虚拟Host-Only网络下的虚拟交换机；<br>VMnet8：这是VMware用于虚拟NAT网络下的虚拟交换机；<br>VMware Network Adapter VMnet1：这是Host用于与Host-Only虚拟网络进行通信的虚拟网卡；<br>VMware Network Adapter VMnet8：这是Host用于与NAT虚拟网络进行通信的虚拟网卡。  </p>
</blockquote>
<p>如果选择的是桥接，那么，虚拟机应该将其IP设置为与主机同一个网段；<br>如果选择的是NAT，那么，虚拟机应该将其IP设置为与VMnet 8同一个网段。  </p>
<p><del>2017年11月23日更新</del>:<br>如需要使用NAT方式与本机通讯，则选择 进入网络和共享中心——更改适配器设置，选择”VMware Network Adapter VMnet8”网卡，右键”属性”，选择”Internet 协议版本4”属性，选择”使用下面的IP地址”在IP地址中填入一个不冲突的局域网IP如”192.168.229.1”子网掩码输入”225.225.225.0”，然后在虚拟机中将IP设置为同网段的IP即可。<br><del>2017年12月29日更新</del>:<br>重新安装VMware发现虚拟机中dhcp总是分配ip在另外的一个网段，这时候需要打开VMware——编辑——虚拟机网络编辑器点击NAT，在下面的子网地址设置为所需的网段即可。<br><del>2019年8月12日更新</del>:<br>使用 NAT 模式的时候，如何设置网关？<br>首先在虚拟网络编辑器里将 VMnet 8 的 NAT 设置的网关地址设置为当前 IP 的一个网段，比如我的虚拟机是 192.168.31.128 ，这里我可以设置为 192.168.31.2 为网关地址。<br>接着在虚拟机的网络配置里(如 vim &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33)配置网关地址为一致的网关地址</p>
<hr>
<p>PS:Kali挺好玩的，以后可能会记录一些Kali的笔记。  </p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>VMware</tag>
      </tags>
  </entry>
  <entry>
    <title>Python调包侠之阿里云堡垒机添加主机</title>
    <url>//post/python-aliyun-hac-addhosts.html</url>
    <content><![CDATA[<p>　　要不是为了过等保，🐶 才用马云家的堡垒机。天下苦其久矣。<span id="more"></span>  </p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>　　为了过等保，不得不将部分服务器的登陆方式从先前自建的跳板机换成了阿里云的堡垒机，登陆堡垒机需要使用 RAM 账户，同时要求 RAM 账户开启两步验证（即动态验证码）。 这不仅给登陆服务器造成了极大的不便，导入几百台服务器资产也是个头疼的事情，导入服务器、导入服务器用户与密钥、导入主机组、主机组授权用户组，几轮下来，心态有点容易受不了。（用过阿里云的同学应该都体会过一个控制台卡得浏览器崩溃的情况），好在上周终于放出了 V3.2.17 版本，从这个版本开始，我们终于能够通过接口去完成一些事情了，姑且用接口与 salt 来减轻一点堡垒机迁移的工作量吧。<br>　　当然，这个版本当前（2021-03-19）还无法直接升级，需要提交工单或是在高级企业服务群中@技术支持帮忙手动升级。 同时阿里云文档中心的堡垒机接口文档暂时还没有更新，待放出的接口文档根据其法律声明，暂时也不能在此放出（可通过工单向阿里云申请索要.）ps: 看看后面的代码引用的包不也就都有了？(逃。  </p>
<h3 id="需求实现"><a href="#需求实现" class="headerlink" title="需求实现"></a>需求实现</h3><p>　　时间仓促，能用就行的原则，实现了通过主机名与 IP，导入主机至堡垒机，并导入对应的用户与用户密钥，加入到对应的主机组中。（这个主机组应按需到云盾堡垒机中配置权限与用户）。  </p>
<h4 id="主机端"><a href="#主机端" class="headerlink" title="主机端"></a>主机端</h4><p>　　服务器需要有供堡垒机登陆的用户，可以利用 SaltStack 或 Ansible 等工具向服务器创建堡垒机登陆所用的系统用户及密钥。 这里顺带贴一下我的 <code>salt</code>  <code>state</code> 文件：  </p>
<p>创建服务器系统用户 <code>create_hac_users.sls</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 创建 aliyun 用户，并添加到 wheel 组</span></span><br><span class="line"><span class="attr">aliyun:</span></span><br><span class="line">  <span class="attr">user.present:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">fullname:</span> <span class="string">aliyun</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">shell:</span> <span class="string">/bin/bash</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">home:</span> <span class="string">/home/aliyun</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">groups:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">wheel</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加云盾堡垒机网段白名单</span></span><br><span class="line"><span class="comment"># 这里注意！ hosts.allow 这个配置文件不能使用类似sshd:192.168.0.0/24:allow这种格式，而是应该使用sshd:192.168.0.:allow 这种形式，已经踩过坑了。。。😂</span></span><br><span class="line"><span class="attr">allow-hac:</span></span><br><span class="line">  <span class="attr">cmd.run:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;if [ `cat /etc/hosts.allow | grep &#x27;sshd:192.168.0.:allow&#x27; -q ; echo $?` -ne 0 ];then echo &#x27;sshd:192.168.:allow&#x27; &gt;&gt; /etc/hosts.allow ;fi&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将公钥 aliyun_pub_key 传到 /home/aliyun/.ssh/authorized_keys</span></span><br><span class="line"><span class="string">/home/aliyun/.ssh/authorized_keys:</span></span><br><span class="line">  <span class="attr">file.managed:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">source:</span> <span class="string">salt://aliyun_pub_key</span> <span class="comment"># 这个路径其实看你 salt master 的 /etc/salt/master 中 file_root 字段</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">user:</span> <span class="string">aliyun</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">aliyun</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">mode:</span> <span class="number">400</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">makedirs:</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>


<p>sudoer 权限配置，<code>rectify_sudoers.sls</code>:  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">/etc/sudoers:</span></span><br><span class="line">  <span class="attr">file.managed:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">source:</span> <span class="string">salt://sudoers_files/sudoers</span> <span class="comment"># 这个路径其实看你 salt master 的 /etc/salt/master 中 file_root 字段</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">user:</span> <span class="string">root</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">root</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">mode:</span> <span class="string">&#x27;400&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">/etc/sudoers.d:</span></span><br><span class="line">  <span class="attr">file.recurse:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">source:</span> <span class="string">salt://sudoers_files/sudoers.d</span> <span class="comment"># 这个路径其实看你 salt master 的 /etc/salt/master 中 file_root 字段</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">user:</span> <span class="string">root</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">root</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">dir_mode:</span> <span class="string">&#x27;0750&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">file_mode:</span> <span class="string">&#x27;0640&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">include_empty:</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<p>总配置 <code>add.sls</code>:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">include:</span>        </span><br><span class="line">  <span class="bullet">-</span> <span class="string">init.hac.rectify_sudoers</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">init.hac.create_hac_users</span></span><br></pre></td></tr></table></figure>

<p>在 salt master 的 &#x2F;etc&#x2F;salt&#x2F;master 中 file_root 配置的路径下：  </p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">.</span></span><br><span class="line"><span class="bullet"></span>├── add.sls</span><br><span class="line">├── create<span class="emphasis">_hac_users.sls</span></span><br><span class="line"><span class="emphasis">├── rectify_sudoers.sls </span></span><br><span class="line"><span class="emphasis">├── aliyun_pub_key  # 系统用户 &#x27;aliyun&#x27; 的公钥  </span></span><br><span class="line"><span class="emphasis">└── sudoers_files </span></span><br><span class="line"><span class="emphasis">    ├── sudoers</span></span><br><span class="line"><span class="emphasis">    └── sudoers.d</span></span><br><span class="line"><span class="emphasis">        └── aliyun_</span>hac</span><br></pre></td></tr></table></figure>
<p><code>sudoers</code> 内容配置如下：  </p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Defaults</span> !visiblepw</span><br><span class="line"><span class="title class_">Defaults</span> always_set_home</span><br><span class="line"><span class="title class_">Defaults</span> match_group_by_gid</span><br><span class="line"><span class="title class_">Defaults</span> always_query_group_plugin</span><br><span class="line"><span class="title class_">Defaults</span> env_reset,pwfeedback</span><br><span class="line"><span class="title class_">Defaults</span> env_keep = <span class="string">&quot;COLORS DISPLAY HOSTNAME HISTSIZE KDEDIR LS_COLORS&quot;</span></span><br><span class="line"><span class="title class_">Defaults</span> env_keep += <span class="string">&quot;MAIL PS1 PS2 QTDIR USERNAME LANG LC_ADDRESS LC_CTYPE&quot;</span></span><br><span class="line"><span class="title class_">Defaults</span> env_keep += <span class="string">&quot;LC_COLLATE LC_IDENTIFICATION LC_MEASUREMENT LC_MESSAGES&quot;</span></span><br><span class="line"><span class="title class_">Defaults</span> env_keep += <span class="string">&quot;LC_MONETARY LC_NAME LC_NUMERIC LC_PAPER LC_TELEPHONE&quot;</span></span><br><span class="line"><span class="title class_">Defaults</span> env_keep += <span class="string">&quot;LC_TIME LC_ALL LANGUAGE LINGUAS _XKB_CHARSET XAUTHORITY&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启日志</span></span><br><span class="line"><span class="title class_">Defaults</span>  logfile=<span class="string">&quot;/var/log/sudo.log&quot;</span></span><br><span class="line"><span class="title class_">Defaults</span>  log_host, log_year, logfile=<span class="string">&quot;/var/log/sudo.log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Defaults</span> secure_path = <span class="regexp">/sbin:/bin</span><span class="symbol">:/usr/sbin</span><span class="symbol">:/usr/bin</span></span><br><span class="line"><span class="title class_">Defaults</span>   passwd_tries=<span class="number">5</span></span><br><span class="line"></span><br><span class="line">root <span class="variable constant_">ALL</span>=(<span class="variable constant_">ALL</span>) <span class="variable constant_">ALL</span></span><br><span class="line">%wheel <span class="variable constant_">ALL</span>=(<span class="variable constant_">ALL</span>) <span class="variable constant_">NOPASSWD</span>: <span class="variable constant_">ALL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件独立目录</span></span><br><span class="line"><span class="comment">#includedir /etc/sudoers.d</span></span><br></pre></td></tr></table></figure>

<p><code>other_user</code> 内容配置如下：  </p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命令 alias</span></span><br><span class="line">Cmnd_Alias BASE=<span class="regexp">/usr/</span>bin<span class="regexp">/free, /u</span>sr<span class="regexp">/bin/i</span>ostat, <span class="regexp">/usr/</span>bin<span class="regexp">/top, /</span>bin<span class="regexp">/ifconfig, /</span>bin<span class="regexp">/netstat, /</span>bin<span class="regexp">/tail, /</span>bin<span class="regexp">/cat, /</span>bin<span class="regexp">/less, /</span>bin<span class="regexp">/netstat, /u</span>sr<span class="regexp">/sbin/i</span>p, <span class="regexp">/bin/g</span>rep</span><br><span class="line"></span><br><span class="line">Cmnd_Alias TEST=<span class="regexp">/usr/</span>local<span class="regexp">/java, /u</span>sr<span class="regexp">/bin/</span>node</span><br><span class="line"></span><br><span class="line">Cmnd_Alias VIEWER=<span class="regexp">/usr/</span>local/java</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对用户组的 sudo 权限做配置</span></span><br><span class="line">%tester ALL=(ALL) NOPASSWD : BASE, TEST</span><br><span class="line">%viewer ALL=(ALL) NOPASSWD : BASE, VIEWER</span><br></pre></td></tr></table></figure>
<p>这里之后，我们只需要通过 <code>salt &lt;hostname&gt; state.sls add</code> 即可完成 aliyun 用户的添加。  </p>
<h4 id="堡垒机端"><a href="#堡垒机端" class="headerlink" title="堡垒机端"></a>堡垒机端</h4><p>　　这里直接丢一下脚本吧：<br><code>add_to_hac.py</code>: </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># Alliot  </span></span><br><span class="line"><span class="comment"># blog: www.iots.vip </span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> libs.tools <span class="keyword">import</span> async_run_command, sync_run_command</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">async_run_command</span>(<span class="params">cmd, cwd=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    运行命令, 异步，不阻塞</span></span><br><span class="line"><span class="string">    :param: cmd: 命令</span></span><br><span class="line"><span class="string">    :param: cwd: 目录</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 非阻塞，不获取返回的内容</span></span><br><span class="line">    subprocess.Popen(</span><br><span class="line">        cmd,</span><br><span class="line">        stdin=subprocess.PIPE,</span><br><span class="line">        stdout=subprocess.PIPE,</span><br><span class="line">        stderr=subprocess.PIPE,</span><br><span class="line">        shell=<span class="literal">True</span>,</span><br><span class="line">        cwd=cwd)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HacManagement</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">from</span> aliyunsdkcore.client <span class="keyword">import</span> AcsClient</span><br><span class="line">        <span class="keyword">from</span> aliyunsdkcore.request <span class="keyword">import</span> CommonRequest</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 阿里云密钥</span></span><br><span class="line">        ID = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        Secret = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="comment"># 堡垒机区域</span></span><br><span class="line">        region_id = <span class="string">&#x27;cn-beijing&#x27;</span> </span><br><span class="line">        <span class="comment"># 堡垒机实例ID</span></span><br><span class="line">        hac_instance_id = <span class="string">&quot;bastionhost-cn-xxx&quot;</span></span><br><span class="line">        self.client = AcsClient(ID, Secret, region_id)</span><br><span class="line">        self.request = CommonRequest()</span><br><span class="line">        self.request.set_accept_format(<span class="string">&#x27;json&#x27;</span>)</span><br><span class="line">        self.request.set_domain(<span class="string">&#x27;yundun-bastionhost.aliyuncs.com&#x27;</span>)</span><br><span class="line">        self.request.set_method(<span class="string">&#x27;POST&#x27;</span>)</span><br><span class="line">        self.request.set_protocol_type(<span class="string">&#x27;https&#x27;</span>)  <span class="comment"># https | http</span></span><br><span class="line">        self.request.set_version(<span class="string">&#x27;2019-12-09&#x27;</span>)</span><br><span class="line">        self.request.add_query_param(<span class="string">&#x27;RegionID&#x27;</span>, region_id)</span><br><span class="line">        self.request.add_query_param(<span class="string">&#x27;InstanceId&#x27;</span>, hac_instance_id)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_host</span>(<span class="params">self, **kwargs</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        调用 CreateHost 接口在堡垒机中创建需要运维的主机。</span></span><br><span class="line"><span class="string">        :param: kwargs: HostNmae: 主机名、Source: 主机来源(Local、Ecs、 Rds)、OSType: 操作系统类型(</span></span><br><span class="line"><span class="string">        Linux、Windows)、ActiveAddressType: 地址类型(Private、Public)、HostPrivateAddress: 私网 IP 地址(当 address_type 为 Private</span></span><br><span class="line"><span class="string">        时必选)、host_public_address: 公网 IP 地址(当 address_type 为 Public 时必选)、Comment: 备注(可选)、SourceInstanceId:</span></span><br><span class="line"><span class="string">        指定新创建的ECS实例ID或专属集群主机ID（当 source 选择 Ecs 或 Rds 时，该参数为必填项）、InstanceRegionId: 指定新创建的ECS实例或专属集群主机所属区域ID当 source 选择</span></span><br><span class="line"><span class="string">        Ecs 或 Rds 时，该参数为必填项） :return: HostId: 创建的主机的 ID</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> kwargs.keys():</span><br><span class="line">            self.request.add_query_param(i, kwargs[i])</span><br><span class="line">        self.request.set_action_name(<span class="string">&#x27;CreateHost&#x27;</span>)</span><br><span class="line">        response = self.client.do_action_with_exception(self.request)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 调用 salt 添加用户到目标服务器系统</span></span><br><span class="line">        async_run_command(cmd=<span class="string">f&#x27;salt <span class="subst">&#123;kwargs[<span class="string">&quot;HostName&quot;</span>]&#125;</span> state.sls add&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> json.loads(response)[<span class="string">&#x27;HostId&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_host_account</span>(<span class="params">self, **kwargs</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        调用 CreateHostAccount 创建堡垒机中的主机账号</span></span><br><span class="line"><span class="string">        :param kwargs: HostId: 主机 ID、ProtocolName: 协议名(SSH、RDP)、HostAccountName: 用户名、Password: 密码、PrivateKey: 私钥、PassPhrase: 私钥口令</span></span><br><span class="line"><span class="string">        :return: HostAccountId: 主机账号ID</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.request.set_action_name(<span class="string">&#x27;CreateHostAccount&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> kwargs.keys():</span><br><span class="line">            self.request.add_query_param(i, kwargs[i])</span><br><span class="line">        response = self.client.do_action_with_exception(self.request)</span><br><span class="line">        <span class="keyword">return</span> json.loads(response)[<span class="string">&#x27;HostAccountId&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">modify_hosts_port</span>(<span class="params">self, *args, protocol_name, port</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        调用 ModifyHostsPort 修改主机指定协议的端口</span></span><br><span class="line"><span class="string">        :param args: HostIds 主机ID（要求为列表）</span></span><br><span class="line"><span class="string">        :param protocol_name: 协议名(SSH、RDP)</span></span><br><span class="line"><span class="string">        :param port: 端口</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.request.set_action_name(<span class="string">&#x27;ModifyHostsPort&#x27;</span>)</span><br><span class="line">        self.request.add_query_param(<span class="string">&#x27;HostIds&#x27;</span>, *args)</span><br><span class="line">        self.request.add_query_param(<span class="string">&#x27;ProtocolName&#x27;</span>, protocol_name)</span><br><span class="line">        self.request.add_query_param(<span class="string">&#x27;Port&#x27;</span>, port)</span><br><span class="line">        response = self.client.do_action_with_exception(self.request)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(response, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_hosts_to_group</span>(<span class="params">self, *args, host_group_id</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        调用 AddHostsToGroup 添加指定主机到指定主机组</span></span><br><span class="line"><span class="string">        :param args: HostIds 主机ID（要求为列表）</span></span><br><span class="line"><span class="string">        :param host_group_id: 主机组ID</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.request.set_action_name(<span class="string">&#x27;AddHostsToGroup&#x27;</span>)</span><br><span class="line">        self.request.add_query_param(<span class="string">&#x27;HostIds&#x27;</span>, *args)</span><br><span class="line">        self.request.add_query_param(<span class="string">&#x27;HostGroupId&#x27;</span>, host_group_id)</span><br><span class="line">        response = self.client.do_action_with_exception(self.request)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(response, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_host_and_users</span>(<span class="params">hostname, ip, comment</span>):</span><br><span class="line">    aliyun_key = base64.b64encode(<span class="string">&#x27;&#x27;&#x27;-----BEGIN RSA PRIVATE KEY-----</span></span><br><span class="line"><span class="string"># 这里填 系统用户 &#x27;aliyun&#x27; 的私钥</span></span><br><span class="line"><span class="string">-----END RSA PRIVATE KEY-----&#x27;&#x27;&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;添加主机到堡垒机\n&#x27;</span>)</span><br><span class="line">    host_id = HacManagement().create_host(</span><br><span class="line">        HostName=hostname,</span><br><span class="line">        Source=<span class="string">&quot;Local&quot;</span>,</span><br><span class="line">        OSType=<span class="string">&quot;Linux&quot;</span>,</span><br><span class="line">        ActiveAddressType=<span class="string">&quot;Private&quot;</span>,</span><br><span class="line">        HostPrivateAddress=ip,</span><br><span class="line">        Comment=comment)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;添加主机账户aliyun\n&#x27;</span>)</span><br><span class="line">    HacManagement().create_host_account(</span><br><span class="line">        HostId=host_id,</span><br><span class="line">        ProtocolName=<span class="string">&#x27;SSH&#x27;</span>,</span><br><span class="line">        HostAccountName=<span class="string">&#x27;aliyun&#x27;</span>,</span><br><span class="line">        PrivateKey=aliyun_key</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;修改主机ssh端口为9999\n&#x27;</span>) <span class="comment"># 根据服务器的 SSH 服务的端口修改</span></span><br><span class="line">    HacManagement().modify_hosts_port(</span><br><span class="line">        <span class="string">f&#x27;[<span class="subst">&#123;host_id&#125;</span>]&#x27;</span>,</span><br><span class="line">        protocol_name=<span class="string">&#x27;SSH&#x27;</span>,</span><br><span class="line">        port=<span class="number">9999</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;添加主机到泛组\n&#x27;</span>)  <span class="comment"># 这里需要自己手动去“云盾堡垒机”控制台创建一个组（</span></span><br><span class="line">    HacManagement().add_hosts_to_group(</span><br><span class="line">        <span class="string">f&#x27;[<span class="subst">&#123;host_id&#125;</span>]&#x27;</span>,</span><br><span class="line">        host_group_id=<span class="string">&#x27;1&#x27;</span>  <span class="comment"># 创建组的时候，F12打开浏览器控制台抓一下请求，看看GroupId即可</span></span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;主机已添加到堡垒机，主机ID为<span class="subst">&#123;host_id&#125;</span>\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    add_host_and_users(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>], sys.argv[<span class="number">3</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>依赖为：  </p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">alibabacloud-yundun-bastionhost20191209</span><span class="operator">=</span><span class="operator">=</span><span class="number">1.0</span>.<span class="number">1</span></span><br><span class="line"><span class="attribute">aliyun-python-sdk-core</span><span class="operator">=</span><span class="operator">=</span><span class="number">2.13</span>.<span class="number">30</span></span><br></pre></td></tr></table></figure>
<p>执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 add_to_hac.py &lt;主机名&gt; &lt;IP&gt; &lt;备注&gt;</span><br></pre></td></tr></table></figure>
<p>即可完成添加堡垒机操作。  </p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Python</tag>
        <tag>SaltStack</tag>
      </tags>
  </entry>
  <entry>
    <title>Terraform初探：创建s3 bucket</title>
    <url>//post/terraform-create-aws-s3-bucket.html</url>
    <content><![CDATA[<p>　　近期开始做 IaC（Infrastructure as Code）相关的工作，期间会用 Terraform 比较多，因此会有一些与之相关的笔记记录。本文是小试牛刀利用 Terraform 来创建一个 AWS S3 bucket 体验 Terraform。<span id="more"></span></p>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>　　Terraform 是 HashiCorp（它家还有令人熟知的 Consul、Vault、Vagrant 等产品）开源的一个 IT 基础架构自动化编排工具， 它能够帮助你利用代码来管理与维护 IT 资源。通过 Terraform 你能够非常方便的利用<a href="https://www.terraform.io/language/syntax/configuration">简单模板语言</a>来创建、配置、管理各大云厂商的云资源（包括但不限于云虚拟机、RDS、Kubernetes 实例、VPC、安全组、负载均衡、对象存储等）。</p>
<h3 id="获得AWS-accessKey"><a href="#获得AWS-accessKey" class="headerlink" title="获得AWS accessKey"></a>获得AWS accessKey</h3><p>　　AWS 的权限控制是个很复杂的东西，这里以 IAM 为例，简单的说一下如何获得 access key。<br>首先登录你的 AWS 账号，然后选择 IAM 模块，选择 “Users”，创建用户或者是选择现有用户，在 “Security credentials” 中创建 Access key（Notice： key 只会在创建的时候出现一次，所以需要自己保存好，后面备用）。<br>如果你司使用的是类似 Microsoft Active Directory 类似的统一认证（IAM 中没有用户管理设置，并且你不是主账户管理员），那么你可以使用这个<a href="https://github.com/prolane/samltoawsstskeys">SAML to AWS STS Keys Conversion 拓展</a>来获得临时的 access Key。简单介绍一下使用：<br>　　安装好这个浏览器插件后，点击插件图标，勾选 Activated， 然后再登录 AWS 控制台时便会弹出下载一个文件，使用记事本打开会发现里面包含了 access key 信息。<br>　　假如你的组织配置了 sso，则可直接使用 <code>aws configure sso</code> 来配置 profile。通过配置环境变量来指定生效的 profile: <code>export AWS_PROFILE=Alliot-DevOps</code>。  </p>
<h3 id="使用Terraform创建S3-bucket"><a href="#使用Terraform创建S3-bucket" class="headerlink" title="使用Terraform创建S3 bucket"></a>使用Terraform创建S3 bucket</h3><h4 id="创建s3-bucket-module"><a href="#创建s3-bucket-module" class="headerlink" title="创建s3 bucket module"></a>创建s3 bucket module</h4><p>　　创建名为 s3 的文件夹：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir s3</span><br></pre></td></tr></table></figure>
<p>　　接下来我们会创建两个 tf 文件，分别为： <code>bucket.tf</code> 与 <code>var.tf</code>。  </p>
<h4 id="定义bucket"><a href="#定义bucket" class="headerlink" title="定义bucket"></a>定义bucket</h4><p>编辑 <code>bucket.tf</code>:  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">resource &quot;aws_s3_bucket&quot; &quot;example&quot; &#123;     </span><br><span class="line">    bucket = &quot;$&#123;var.bucket_name&#125;&quot;     # 引用接下来var.tf内定义的变量 </span><br><span class="line">    acl = &quot;$&#123;var.acl_value&#125;&quot;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h4><p>　　这里我们通过编辑 <code>var.tf</code> 来为上面的 bucket.tf 定义变量： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">variable &quot;bucket_name&quot; &#123;&#125; </span><br><span class="line"></span><br><span class="line">variable &quot;acl_value&quot; &#123;</span><br><span class="line">    default = &quot;private&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>　　至此， s3 module 已经定义完成。下面我们开始编写配置。  </p>
<h4 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h4><p><code>cd ..</code> 去到 <code>s3</code> 的上层目录，创建 <code>main.tf</code> 主配置：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">provider &quot;aws&quot; &#123;</span><br><span class="line">    access_key = &quot;$&#123;var.aws_access_key&#125;&quot;   # 引用变量中AWS的access key</span><br><span class="line">    secret_key = &quot;$&#123;var.aws_secret_key&#125;&quot;   # 引用变量中AWS的secret key</span><br><span class="line">    token = &quot;$&#123;var.aws_session_token&#125;&quot;     # 引用变量中AWS的session token(可选)</span><br><span class="line">    region = &quot;$&#123;var.region&#125;&quot;               # 引用变量中AWS的可用区</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module &quot;s3&quot; &#123;</span><br><span class="line">    source = &quot;./s3&quot;</span><br><span class="line">    bucket_name = &quot;fortest&quot;                # bucket名需要唯一，不包含大写字母与&quot;_&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>添加 <code>variable.tf</code>：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">variable &quot;aws_access_key&quot; &#123;</span><br><span class="line">    default = &quot;xxxxxMOxxx2&quot;    # access key </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">variable &quot;aws_secret_key&quot; &#123;</span><br><span class="line">    default = &quot;xxxxxxx&quot;        # secret key</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">variable &quot;aws_session_token&quot; &#123;</span><br><span class="line">    default = &quot;xxx&quot;            # session token </span><br><span class="line">&#125;  </span><br><span class="line">variable &quot;region&quot; &#123;</span><br><span class="line">    default = &quot;ap-southeast-1&quot; # 可用区  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="执行-Terraform"><a href="#执行-Terraform" class="headerlink" title="执行 Terraform"></a>执行 Terraform</h3><p>　　需要确保当前环境已经安装了 Terraform，如果没有的话，直接按照 <a href="https://www.terraform.io/downloads">Terraform官方文档</a> 来安装即可。<br>Notice: 后文步骤均在 <code>s3</code> 目录的同级下执行（即 s3 目录内的上一级路径）。</p>
<h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化，过程中会下载modules依赖等</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">terraform init</span></span><br><span class="line"></span><br><span class="line">Initializing modules...</span><br><span class="line"></span><br><span class="line">Initializing the backend...</span><br><span class="line"></span><br><span class="line">Initializing provider plugins...</span><br><span class="line">- Finding latest version of hashicorp/aws...</span><br><span class="line">- Installing hashicorp/aws v4.12.1...</span><br><span class="line">- Installed hashicorp/aws v4.12.1 (signed by HashiCorp)</span><br><span class="line"></span><br><span class="line">Terraform has created a lock file .terraform.lock.hcl to record the provider</span><br><span class="line">selections it made above. Include this file in your version control repository</span><br><span class="line">so that Terraform can guarantee to make the same selections by default when</span><br><span class="line">you run &quot;terraform init&quot; in the future.</span><br><span class="line"></span><br><span class="line">Terraform has been successfully initialized!</span><br><span class="line"></span><br><span class="line">You may now begin working with Terraform. Try running &quot;terraform plan&quot; to see</span><br><span class="line"></span><br><span class="line">variable &quot;aws_access_key&quot; &#123;</span><br><span class="line">any changes that are required for your infrastructure. All Terraform commands</span><br><span class="line">should now work.</span><br><span class="line"></span><br><span class="line">If you ever set or change modules or backend configuration for Terraform,</span><br><span class="line">rerun this command to reinitialize your working directory. If you forget, other</span><br><span class="line">commands will detect it and remind you to do so if necessary.</span><br></pre></td></tr></table></figure>

<h4 id="创建变更计划"><a href="#创建变更计划" class="headerlink" title="创建变更计划"></a>创建变更计划</h4><p>　　通过执行 <code>terraform plan</code> 来预览变更计划， 执行后返回类似如下的信息，供预览变更详情：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">terraform plan</span></span><br><span class="line">Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the</span><br><span class="line">following symbols:</span><br><span class="line">  + create</span><br><span class="line"></span><br><span class="line">Terraform will perform the following actions:</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">module.s3.aws_s3_bucket.example will be created</span></span><br><span class="line">  + resource &quot;aws_s3_bucket&quot; &quot;example&quot; &#123;</span><br><span class="line">      + acceleration_status         = (known after apply)</span><br><span class="line">      + acl                         = &quot;private&quot;</span><br><span class="line">      + arn                         = (known after apply)</span><br><span class="line">      + bucket                      = &quot;fortest&quot;</span><br><span class="line">      + bucket_domain_name          = (known after apply)</span><br><span class="line">      + bucket_regional_domain_name = (known after apply)</span><br><span class="line">      + force_destroy               = false</span><br><span class="line">      + hosted_zone_id              = (known after apply)</span><br><span class="line">      + id                          = (known after apply)</span><br><span class="line">      + object_lock_enabled         = (known after apply)</span><br><span class="line">      + policy                      = (known after apply)</span><br><span class="line">      + region                      = (known after apply)</span><br><span class="line">      + request_payer               = (known after apply)</span><br><span class="line">      + tags_all                    = (known after apply)</span><br><span class="line">      + website_domain              = (known after apply)</span><br><span class="line">      + website_endpoint            = (known after apply)</span><br><span class="line"></span><br><span class="line">      + cors_rule &#123;</span><br><span class="line">          + allowed_headers = (known after apply)</span><br><span class="line">          + allowed_methods = (known after apply)</span><br><span class="line">          + allowed_origins = (known after apply)</span><br><span class="line">          + expose_headers  = (known after apply)</span><br><span class="line">          + max_age_seconds = (known after apply)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      + grant &#123;</span><br><span class="line">          + id          = (known after apply)</span><br><span class="line">          + permissions = (known after apply)</span><br><span class="line">          + type        = (known after apply)</span><br><span class="line">          + uri         = (known after apply)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      + lifecycle_rule &#123;</span><br><span class="line">          + abort_incomplete_multipart_upload_days = (known after apply)</span><br><span class="line">          + enabled                                = (known after apply)</span><br><span class="line">          + id                                     = (known after apply)</span><br><span class="line">          + prefix                                 = (known after apply)</span><br><span class="line">          + tags                                   = (known after apply)</span><br><span class="line"></span><br><span class="line">          + expiration &#123;</span><br><span class="line">              + date                         = (known after apply)</span><br><span class="line">              + days                         = (known after apply)</span><br><span class="line">              + expired_object_delete_marker = (known after apply)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">          + noncurrent_version_expiration &#123;</span><br><span class="line">              + days = (known after apply)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">          + noncurrent_version_transition &#123;</span><br><span class="line">              + days          = (known after apply)</span><br><span class="line">              + storage_class = (known after apply)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">          + transition &#123;</span><br><span class="line">              + date          = (known after apply)</span><br><span class="line">              + days          = (known after apply)</span><br><span class="line">              + storage_class = (known after apply)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      + logging &#123;</span><br><span class="line">          + target_bucket = (known after apply)</span><br><span class="line">          + target_prefix = (known after apply)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      + object_lock_configuration &#123;</span><br><span class="line">          + object_lock_enabled = (known after apply)</span><br><span class="line"></span><br><span class="line">          + rule &#123;</span><br><span class="line">              + default_retention &#123;</span><br><span class="line">                  + days  = (known after apply)</span><br><span class="line">                  + mode  = (known after apply)</span><br><span class="line">                  + years = (known after apply)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      + replication_configuration &#123;</span><br><span class="line">          + role = (known after apply)</span><br><span class="line"></span><br><span class="line">          + rules &#123;</span><br><span class="line">              + delete_marker_replication_status = (known after apply)</span><br><span class="line">              + id                               = (known after apply)</span><br><span class="line">              + prefix                           = (known after apply)</span><br><span class="line">              + priority                         = (known after apply)</span><br><span class="line">              + status                           = (known after apply)</span><br><span class="line"></span><br><span class="line">              + destination &#123;</span><br><span class="line">                  + account_id         = (known after apply)</span><br><span class="line">                  + bucket             = (known after apply)</span><br><span class="line">                  + replica_kms_key_id = (known after apply)</span><br><span class="line">                  + storage_class      = (known after apply)</span><br><span class="line"></span><br><span class="line">                  + access_control_translation &#123;</span><br><span class="line">                      + owner = (known after apply)</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                  + metrics &#123;</span><br><span class="line">                      + minutes = (known after apply)</span><br><span class="line">                      + status  = (known after apply)</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                  + replication_time &#123;</span><br><span class="line">                      + minutes = (known after apply)</span><br><span class="line">                      + status  = (known after apply)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">              + filter &#123;</span><br><span class="line">                  + prefix = (known after apply)</span><br><span class="line">                  + tags   = (known after apply)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">              + source_selection_criteria &#123;</span><br><span class="line">                  + sse_kms_encrypted_objects &#123;</span><br><span class="line">                      + enabled = (known after apply)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      + server_side_encryption_configuration &#123;</span><br><span class="line">          + rule &#123;</span><br><span class="line">              + bucket_key_enabled = (known after apply)</span><br><span class="line"></span><br><span class="line">              + apply_server_side_encryption_by_default &#123;</span><br><span class="line">                  + kms_master_key_id = (known after apply)</span><br><span class="line">                  + sse_algorithm     = (known after apply)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      + versioning &#123;</span><br><span class="line">          + enabled    = (known after apply)</span><br><span class="line">          + mfa_delete = (known after apply)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      + website &#123;</span><br><span class="line">          + error_document           = (known after apply)</span><br><span class="line">          + index_document           = (known after apply)</span><br><span class="line">          + redirect_all_requests_to = (known after apply)</span><br><span class="line">          + routing_rules            = (known after apply)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">Plan: 1 to add, 0 to change, 0 to destroy.</span><br><span class="line">╷</span><br><span class="line">│ Warning: Argument is deprecated</span><br><span class="line">│</span><br><span class="line">│   with module.s3.aws_s3_bucket.example,</span><br><span class="line">│   on .terraform/modules/s3/bucket.tf line 3, in resource &quot;aws_s3_bucket&quot; &quot;example&quot;:</span><br><span class="line">│    3:     acl = &quot;$&#123;var.acl_value&#125;&quot;</span><br><span class="line">│</span><br><span class="line">│ Use the aws_s3_bucket_acl resource instead</span><br><span class="line">│</span><br><span class="line">│ (and one more similar warning elsewhere)</span><br><span class="line">╵</span><br><span class="line"></span><br><span class="line">───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line"></span><br><span class="line">Note: You didn&#x27;t use the -out option to save this plan, so Terraform can&#x27;t guarantee to take exactly these actions if</span><br><span class="line">you run &quot;terraform apply&quot; now.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="应用变更"><a href="#应用变更" class="headerlink" title="应用变更"></a>应用变更</h4><p>　　执行 <code>terraform apply</code>，即可将变更应用（即在ap-southeast-1可用区创建一个名为 <code>fortest</code> 的 s3 bucket ）<br>期间会让你输入 “yes” 进行确认应用变更。<br>之后我们通过控制台即可看到 s3 bucket 按照我们的预期创建好了。  </p>
<h4 id="销毁"><a href="#销毁" class="headerlink" title="销毁"></a>销毁</h4><p>　　由于是测试，创建完成后需要销毁实例，直接通过 <code>terraform destroy</code> 并输入 “yes” 确认即可完成实例的销毁。  </p>
<h4 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h4><p><a href="https://www.terraform.io/language">Terraform Document</a> ： 尽量阅读阅读英文官方文档。<br><a href="https://lonegunmanb.github.io/introduction-terraform/">Terraform中文指南</a>  </p>
]]></content>
      <tags>
        <tag>IaC</tag>
        <tag>Terraform</tag>
        <tag>AWS</tag>
      </tags>
  </entry>
  <entry>
    <title>Terraform启用provider缓存</title>
    <url>//post/terraform-provider-cache.html</url>
    <content><![CDATA[<p>　　我们在开始一个 Terraform 工程项目的时候，首先要做的就是 <code>terraform init</code>， 这个动作会在当前工作目录下创建 <code>.terraform</code> 目录，并联网下载项目所需要的 <code>provider</code> 到该目录下。 即便是多个项目使用的是同样的 <code>provider</code>，但每个工程项目仍然都有自己单独的 <code>.terraform</code>, 这不仅仅会浪费磁盘空间，还会花费很多不必要的时间去等待联网下载 <code>provider</code>，好在 Terraform 官方为我们提供了缓存目录。<span id="more"></span>  </p>
<h3 id="配置文件方式（推荐）"><a href="#配置文件方式（推荐）" class="headerlink" title="配置文件方式（推荐）"></a>配置文件方式（推荐）</h3><p>　　Terraform 和其他诸多命令行工具一样，也可以拥有用户级的配置文件（类似 <code>.vimrc</code>, <code>.npmrc</code>, <code>.zshrc</code> 等），Terraform 的配置文件可以用来定义凭证，provider 缓存目录等。  </p>
<p>Windows 下，该文件必须位于 <code>%APPDATA%</code> 下，并被命名为 <code>terraform.rc</code>。<br>macOS 与 Linux 下，该文件位于用户家目录<code>~</code> 下，命名为 <code>.terraformrc</code>。<br>这里以 Linux 为例：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">缓存目录需要提前创建，terraform 不会帮我们创建</span></span><br><span class="line">mkdir -p mkdir -p ~/.terraform.d/plugin-cache</span><br><span class="line">vim ~/.terrafromrc  </span><br></pre></td></tr></table></figure>
<p>内容为：  </p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">plugin_cache_dir</span>   = <span class="string">&quot;$HOME/.terraform.d/plugin-cache&quot;</span></span><br><span class="line"><span class="attr">disable_checkpoint</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>这样配置后，每次 <code>terraform init</code> 都会先去缓存目录下寻找是否存在 <code>provider</code> 的缓存。极大的加速了 <code>init</code> 的过程。  </p>
<h3 id="环境变量方式-不推荐"><a href="#环境变量方式-不推荐" class="headerlink" title="环境变量方式(不推荐)"></a>环境变量方式(不推荐)</h3><p>　　同样的，我们可以通过环境变量临时为 Terraform 指定 <code>provider</code> 缓存：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export TF_PLUGIN_CACHE_DIR=&quot;$HOME/.terraform.d/plugin-cache&quot;</span><br></pre></td></tr></table></figure>

<h3 id="文档链接"><a href="#文档链接" class="headerlink" title="文档链接"></a>文档链接</h3><p><a href="https://www.terraform.io/cli/config/config-file#provider-plugin-cache">CLI Configuration File (.terraformrc or terraform.rc)</a>  </p>
]]></content>
      <tags>
        <tag>IaC</tag>
        <tag>Terraform</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows批处理操作注册表与组策略</title>
    <url>//post/windows-gpedit-regedit.html</url>
    <content><![CDATA[<p>　　最近需要写一些 Windows 相关的安全加固脚本，Alliot 批处理写的不多，在这过程中遇到了一些小坑，本文对此做一些记录。<span id="more"></span></p>
<h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><h4 id="批处理"><a href="#批处理" class="headerlink" title="批处理"></a>批处理</h4><p>　　编码一直是个遭天杀的东西，Windows 下的批处理在包含中文字符的时候，应该使用 ANSI 的编码，编码字符集选择中文 - GB2312(Simplified)，否则在运行的时候会出现乱码的情况。  </p>
<h4 id="inf编码"><a href="#inf编码" class="headerlink" title=".inf编码"></a>.inf编码</h4><p>　　与上面不同，组策略导出的 .inf 文件的编码为 Unicode(UTF-16)LE带签名，而不是 UTF-8。否则通过导入 .inf 配置文件来配置组策略的时候会出现失败或不生效的情况。  </p>
<h3 id="注册表与组策略"><a href="#注册表与组策略" class="headerlink" title="注册表与组策略"></a>注册表与组策略</h3><p>　　先来看二者的定义：注册表(registry)是 Windows 下储存系统与应用程序配置设置信息的数据库；组策略(Group Policy)是用来定义并控制程序、网络资源及操作系统行为的主要工具。其实说白了就是 Windows 大部分的系统、软件配置，是通过操作注册表来实现的，但是注册表不是很方便阅读，就出现了组策略这个东西，绝大部分的组策略都有相对应的注册表键值。  </p>
<h4 id="注册表操作"><a href="#注册表操作" class="headerlink" title="注册表操作"></a>注册表操作</h4><p>　　在 “HKEY_CURRENT_USER\Control Panel\Desktop” 下添加一个类型为 “REG_SZ” 的ScreenSaveActive”  注册表，数值为 “1”（存在则修改）：  </p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">reg add &quot;HKEY_CURRENT_USER\Control Panel\Desktop&quot; /v &quot;ScreenSaveActive&quot; /t REG_SZ /d &quot;<span class="number">1</span>&quot; /f  </span><br></pre></td></tr></table></figure>
<p>其中 “HKEY_CURRENT_USER\Control Panel\Desktop” 表示注册表路径，”&#x2F;v” 表示注册表 <code>Value</code>（名称），”&#x2F;t” 表示类型，”&#x2F;d” 表示数值，”&#x2F;f” 表示强制。<br>每个注册表对应的含义到哪里找呢？<br><a href="https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2003/cc787364%28v=ws.10%29">微软的文档</a>  </p>
<h4 id="组策略操作"><a href="#组策略操作" class="headerlink" title="组策略操作"></a>组策略操作</h4><p>　　批处理对组策略修改，推荐使用将现有的策略导出后进行修改。  </p>
<h5 id="导出现有的组策略"><a href="#导出现有的组策略" class="headerlink" title="导出现有的组策略"></a>导出现有的组策略</h5><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">secedit /export /cfg gp.inf</span><br></pre></td></tr></table></figure>
<h5 id="组策略-inf-语法检查"><a href="#组策略-inf-语法检查" class="headerlink" title="组策略 .inf 语法检查"></a>组策略 .inf 语法检查</h5><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">组策略 .inf 语法检查</span><br></pre></td></tr></table></figure>
<h5 id="导入组策略（这里要注意-inf-文件的编码）"><a href="#导入组策略（这里要注意-inf-文件的编码）" class="headerlink" title="导入组策略（这里要注意 .inf 文件的编码）"></a>导入组策略（这里要注意 .inf 文件的编码）</h5><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">secedit /configure /db <span class="number">1</span>.sdb /cfg <span class="number">1</span>gp.inf /log <span class="number">1</span>.log /quiet</span><br></pre></td></tr></table></figure>
<p>其中 “&#x2F;db” 指定用来执行安全性配置的数据库，”&#x2F;cfg” 指定在配置次计算机前要导入到数据库的安全性模板，”&#x2F;log” 指定要记录配置操作状态的文件，”&#x2F;quiet” 指定配置操作的执行不需要提示用户进行任何确认。  </p>
<h5 id="强制刷新组策略"><a href="#强制刷新组策略" class="headerlink" title="强制刷新组策略"></a>强制刷新组策略</h5><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">gpupdate /force</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>asdf管理多版本Terraform</title>
    <url>//post/asdf-multi-version-terraform.html</url>
    <content><![CDATA[<p>　　<a href="https://github.com/asdf-vm/asdf">asdf-vm</a> 是一个管理多版本运行环境的 CLI 工具，有点类似多 <code>nodejs</code> 版本管理工具 <code>n</code>，相比其他类型的工具，<code>asdf-vm</code> 以插件形式支持了众多的语言与开发工具，支持全局配置，同时也支持通过 <code>.tool-versions</code> 配置文件以项目维度来管理工具版本（类似前端项目下的 <code>packages.json</code>）。我们在使用 Terraform 的过程中，也经常遇到要切换不同 <code>terraform</code> 版本的情况，<code>asdf-vm</code> 就能够满足我们的需求。<span id="more"></span>   </p>
<h3 id="安装asdf"><a href="#安装asdf" class="headerlink" title="安装asdf"></a>安装asdf</h3><p>　　需要 <code>curl</code> 与 <code>git</code> 依赖：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">redhat/centos</span></span><br><span class="line">yum install curl git</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">debian/Ubuntu</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">apt install curl git</span></span><br><span class="line"></span><br><span class="line">git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.10.0</span><br><span class="line"></span><br><span class="line">echo &#x27;. $HOME/.asdf/asdf.sh&#x27; &gt;&gt; ~/.bashrc</span><br><span class="line">echo &#x27;. $HOME/.asdf/completions/asdf.bash&#x27; &gt;&gt; ~/.bashrc # 自动补全</span><br></pre></td></tr></table></figure>


<h3 id="安装asdf-plugin"><a href="#安装asdf-plugin" class="headerlink" title="安装asdf plugin"></a>安装asdf plugin</h3><p>　　Hashicorp 的 <code>asdf</code> 插件仓库地址： <a href="https://github.com/asdf-community/asdf-hashicorp">https://github.com/asdf-community/asdf-hashicorp</a><br>　　更多其他插件可以从官方仓库查找： <a href="https://github.com/asdf-vm/asdf-plugins">https://github.com/asdf-vm/asdf-plugins</a>  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">按需添加插件：</span>   </span><br><span class="line">asdf plugin-add boundary https://github.com/asdf-community/asdf-hashicorp.git</span><br><span class="line">asdf plugin-add consul https://github.com/asdf-community/asdf-hashicorp.git</span><br><span class="line">asdf plugin-add levant https://github.com/asdf-community/asdf-hashicorp.git</span><br><span class="line">asdf plugin-add nomad https://github.com/asdf-community/asdf-hashicorp.git</span><br><span class="line">asdf plugin-add packer https://github.com/asdf-community/asdf-hashicorp.git</span><br><span class="line">asdf plugin-add sentinel https://github.com/asdf-community/asdf-hashicorp.git</span><br><span class="line">asdf plugin-add serf https://github.com/asdf-community/asdf-hashicorp.git</span><br><span class="line">asdf plugin-add terraform https://github.com/asdf-community/asdf-hashicorp.git</span><br><span class="line">asdf plugin-add terraform-ls https://github.com/asdf-community/asdf-hashicorp.git</span><br><span class="line">asdf plugin-add tfc-agent https://github.com/asdf-community/asdf-hashicorp.git</span><br><span class="line">asdf plugin-add vault https://github.com/asdf-community/asdf-hashicorp.git</span><br><span class="line">asdf plugin-add waypoint https://github.com/asdf-community/asdf-hashicorp.git</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">我们本文只需要terraform：</span>  </span><br><span class="line">asdf plugin-add terraform https://github.com/asdf-community/asdf-hashicorp.git</span><br></pre></td></tr></table></figure>

<p>假设你是在一个已经存在 <code>.tools-version</code> 文件的仓库下，而你又没有安装过那些 <code>asdf plugin</code>，那么你可以直接执行如下命令来安装 <code>.tools-version</code> 中依赖的插件：  </p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="keyword">read</span> <span class="keyword">plugin</span> <span class="keyword">version</span>; <span class="keyword">do</span> asdf <span class="keyword">plugin</span>-add <span class="string">&quot;$&#123;plugin&#125;&quot;</span>; done &lt; .tool-versions</span><br></pre></td></tr></table></figure>
<p>之后执行以下命令安装 <code>.tools-version</code> 中的所有工具即可:  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">asdf install </span><br></pre></td></tr></table></figure>


<h3 id="安装指定版本Terraform"><a href="#安装指定版本Terraform" class="headerlink" title="安装指定版本Terraform"></a>安装指定版本Terraform</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出可用terraform版本</span>  </span><br><span class="line">asdf list-all terraform  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装指定版本</span></span><br><span class="line">asdf install terraform 0.11.14</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置全局版本, 该参数会在当前用户HOME下生成 .tool-version 文件来标识版本</span>  </span><br><span class="line">asdf global terraform 0.12.5</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果只是为了在某路径下使用特定版本，可以通过<span class="built_in">local</span>参数来指定，该参数会在当前目录下生成 .tool-version</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">asdf <span class="built_in">local</span> terraform 0.12.5</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果项目下已有 .tool-version，可以直接执行 asdf install来自动安装指定版本的工具</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果只是为了当前shell下临时切换，可以通过shell参数来指定</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">asdf shell terraform 0.12.5</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前版本（可能需要你重新登录终端生效）</span>  </span><br><span class="line">asdf current  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载asdf指定的terraform版本  (区别于remove，uninstall仅仅是去掉环境变量，让你可以用其他途径安装的terraform)</span></span><br><span class="line">asdf uninstall terraform </span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Terraform</tag>
        <tag>折腾</tag>
      </tags>
  </entry>
  <entry>
    <title>WSL安装与ssh配置</title>
    <url>//post/install-wsl-ssh.html</url>
    <content><![CDATA[<p>　　本文记录了 WSL(Windows Subsystem for Linux) 的安装方法与 <code>ssh</code> 连接的配置。<span id="more"></span>  </p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>　　右键开始菜单，选择 <code>Windows powershell(管理员)</code>,输入：  </p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux</span></span><br></pre></td></tr></table></figure>
<p>回车，输入 <code>y</code> 回车，自动重启以完成启动Windows Subsystem for Linux功能  </p>
<h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>　　打开应用商店，搜索 WSL，选择你喜欢的版本，alliot 用的 Ubuntu。  </p>
<h2 id="配置ssh"><a href="#配置ssh" class="headerlink" title="配置ssh"></a>配置ssh</h2><p>　　由于 Windows 下 22 端口被 <code>SSH Server For Windows</code> 占用，这里我们需要将 <code>sshd</code> 的默认端口修改一下。  </p>
<h3 id="第一步-1"><a href="#第一步-1" class="headerlink" title="第一步"></a>第一步</h3><p>卸载原本的 <code>openssh</code>:  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove openssh</span><br></pre></td></tr></table></figure>
<p>重新安装:  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install openssh</span><br></pre></td></tr></table></figure>
<h3 id="第二步-1"><a href="#第二步-1" class="headerlink" title="第二步"></a>第二步</h3><p>　　修改 <code>sshd</code> 配置文件:  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>
<p>将 <code>Port 22</code> 改为你想要的端口。(默认是注释掉的)，<code>PasswordAuthentication no</code>改为 <code>PasswordAuthentication yes</code> 以支持密码登录。<br>重启 <code>ssh</code> 服务:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo service ssh restart</span><br></pre></td></tr></table></figure>
<p>即可。<br>如果想用密钥进行登录，参考<a href="/post/centos-use-ssh-keygen.html">CentOS启用ssh密钥登录</a></p>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><h4 id="使用-apt-install-openssh-server-的时候报错："><a href="#使用-apt-install-openssh-server-的时候报错：" class="headerlink" title="使用 apt install openssh-server 的时候报错："></a>使用 <code>apt install openssh-server</code> 的时候报错：</h4><p>“E: Could not read response to hello message from hook [ ! -f &#x2F;usr&#x2F;bin&#x2F;snap ] || &#x2F;usr&#x2F;bin&#x2F;snap advise-snap –from-apt 2&gt;&#x2F;dev&#x2F;null || true: Success”  </p>
<h5 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf /etc/apt/apt.conf.d/20snapd.conf  </span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Y7000换72色域屏</title>
    <url>//post/replace-y7000-screen-to-72NTSC.html</url>
    <content><![CDATA[<p>　　看了同事新提的小米 Pro 的屏幕之后，我决定给我的小黑（拯救者 Y7000）乞丐版换上 72 色域的屏幕，整个步骤下来 200 出头。<span id="more"></span>  </p>
<h3 id="屏幕选型"><a href="#屏幕选型" class="headerlink" title="屏幕选型"></a>屏幕选型</h3><p>　　通过 AIDA64 查看到原本的屏幕为京东方的 NV156FHM-N48，接口为 eDP 30pin，通过屏库可以看到具体的接口与其他参数信息。<a href="http://www.panelook.cn/NV156FHM-N48_BOE_15.6_LCM_overview_cn_30192.html#NV156FHM-N48%E6%95%B0%E6%8D%AE%E6%89%8B%E5%86%8C">NV156FHM-N48</a><br>　　在屏库找到能够使用的三款屏幕为：NV156FHM-N61、N156HCE-EN1、B156HAN09.0，屏库中三款屏幕的具体参数对比，<a href="http://www.panelook.cn/modelcompare_cn.php?ids=31631,29824,30969,37729&del_id=31631">液晶参数比较</a>，三款屏幕中，友达那款素质最好，不过据说有驱动方面的问题，不能调节亮度，而且是镜面屏，群创的其实算是三款中更适合 Y7000的，不过，Y7000 高色域版本的一般用的 NV156FHM-N61 这款，恰好咸鱼见到一块成色不错的拆机，200 出头，便秒了下来，虽然这款响应时间很慢，但是也算中规中矩，作为垃圾佬，够用就好。  </p>
<h3 id="换屏"><a href="#换屏" class="headerlink" title="换屏"></a>换屏</h3><p>用到的工具：  </p>
<ul>
<li>电热吹风机  </li>
<li>撬棒  </li>
<li>牙签  </li>
<li>双面胶  </li>
<li>静电手环</li>
</ul>
<h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>　　首要的是将机器彻底关机，不关机容易翻车烧坏。Y7000 的 A、B 面为大部分胶粘与少量卡扣，使用吹风机开到二挡对屏幕边框周围吹到烫手，用指甲从屏幕里框向外面将 B 面小心抠出：<img data-src="https://static.iots.vip/replace-y7000-screen-1.jpg" alt="replace-y7000-screen-1.jpg"><br>　　<br>　　之后继续将 A 面距离边框 4CM 处也吹到烫手，屏幕用胶粘的很牢固，我旧屏下面还有用，所以很小心，边使用吹风机对连接处吹边用撬棒一点点蹭开，胶与屏幕连接处太多为了方面看清，我将机器暂时点亮了，利用屏幕背光来看哪些地方有胶没蹭掉：<img data-src="https://static.iots.vip/replace-y7000-screen-2.jpg" alt="replace-y7000-screen-2.jpg">  <img data-src="https://static.iots.vip/replace-y7000-screen-3.jpg" alt="replace-y7000-screen-3.jpg">  </p>
<h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>　　将屏幕置于键盘上，撕开排线的胶带，用牙签将排线处的小卡扣挑出来，拔出排线：<br>　　<img data-src="https://static.iots.vip/replace-y7000-screen-4.jpg" alt="replace-y7000-screen-4.jpg"><br>　　<img data-src="https://static.iots.vip/replace-y7000-screen-5.jpg" alt="replace-y7000-screen-5.jpg"><br>　　<img data-src="https://static.iots.vip/replace-y7000-screen-6.jpg" alt="replace-y7000-screen-6.jpg">   </p>
<h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h4><p>　　确认机器彻底关机后，替换新的屏幕上去，开机确认点亮后，将屏幕边缘用双面胶粘上两层便可以装上 B 面了。<img data-src="https://static.iots.vip/replace-y7000-screen-7.png" alt="replace-y7000-screen-7.png">   </p>
<h3 id="旧屏利用"><a href="#旧屏利用" class="headerlink" title="旧屏利用"></a>旧屏利用</h3><p>　　一直想要个竖屏，不过之前放学校的丢家里用了，快递来快递去不方便，想着将拆下来的显示屏 DIY 个便携显示器。  马云家 eDP 的驱动板也不贵，双 HDML、USB 供电的超薄驱动板不到 100 块，配个铁壳一套下来不到 200 块，虽然这些东西溢价严重，全部出自深圳，成本可能不到 20 块，但如果有这个需求，还是比那些奸商动辄大几百的便携显示器整机划算多了。<br>　　安装非常简单，这里就不啰嗦了，效果图如下：<br><img data-src="https://static.iots.vip/replace-y7000-screen-8.jpg" alt="DIY便携显示器"><br>当然，也可以将旧屏卖给二手屏商，大概 100 块。  </p>
]]></content>
      <tags>
        <tag>折腾</tag>
        <tag>硬件</tag>
      </tags>
  </entry>
  <entry>
    <title>filezilla-server批量创建用户</title>
    <url>//post/batch-create-filezilla-server-ftp-user.html</url>
    <content><![CDATA[<p>　　有一个比较奇怪的需求，需要给 FileZilla-server 新建大量的 ftp 用户，为其配置随机密码，指定单独家目录与用户组等。 <span id="more"></span>  </p>
<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>　　查看文档后发现 FileZilla-server 官方没有提供用户管理的 api，所有的用户配置存储在  <code>C:\ProgramData\filezilla-server\users.xml</code> 下(其他平台可通过管理面板的日志查看到配置路径)。</p>
<h3 id="查看配置文件"><a href="#查看配置文件" class="headerlink" title="查看配置文件"></a>查看配置文件</h3><p>我们先看看配置文件的内容：  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> standalone=<span class="string">&quot;yes&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filezilla</span> <span class="attr">xmlns:fz</span>=<span class="string">&quot;https://filezilla-project.org/&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://filezilla-project.org/&quot;</span> <span class="attr">fz:product_flavour</span>=<span class="string">&quot;standard&quot;</span> <span class="attr">fz:product_version</span>=<span class="string">&quot;1.5.1&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">default_impersonator</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">enabled</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">default_impersonator</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">&quot;<span class="symbol">&amp;lt;</span>system user&gt;&quot;</span> <span class="attr">enabled</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mount_point</span> <span class="attr">tvfs_path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">native_path</span>=<span class="string">&quot;:h&quot;</span> <span class="attr">access</span>=<span class="string">&quot;1&quot;</span> <span class="attr">recursive</span>=<span class="string">&quot;2&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">rate_limits</span> <span class="attr">inbound</span>=<span class="string">&quot;unlimited&quot;</span> <span class="attr">outbound</span>=<span class="string">&quot;unlimited&quot;</span> <span class="attr">session_inbound</span>=<span class="string">&quot;unlimited&quot;</span> <span class="attr">session_outbound</span>=<span class="string">&quot;unlimited&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">allowed_ips</span>&gt;</span><span class="tag">&lt;/<span class="name">allowed_ips</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">disallowed_ips</span>&gt;</span><span class="tag">&lt;/<span class="name">disallowed_ips</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">description</span>&gt;</span>This user can impersonate any system user.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">impersonation</span> <span class="attr">login_only</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">&quot;alliot&quot;</span> <span class="attr">enabled</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mount_point</span> <span class="attr">tvfs_path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">native_path</span>=<span class="string">&quot;D:\FTP\alliot&quot;</span> <span class="attr">access</span>=<span class="string">&quot;1&quot;</span> <span class="attr">recursive</span>=<span class="string">&quot;2&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">rate_limits</span> <span class="attr">inbound</span>=<span class="string">&quot;unlimited&quot;</span> <span class="attr">outbound</span>=<span class="string">&quot;unlimited&quot;</span> <span class="attr">session_inbound</span>=<span class="string">&quot;unlimited&quot;</span> <span class="attr">session_outbound</span>=<span class="string">&quot;unlimited&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">allowed_ips</span>&gt;</span><span class="tag">&lt;/<span class="name">allowed_ips</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">disallowed_ips</span>&gt;</span><span class="tag">&lt;/<span class="name">disallowed_ips</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">group</span>&gt;</span>SH<span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">password</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">hash</span>&gt;</span>40yaXepMZ2hxjZUrVHYVfM15C2owZaJpL+lDOh7cqE8<span class="tag">&lt;/<span class="name">hash</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">salt</span>&gt;</span>5uNVtGVj9mLMAPQXzmMIHsZQrfS4mOBSv+3e6StrELg<span class="tag">&lt;/<span class="name">salt</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">iterations</span>&gt;</span>100000<span class="tag">&lt;/<span class="name">iterations</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们可以根据字段大致猜出:   </p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">用户名： alliot  </span><br><span class="line">密码： 未知，加密并且加盐过  </span><br><span class="line">挂载点: / -&gt; D:<span class="string">\FTP\alliot</span>  </span><br></pre></td></tr></table></figure>
<p>　　所以想要批量创建用户只需要构造这个 xml 配置文件，生成对应用户的 <code>&lt;user&gt;</code> 块即可。  </p>
<h4 id="密码字段怎样生成"><a href="#密码字段怎样生成" class="headerlink" title="密码字段怎样生成"></a>密码字段怎样生成</h4><p>　　找遍了 官方文档和 Google 也没能找到这个密码字段是怎样加密的。<br>好在找到论坛一篇关于直接调用 filezilla 的 <code>filezilla-server-crypt</code> 命令生成密码的 hash 与 salt 值的方法：<br><a href="https://forum.filezilla-project.org/viewtopic.php?f=6&t=54267&p=178461&hilit=Filezilla+server+crypt#p178461">How to import users from another FTP</a><br>课代表这里直接测试并提取了关键信息， 通过这样一条命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo [password] | /Applications/FileZilla\ Server.app/Contents/MacOS/filezilla-server-crypt [username]</span><br></pre></td></tr></table></figure>
<p>会返回类似这样的信息：  </p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">--username@<span class="attribute">index</span>=1 --username.<span class="attribute">hash</span>=dNFbyPBgME2jurr17VCv05JikQvsN/ERLpbzr+OCefM --username.<span class="attribute">salt</span>=lmIeMEo9ZDLQY7JiGzSCgHR838u4jeGDJig+Oe2iFdc --username.<span class="attribute">iterations</span>=100000</span><br></pre></td></tr></table></figure>
<p>那么答案就显而易见了。  </p>
<h3 id="又不是不能用"><a href="#又不是不能用" class="headerlink" title="又不是不能用"></a>又不是不能用</h3><p>当没法优雅的通过代码加密实现密码加密生成 hash 与 salt的时候，不如就简单粗暴的调用命令来生成吧。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import subprocess</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">def password_generator(username, password) -&gt; list:</span><br><span class="line">    timeout = 3</span><br><span class="line">    </span><br><span class="line">    # 注意替换 filezilla-server-crypy 的路径（我这里是macOS）</span><br><span class="line">    cmd = f&quot;echo &#123;password&#125; | /Applications/FileZilla\ Server.app/Contents/MacOS/filezilla-server-crypt &#123;username&#125;&quot;</span><br><span class="line">    print(cmd)</span><br><span class="line">    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True)</span><br><span class="line">    outs, errs = proc.communicate(timeout=timeout)</span><br><span class="line">    if proc.returncode != 0:</span><br><span class="line">        print(errs)</span><br><span class="line">        return [&quot;error&quot;]</span><br><span class="line">    else:</span><br><span class="line">        return [re.findall(r&quot;.hash=(.+?) &quot;, str(outs, encoding=&quot;utf-8&quot;))[0],</span><br><span class="line">            re.findall(r&quot;.salt=(.+?) &quot;, str(outs, encoding=&quot;utf-8&quot;))[0]]</span><br></pre></td></tr></table></figure>
<p>之后 xml 直接通过类似 jinja2 之类的模板生成即可。  </p>
<h3 id="为什么水一篇"><a href="#为什么水一篇" class="headerlink" title="为什么水一篇"></a>为什么水一篇</h3><p>　　主要是当时 Google 找了一大圈也没找到对应的方式，stackoverflow 与官方论坛也看到有类似的帖子未被回答与解决，耽误了挺多时间的。于是这里大致讲一下怎么达到目的，方便遇到同样问题的同学参考。（BTW：这上古时代的东西早该淘汰了） </p>
]]></content>
      <tags>
        <tag>折腾</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Xmind8 Pro激活方法及补丁下载</title>
    <url>//post/xmind8pro-crack.html</url>
    <content><![CDATA[<p>　　Xmind 是一个非常不错的思维导图软件，本文记录了 Xmind8 Pro 激活方法及补丁 XMindCrack.jar 的下载地址。<span id="more"></span><br>整理于 haotianyi 博客，步骤进行了简化与修改。</p>
<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>补丁与安装包  链接：<a href="https://pan.baidu.com/s/1FGCOeNBYCEzzk5ljy1UCjA">https://pan.baidu.com/s/1FGCOeNBYCEzzk5ljy1UCjA</a> 密码：c8c5 解压密码: <a href="http://www.iots.vip/">www.iots.vip</a><br>安装<code>xmind-8-update4-windows</code>安装包，推荐使用默认路径。将补丁<code>XMindCrack.jar</code>复制到 <code>Xmind</code> 的安装路径，默认安装路径为 <code>C:\Program Files (x86)\XMind</code>  </p>
<h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>打开安装路径，将 <code>XMind.ini</code> 使用记事本打开，如果你Xmind的安装路径自定义了（装到别的盘的），如我的是放在D:\XMind，那么请在最后面添加一行</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">-javaagent:D:<span class="regexp">/XMind/</span>XMindCrack.jar</span><br></pre></td></tr></table></figure>
<p>这里非常重要，特别注意斜杠别弄反了，如果修改错误，将无法启动 Xmind。  </p>
<h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>以管理员身份运行 <code>xmind.bat</code> 脚本即可(该脚本作用为追加 <code>0.0.0.0 www.xmind.net</code> 到本机 hosts 文件)。  </p>
<h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>断网并打开 XMind,在 “编辑-首选项” 中取消勾选 “启动时检查更新和消息” 以及 “发送用户数据” 确认保存后，在 “帮助-序列号” 中，随便输入一个邮箱地址和下面的序列号激活软件。序列号： </p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">XAka<span class="number">34</span>A<span class="number">2</span>rVRYJ<span class="number">4</span>XBIU<span class="number">35</span>UZMUEEF<span class="number">64</span>CMMIYZCK<span class="number">2</span>FZZUQ<span class="symbol">NODEKUHGJLFMSLIQMQUCUBXRENLK6</span><span class="symbol">NZL37</span>JXP<span class="number">4</span>PZXQFILMQ<span class="number">2</span>R<span class="name">G5</span>R<span class="number">7</span><span class="name">G4</span>Q<span class="symbol">NDO3</span>PSOEUBOCDRYSSXZGRARV<span class="number">6</span>MGA<span class="number">33</span>T<span class="symbol">N2</span>AMUBHEL<span class="number">4</span>FXMWYTTJDEI<span class="symbol">NJXUAV4</span>BAYKBDCZQWVF<span class="number">3</span>LWYXSDCXY<span class="number">546</span>U<span class="number">3</span><span class="symbol">NBGOI3</span>ZPAP<span class="number">2</span>S<span class="meta">O3</span>CSQF<span class="symbol">NB7</span>VVIY<span class="number">123456789012345</span>   </span><br></pre></td></tr></table></figure>
<p>安装激活完成。   </p>
<p><del>2018年6月23日更新：</del><br>已收到声称是某公司的人发来的法务邮件，如果发现链接再次被取消分享，不用怀疑是谁干的~请回复补充链接<br>附上法务邮件截图与回复：<br><img data-src="https://static.iots.vip/%E9%A9%AC%E5%85%8B%E4%B8%81-%E5%AE%83%E7%9A%84%E6%9D%A5%E4%BF%A1.png" alt="死妈杰丁克"><br><img data-src="https://static.iots.vip/%E9%A9%AC%E5%85%8B%E4%B8%81-%E6%88%91%E7%9A%84%E5%9B%9E%E5%A4%8D.png" alt="xmind8pro破解"><br>同时补充几个链接：<br><a href="https://www.zhihu.com/question/60166627">如何看待某公司对于盗版疯狂封杀的态度? - 知乎</a><br><a href="https://52huameng.com/tucao/1100">对于某公司威胁删帖的回应</a><br><a href="http://www.ssdtop.com/thread-1315-1-1.html">8号站被“某公司狗 ”在百度搜索付费删收录 删关键词 </a>  </p>
<p><del>2018年9月19日更新</del><br>今天打开程序发现软件重新变为未激活的状态了，查看 hosts 正常，不知道是由于代理的锅还是什么，这里使用防火墙来阻止 Xmind 联网：<br>打开控制面板，点击其中的“系统与安全”；点击“Windows 防火墙”之后，打开“高级设置”；点击“出站规则”–新建规则；点击“程序”–浏览–找到 xmind 的路径。选择 <code>Xmind.exe</code>，勾选“阻止连接”，保存后，重新输入序列号，将邮箱换一下即可。  </p>
]]></content>
      <tags>
        <tag>折腾</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-NexT主题屏蔽畅言评论区广告</title>
    <url>//post/hide-changyan-ad.html</url>
    <content><![CDATA[<p>　　最近畅言评论区加入了一个很大一块的广告，我们可以通过一段css来屏蔽next主题下的畅言评论区广告。<span id="more"></span><br>　　代码来自@<a href="https://www.krnet.cc/html/article/3964.html">酷软资源网</a>    </p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>通过“transform”将畅言广告代码部分缩放至消失，利用“margin-top”将畅言广告占位移除视线。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>打开<code>~/themes/next/source/css/_schemes/Pisces(根据你的主题来决定)/_posts.styl</code>加入  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#feedAv</span>&#123; <span class="attribute">margin-top</span>: -<span class="number">250px</span><span class="meta">!important</span>;<span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0</span>);&#125;</span><br></pre></td></tr></table></figure>
<p>保存即可。<br>效果如图：<br>屏蔽前：<br><img data-src="https://static.iots.vip/%E5%B1%8F%E8%94%BD%E7%95%85%E8%A8%80%E5%B9%BF%E5%91%8A%E5%89%8D.png" alt="屏蔽畅言广告前"><br>屏蔽后：<br><img data-src="https://static.iots.vip/%E5%B1%8F%E8%94%BD%E7%95%85%E8%A8%80%E5%B9%BF%E5%91%8A%E5%90%8E.png" alt="屏蔽畅言广告后">  </p>
]]></content>
      <tags>
        <tag>折腾</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>eclipse下的Android开发环境搭建</title>
    <url>//post/eclipse-android-DE.html</url>
    <content><![CDATA[<p>　　最近因为一个项目需要用到这方面的开发环境，由于对Java一窍不通，Android开发更是不用说了。折腾这个开发环境就费了很多时间（很尴尬。。。），试过了网上许多教程，各种报错，这里将整个环境的配置做一个总结与梳理，希望能够帮到和我一样需要帮助的朋友。<span id="more"></span></p>
<h2 id="下载所需文件"><a href="#下载所需文件" class="headerlink" title="下载所需文件"></a>下载所需文件</h2><p>链接: <a href="https://pan.baidu.com/s/1bpGiiSn">https://pan.baidu.com/s/1bpGiiSn</a> 密码: 3k66<br>内含：  </p>
<ul>
<li>ADT-22.6.2  </li>
<li>jdk-8u20-windows-32位  </li>
<li>eclipse-jee-mars-1-win64位  </li>
<li>eclipse-jee-mars-2-win32位  </li>
<li>android-sdk-windows</li>
</ul>
<hr>
<ul>
<li>ADT是Android Development Tools(安卓开发工具)  </li>
<li>android-sdk是Android Software Development Kit(安卓软件开发工具包)  </li>
<li>eclipse是一个强大的IDE，拥有丰富的插件集可拓展，此文就是建立在此开发平台的基础下的。  </li>
<li>jdk是Java Development Kit(java开发工具包)关于jdk、jre、jvm的区别如下图所示：<br><img data-src="https://static.iots.vip/jdk-jre-jvm%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB.jpg" alt="jdk-jre-jvm之间的关系"></li>
</ul>
<h2 id="配置jdk"><a href="#配置jdk" class="headerlink" title="配置jdk"></a>配置jdk</h2><h3 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h3><p>右击安装包，以管理员身份运行，安装位置默认即可。(这个路径请复制下来，后面用得上)  </p>
<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>右键我的电脑——属性——高级系统设置——高级——环境变量，点击新建(如下图)<br><img data-src="https://static.iots.vip/jdk%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.jpg" alt="jdk环境变量"><br>保存<br>同样的方式，新建一个：<br>变量名：CLASSPATH<br>变量值：.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar;<br>注意：开头有”.”符号!<br>保存<br>在同一处地方找到Path值，选择编辑，<br>在变量值后追加：;%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;<br>(如下图)<br><img data-src="https://static.iots.vip/jdk-Path%E8%AE%BE%E7%BD%AE.jpg" alt="jdk-Path设置"><br>保存，确认<br>打开命令提示符(快捷键win+r然后输入cmd)，输入java -version 回车，出现以下则表示配置成功：<br><img data-src="https://static.iots.vip/jdk%E9%85%8D%E7%BD%AE%E6%88%90%E5%8A%9F.jpg" alt="jdk配置成功">  </p>
<h2 id="配置eclipse"><a href="#配置eclipse" class="headerlink" title="配置eclipse"></a>配置eclipse</h2><p>eclipse一般都是绿色版，无需安装，解压后双击eclipse即可运行。<br>启动时有个选择工作空间的操作，这个根据自己的需要设置，选择OK即进入IDE主界面，选择help——install new software，在弹出的窗口中选择：<br><img data-src="https://static.iots.vip/%E5%AE%89%E8%A3%85ADT.jpg" alt="安装ADT"><br>勾选Development Tools，选择next，在弹出的窗口中的右下角选择I accept …，然后finish，等待安装完成，一路的ok,yes，之后会重启eclipse,这时会有报错，内容是找不到SDK路径。这里暂且不管，后面步骤会进行配置的。均选择cancel,至此ADT安装成功。</p>
<h2 id="安装Android-SDK"><a href="#安装Android-SDK" class="headerlink" title="安装Android SDK"></a>安装Android SDK</h2><p>解压下载的Android SDK(文件较大，解压时间依电脑性能而定)，此包包含了Android2.1到4.4的sdk包(其实这些可以在线安装的，不过由于在天朝被墙了，挂上梯子也是很慢，所以此文采用离线安装的形式)，在eclipse菜单中选择Windows——preference——Android——browse，选择解压后Android SDK的路径，点击apply，OK即可。</p>
<h2 id="安装完成"><a href="#安装完成" class="headerlink" title="安装完成"></a>安装完成</h2><p>至此环境搭建已经完成，自行导入一个Android项目进行测试。</p>
<p>相关文章:<br><a href="https://www.iots.vip/post/java-1.html">解决eclipse安卓工程“The import org.apache.http.client cannot be resolved”等报错</a></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo文章密码访问的&quot;破解&quot;方法</title>
    <url>//post/hexo-password-crack.html</url>
    <content><![CDATA[<p>　　很多hexo用户都用到了js阻塞机制来实现文章密码访问，这里谈谈这种方式的不安全。<span id="more"></span></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　昨天突然想用博客来写写生活类的随笔，但是又想只让自己看到，设置个访问密码应该是个不错的选择，但是hexo生成的博客是纯静态的，没有WordPress等动态博客这么方便的设置密码。于是到网上找了一下，发现了一位网友利用js来对文章进行一个简单的加密访问。  原文在<a href="https://blog.paddings.cn/2016/12/01/blog/hexo-password/">这里</a>  或者直接看我搬运的一部分:<a href="https://www.iots.vip/post/hexo-build-to-optimize.html#%E6%96%87%E7%AB%A0%E5%AF%86%E7%A0%81">链接</a><br>　　可以看到，这种加密是利用js的阻塞机制:  </p>
<blockquote>
<p>当页面中有调用alert();函数的时候，整个页面会停止运行，直到你点击确定之后，页面的中的代码才会继续执行下去。我们这里需要的也是这样一个假象，阻止整个页面的渲染，直到你输入了正确的密码才能让页面继续渲染实际的文章。可是alert只有提醒的功能，没有输入的功能，所以这里要用到的是promt函数。  </p>
</blockquote>
<p>阻止页面的渲染(不是很懂js的我，表示这种思路很聪明哈)<br>　　但是转念一想，这种方法是不是太容易被”破解”了，通过阻止页面渲染来实现”加密”，不代表页面的源代码不能访问(毕竟这个script中的密码是以明文的形式写在源代码中间的)，这样的话我们是不是能够通过网页源代码来看到密码呢？  </p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>　　这里联想到Linux下的curl工具浏览网页是直接显示网页源代码的，于是直接通过  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -L www.iots.vip (已加密的文章地址) <span class="comment"># 这里的 -L 是解决部分网站 30X 跳转的问题的  </span></span><br></pre></td></tr></table></figure>
<p>回车换行查看<br><img data-src="https://static.iots.vip/hexo%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86%E8%AE%BF%E9%97%AE-1.png" alt="hexo文章加密访问-1"><br>可以看到密码以明文形式表示出来了。<br>当然，类似于chinaz等站长工具中的模拟蜘蛛爬取指定页面等功能也能查看网页源代码。<a href="http://s.tool.chinaz.com/tools/pagecode.aspx">链接</a>  </p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　可以看出，这种加密方法是非常不安全的(实际上，静态网站怎么加密也没多大意义)，真正的安全的方法是在网站服务器端对访问加入一个认证步骤。(这类教程网上很多，很容易搜索到，比如Apache认证访问、Nginx认证访问等关键字)，所以一些重要的或者是隐私的东西还是不要想着靠这种方式来加密了，还有一个细思极恐的问题就是，这种方式加密对搜索引擎也是无效的，因为它抓取的就是源代码，因此，需要在robots.txt中限制一下特定URL或目录的抓取，可以<a href="https://www.iots.vip/post/hexo-build-to-optimize.html#1%E3%80%81%E6%B7%BB%E5%8A%A0robots-txt">点这里</a>。  </p>
]]></content>
      <tags>
        <tag>折腾</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo使用Artalk评论系统</title>
    <url>//post/hexo-artalk-comment.html</url>
    <content><![CDATA[<p>　　前些日子逛 GitHub 时发现一个比较满足强迫症要求的评论系统 <a href="https://artalk.js.org/">Artalk</a>，功能完善且带有支持自托管的后台，恰逢 LeanCloud 政策变更， 忍受了 LeanCloud 好几年的资源与其他限制， 终于这次，我准备休掉它换 Artalk 了， 毕竟自建博客本就是为了不受到各种平台的限制。  <span id="more"></span><br>　　从<a href="/about">关于</a>页面可以看出， Alliot’s blog 已经有很长很长一段时间没有折腾过博客了, 本站所用的 NexT 主题也是多年以前自己魔改过很多的 5.1.0 版本，早已偏离了上游仓库十万百千里， 同时因为魔改了挺多，又懒得折腾升级新的版本， 因此无法直接使用 Artalk 文档中提到的插件方式安装。这里只能直接进行修改，在这过程中踩了一些坑， 这里稍微记录一遇到同样问题的朋友参考（或许没我这么懒而强迫症的）。  </p>
<h3 id="后端配置"><a href="#后端配置" class="headerlink" title="后端配置"></a>后端配置</h3><p>　　后端安装跟着官方文档 docker-compose 一把梭基本是没有什么部署上的问题的，只是在配置上需要注意一些地方。  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可信域名， 必须匹配，否则会报CSRF</span></span><br><span class="line"><span class="attr">trusted_domains:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;https://artalk.iots.vip&quot;</span> <span class="comment"># artalk 后端地址</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;https://www.iots.vip&quot;</span>    <span class="comment"># 博客地址</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;http://www.iots.vip&quot;</span>    </span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;http://localhost:4000&quot;</span>   <span class="comment"># 供本地调试地址</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;http://127.0.0.1:4000&quot;</span>  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认站点名</span></span><br><span class="line"><span class="attr">site_default:</span> <span class="string">&quot;blog&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 管理员账户</span></span><br><span class="line"><span class="attr">admin_users:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;xxx&quot;</span></span><br><span class="line">    <span class="attr">email:</span> <span class="string">&quot;xxx@xxx.com&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 密码支持 bcrypt 或 md5 加密 </span></span><br><span class="line">    <span class="comment"># 如admin加密后的32位md5为: 21232f297a57a5a743894a0e4a801fc3，则如下字段因添加(md5)前缀:</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">&quot;(md5)21232f297a57a5a743894a0e4a801fc&quot;</span></span><br></pre></td></tr></table></figure>

<p>　　如果需要 Nginx 反向代理， 这里提供一份 Nginx 配置参考:  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl http2;</span><br><span class="line">    server_name artalk.xxx.com;</span><br><span class="line">    access_log access_artalk.log;</span><br><span class="line"></span><br><span class="line">    #新增ssl配置---开始：</span><br><span class="line">    ssl_certificate xxx.crt; #证书公钥文件路径</span><br><span class="line">    ssl_certificate_key  xxx.key;   #证书私钥文件路径</span><br><span class="line">    ssl_session_timeout  5m;  #5分钟session会话保持</span><br><span class="line">    ssl_session_cache shared:MozSSL:10m;</span><br><span class="line">    ssl_dhparam cert_file/dhparam;</span><br><span class="line">    ssl_protocols TLSv1.2;</span><br><span class="line">    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;</span><br><span class="line">    ssl_prefer_server_ciphers off;</span><br><span class="line">    ssl_stapling on;</span><br><span class="line">    ssl_stapling_verify on;</span><br><span class="line">    #新增ssl配置---结束：</span><br><span class="line"></span><br><span class="line">    proxy_max_temp_file_size 0;</span><br><span class="line">    client_max_body_size 128M;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://localhost:23366;</span><br><span class="line"></span><br><span class="line">    # 禁止访问隐藏文件</span><br><span class="line">    location ~ /\. &#123;</span><br><span class="line">      deny all;</span><br><span class="line">      access_log off;</span><br><span class="line">      log_not_found off;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location =/robots.txt &#123;</span><br><span class="line">        default_type text/html;</span><br><span class="line">        add_header Content-Type &quot;text/plain; charset=UTF-8&quot;;</span><br><span class="line">        return 200 &quot;User-Agent: *\nDisallow: /*&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># http 301 -&gt; https</span><br><span class="line">server &#123;</span><br><span class="line">	listen 80;</span><br><span class="line">	server_name artalk.xxx.com;</span><br><span class="line">	return 301 https://artalk.xxx.com$request_uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="前端配置"><a href="#前端配置" class="headerlink" title="前端配置"></a>前端配置</h3><p>　　这里只是提供适用于适用于 Alliot’s blog 当前版本 NexT 主题的配置， 其他主题未经官方适配的主题或许可以参考一下(我前端超烂…见笑了)：</p>
<p>　　首先是资源引用，以及实例化 artalk。 <code>themes/next/layout/_scripts/third-party/comments.swig</code> 实例化的时候需要注意，如果你有评论是从 valine 导入的话， <code>page_key</code> 这里需要改一下：  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.<span class="property">artalk</span>.<span class="property">enable</span> and theme.<span class="property">artalk</span>.<span class="property">server</span> %&#125;</span><br><span class="line"></span><br><span class="line">&lt;link href=<span class="string">&quot;https://unpkg.com/artalk@2.3.4/dist/Artalk.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/artalk@2.3.4/dist/Artalk.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 获取相对路径, 如果直接用官方文档说的不指定 pageKey，则会出现 about 等页面评论无法正常加载的情况</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 因为page_key的缺省值location.pathname 会在 /about/ 后添加 index.html 后缀</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 而hexo的about等页面实际上的 URL 是不包含这个后缀的，所以会导致 key 无法对应上，评论导入后为空。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> url = <span class="string">&#x27;/&#x27;</span> + <span class="string">&quot;&#123;&#123; page.permalink &#125;&#125;&quot;</span>.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>).<span class="title function_">slice</span>(<span class="number">3</span>).<span class="title function_">join</span>(<span class="string">&#x27;/&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> artalk = <span class="keyword">new</span> <span class="title class_">Artalk</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&#x27;#artalkComments&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">server</span>: <span class="string">&#x27;&#123;&#123; theme.artalk.server &#125;&#125;&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">pageKey</span>: url,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">site</span>: <span class="string">&#x27;&#123;&#123; theme.artalk.site &#125;&#125;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>　　然后我们在评论位置添加这个元素， <code>themes/next/layout/_partials/comments.swig</code>:  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;% elseif theme.<span class="property">artalk</span>.<span class="property">enable</span> and theme.<span class="property">artalk</span>.<span class="property">server</span> %&#125;</span><br><span class="line">  &lt;div id=<span class="string">&quot;artalkComments&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&#123;% include <span class="string">&#x27;../_scripts/third-party/comments.swig&#x27;</span> %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>　　再然后，为了添加首页文章评论数的效果，我采用了比较笨的一个方法去请求后端获取评论数量（粗略的看了一下文档好像并没有提供，因此构造请求来拿一下…）， <code>themes/next/layout/_macro/post.swig</code> header 标签内添加:  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.<span class="property">artalk</span>.<span class="property">enable</span> and theme.<span class="property">artalk</span>.<span class="property">server</span> %&#125;</span><br><span class="line">    &lt;span <span class="keyword">class</span>=<span class="string">&quot;post-comments-count&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-divider&quot;</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item-icon&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-comment-o&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(post.path) &#125;&#125;#artalkComments&quot;</span> <span class="attr">itemprop</span>=<span class="string">&quot;discussionUrl&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;&#123;&#123; post.path &#125;&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;post-comments-count&quot;</span> <span class="attr">data-xid</span>=<span class="string">&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot;</span> <span class="attr">itemprop</span>=<span class="string">&quot;commentCount&quot;</span>&gt;</span>loading..<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">    &lt;/span&gt;</span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> formdata = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    formdata.<span class="title function_">append</span>(<span class="string">&quot;site_name&quot;</span>, <span class="string">&quot;&#123;&#123; theme.artalk.site &#125;&#125;&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    formdata.<span class="title function_">append</span>(<span class="string">&quot;page_key&quot;</span>, <span class="string">&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    formdata.<span class="title function_">append</span>(<span class="string">&quot;limit&quot;</span>, <span class="string">&quot;1&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> requestOptions = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">body</span>: formdata,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//console.log(&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">fetch</span>(<span class="string">&quot;&#123;&#123; theme.artalk.server &#125;&#125;/api/get&quot;</span>, requestOptions)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">text</span>())</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      .<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">const</span> count = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(result).<span class="property">data</span>.<span class="property">total</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;&#123;&#123; post.path &#125;&#125;&#x27;</span>).<span class="property">innerText</span> = count</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error&#x27;</span>, error));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
<p>   最后，主题配置文件 <code>themes/next/_config.yml</code> 添加:  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">artalk:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">site:</span> <span class="string">&#x27;blog&#x27;</span></span><br><span class="line">  <span class="attr">server:</span> <span class="string">&#x27;https://artalk.xxx.com&#x27;</span> <span class="comment"># 记住不要加 / 结束</span></span><br></pre></td></tr></table></figure>

<h3 id="导入valine评论到Artalk"><a href="#导入valine评论到Artalk" class="headerlink" title="导入valine评论到Artalk"></a>导入valine评论到Artalk</h3><p>　　跟随 Artalk <a href="https://artalk.js.org/guide/transfer.html#%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5">官方文档</a>从 LeanCloud 导出 Comment Class 后，邮件收到的是 <code>jsonl</code> 格式，我们需要将其转为 <code>json</code> 格式:  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">首先打开 jsonl 文件删除首行的注释后，执行如下shell命令，注意valine.jsonl替换为实际的文件名</span> </span><br><span class="line">sed &#x27;1s/^/[/; $!s/$/,/; $s/$/]/&#x27; valine.jsonl &gt; artalk.json</span><br></pre></td></tr></table></figure>
<p>这样再通过<a href="https://artransfer.netlify.app/">数据行囊</a> 将其格式转换，并导入到 Artalk。<br>　　导入的时候，需要提供 “目标站点名”, “目标站点 URL”,我这里目标站点为 “blog”， URL 为 “<a href="https://www.iots.vip",/">https://www.iots.vip&quot;，</a> 导入后会发现一个问题，由于我们前面前端使用的 <code>page_key</code> 为相对路径, 但是 Artalk 的导入功能在写入数据的时候又默认会拼接 “目标站点 URL” 进 <code>page_key</code> 字段，这样就会导致旧的评论无法在文章页面中展示，我们需要手动将数据库中的 <code>comments</code> 表中的 <code>page_key</code> 改成相对路径。这样导入的评论就能正常展示了（感觉应该算是一个 BUG，已经跟作者提了）。<br>　　连接数据库执行如下 SQL（如果你用的是 sqlite，那么直接用 navicat 打开它就行啦）：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> `comments` <span class="keyword">set</span> page_key<span class="operator">=</span>REPLACE(page_key, <span class="string">&#x27;https://www.iots.vip/&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>　　工作后已经很少有心情去折腾博客了，比较双手抱着砖头，失去了太多的热情。这次改评论系统过程中的处理的方法又丑又笨，但就如罗老师说的————又不是不能用(逃  </p>
]]></content>
      <tags>
        <tag>折腾</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo使用CODING CI部署静态文件到服务器</title>
    <url>//post/hexo-coding-ci-scp-server.html</url>
    <content><![CDATA[<p>　　当时搭建 <a href="https://www.iots.vip/post/hexo-ci-wiki.html">wiki</a> 的时候，只注意到 travis-ci.com 支持私有仓库，但是没发现它是有免费次数限制的，这次 <a href="http://szhshp.org/">szhshp 同学</a> 提醒才发觉。另外，之前我的 wiki 一直是丢在 Git pages 上的，即使加上了 CDN，速度依然堪忧，于是重新在 CODING 部署持续集成服务，利用 CODING CI 将 hexo 的静态文件部署到 Web 服务器。<span id="more"></span>  </p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>　　与 Travis-CI 不同，CODING CI 是基于 Jenkins 的，所以其持续集成的脚本亦为 Jenkinsfile，不过 Alliot 本身对 Jenkins 与其脚本的语法并不熟悉，只知道这些个概念，所以在编写 Jenkinsfile 的时候还是踩了不少的坑。<br>　　流程其实很简单：<br><img data-src="https://static.iots.vip/coding-ci-1.png" alt="coding-ci-1.png"></p>
<h3 id="Web服务器设置"><a href="#Web服务器设置" class="headerlink" title="Web服务器设置"></a>Web服务器设置</h3><h4 id="配置密钥登录"><a href="#配置密钥登录" class="headerlink" title="配置密钥登录"></a>配置密钥登录</h4><p>　　由于需要使用 SCP，而 SCP 本身是走 ssh 的，所以我们需要在服务器系统中添加一个用于 CODING CI 传输文件的用户（为安全起见，强烈建议新建普通用户，给予有限的权限，而非 root）。这里我假设新建用户为 <code>alliot_blog</code>，Web 服务器目录为 <code>/var/www</code>：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到 root 身份</span>  </span><br><span class="line">su -</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看目录的所有者所处组</span></span><br><span class="line">ls -l /var/www </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">假设该目录所有者为 www，新建用户并将其加入该组</span></span><br><span class="line">useradd -g www alliot_blog</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到 alliot_blog 用户</span></span><br><span class="line">su - alliot_blog </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成密钥对 (https://www.iots.vip/post/centos-use-ssh-keygen.html)</span></span><br><span class="line">ssh-keygen -t rsa</span><br><span class="line">cd ~/.ssh</span><br><span class="line">cat id_rsa.pub &gt;&gt; authorized_keys</span><br><span class="line">chmod 600 authorized_keys</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 id_rsa 下载到本机后删除敏感文件</span></span><br><span class="line">rm -f id_rsa*</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试能否通过密钥登录</span>  </span><br><span class="line">ssh -i id_rsa alliot_blog@你的IP</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="新建构建计划"><a href="#新建构建计划" class="headerlink" title="新建构建计划"></a>新建构建计划</h3><p>　　在 hexo 源文件仓库中点击 “新建构建计划” ，为了方便我们直接选择  SCP 的 Jenkinsfile 模板：<br><img data-src="https://static.iots.vip/coding-ci-2.png" alt="coding-ci-2.png"></p>
<p>填入服务器 IP 与用户名，在 ”请选择凭据“ 中导入并选择先前下载的 <code>id_rsa</code> 私钥，确认。  </p>
<h3 id="流程配置"><a href="#流程配置" class="headerlink" title="流程配置"></a>流程配置</h3><p>　　进入流程配置中选择文本编辑器，覆盖写入如下配置：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">  agent any</span><br><span class="line">  stages &#123;</span><br><span class="line">    stage(&#x27;仓库检出&#x27;) &#123;</span><br><span class="line">      steps &#123;</span><br><span class="line">        checkout([$class: &#x27;GitSCM&#x27;, branches: [[name: env.GIT_BUILD_REF]],</span><br><span class="line">        userRemoteConfigs: [[url: env.GIT_REPO_URL, credentialsId: env.CREDENTIALS_ID]]])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stage(&#x27;hexo 环境构建&#x27;) &#123;</span><br><span class="line">      steps &#123;</span><br><span class="line">        echo &#x27;hexo 环境构建中...&#x27;</span><br><span class="line">        sh &#x27;node -v&#x27;</span><br><span class="line">        sh &#x27;npm install -g hexo-cli&#x27;</span><br><span class="line">        sh &#x27;npm install -g gulp&#x27;</span><br><span class="line">        sh &#x27;npm install -g&#x27;</span><br><span class="line">        echo &#x27;构建完成.&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stage(&#x27;hexo g 生成静态文件&#x27;) &#123;</span><br><span class="line">      steps &#123;</span><br><span class="line">        echo &#x27;hexo g 生成静态文件&#x27;</span><br><span class="line">        sh &#x27;hexo clean&#x27;</span><br><span class="line">        sh &#x27;hexo g &amp;&amp; gulp&#x27;</span><br><span class="line">        sh &#x27;mv public blog&#x27;</span><br><span class="line">        // 由于小文件多，打包以提高传输速度</span><br><span class="line">        sh &#x27;tar -zcf blog.tar.gz blog/&#x27;</span><br><span class="line">        echo &#x27;hexo g 生成静态文件成功.&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stage(&#x27;ssh 部署到 web 端&#x27;) &#123;</span><br><span class="line">      steps &#123;</span><br><span class="line">        echo &#x27;部署中...&#x27;</span><br><span class="line">        script &#123;</span><br><span class="line">          def remote = [:]</span><br><span class="line">          remote.name = &#x27;web-server&#x27;</span><br><span class="line">          remote.allowAnyHosts = true</span><br><span class="line">          remote.host = &quot;$&#123;env.REMOTE_HOST&#125;&quot;</span><br><span class="line">          remote.user = &quot;$&#123;env.REMOTE_USER_NAME&#125;&quot;</span><br><span class="line">          // 需要先创建一对 SSH 密钥，把私钥放在 CODING 凭据管理，把公钥放在服务器的 `.ssh/authorized_keys`，实现免密码登录</span><br><span class="line">          withCredentials([sshUserPrivateKey(credentialsId: &quot;$&#123;env.REMOTE_CRED&#125;&quot;, keyFileVariable: &#x27;id_rsa&#x27;)]) &#123;</span><br><span class="line">            remote.identityFile = id_rsa</span><br><span class="line">            //假如服务器 Web 的博客目录为 /var/www/blog，删除旧文件</span><br><span class="line">            sshCommand remote: remote, command: &quot;rm -rf /var/www/blog*&quot;</span><br><span class="line">            // SSH 上传文件到远端服务器</span><br><span class="line">            sshPut remote: remote, from: &#x27;blog.tar.gz&#x27;, into: &#x27;/var/www&#x27;</span><br><span class="line">            // SSH 在远端服务器执行解压操作</span><br><span class="line">            sshCommand remote: remote,  sudo: false, command: &quot;cd /var/www &amp;&amp; tar -zxf blog.tar.gz &amp;&amp; rm -rf blog.tar.gz&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        echo &#x27;部署完成&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>保存即可，完成流程配置。  </p>
<h3 id="缓存设置"><a href="#缓存设置" class="headerlink" title="缓存设置"></a>缓存设置</h3><p>　　在“变量与缓存”中，勾选 <code>npm</code>，并增加目录 <code>/root/workspace/node_modules</code> 以提高构建的速度，或者还可以在 <code>npm install</code> 处，更换 <code>npm</code> 为 <code>cnpm</code>，不过我测试速度优化不明显。  </p>
<h3 id="构建测试"><a href="#构建测试" class="headerlink" title="构建测试"></a>构建测试</h3><p>　　返回“构建计划”中，选择“立即构建”，即可，在“构建过程”中，我们可以查看构建进度，以排障。  <img data-src="https://static.iots.vip/coding-ci-3.png" alt="coding-ci-3.png">  
　　</p>
<h3 id="易踩坑点"><a href="#易踩坑点" class="headerlink" title="易踩坑点"></a>易踩坑点</h3><ul>
<li>Jenkinsfile 中，变量的引用。<a href="https://help.coding.net/docs/devops/ci/env.html">CODING CI DOC</a>  </li>
<li>“hexo 环境构建” 的 “stage” 中，<code>npm install</code> 如果不使用 <code>-g</code> 全局安装，在“部署”的 “stage” 会出现报错，很奇怪，一般来说，只有 <code>hexo-cli</code> 是需要全局安装的，这里不深究了，反正 CI 环境用后即焚，无所谓啦。</li>
<li>sshPut 环节出现错误的时候，首先查看目录权限，我当时是 <code>usermod -a -G www alliot_blog</code> 给用户添加到 <code>www</code> 用户组就直接就去测试能不能创建删除文件的，发现即使目录是 775 权限也提示没有权限，最终想起，忘记重启终端来生效配置-_-! 丢人…  </li>
<li>接上一条，除去权限问题，还可能出现 <code>no such file</code> ，这是因为你使用了非绝对路径造成的。</li>
</ul>
]]></content>
      <tags>
        <tag>折腾</tag>
        <tag>hexo</tag>
        <tag>CI</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo的搭建、设置与部分优化</title>
    <url>//post/hexo-build-to-optimize.html</url>
    <content><![CDATA[<p>　　hexo 是一个“快速、简洁且高效的博客框架”。其最大的特点是在本地直接生成静态文件，将静态文件上传到服务器端，这样服务器端只有静态的文件，给网站的 SEO 优化带来了极大的便利，同时，网站的安全性也有了很大的提高，由于静态的网页对环境要求非常小，在流量较小的情况下，甚至可以不需要独立的服务器而直接丢于 GitHub 或虚拟主机上，对个人博主来说，能够有效的节省服务器开支；markdown 的支持让写作更加方便快捷；同时，hexo 拥有强大的插件系统与优质的主题（Alliot 就是因为 NexT 这个主题才知道的 hexo），高度可定制。官网：hexo.io  <span id="more"></span></p>
<p>　　文章面向的是不熟悉的新手朋友，所以篇幅较长，不免有些啰嗦，还望各位大佬朋友绕道勿喷。<br>　　<img data-src="https://static.iots.vip/hexo%E4%BB%8E%E6%90%AD%E5%BB%BA%E5%88%B0%E4%BC%98%E5%8C%96%E8%AF%A6%E8%A7%A3%E5%86%85%E5%AE%B9%E5%9B%BE.png" alt="hexo从搭建到优化详解内容图"><br>注意：<br>在hexo的配置文件中注释符号为’#’，本文为了方便查看(其实是我自己的习惯)，在下文中将使用’&#x2F;&#x2F;‘做注释，实际中，为避免发生报错，请使用’#’注释，望悉知。  </p>
<h2 id="安装-以windows中为例"><a href="#安装-以windows中为例" class="headerlink" title="安装(以windows中为例)"></a>安装(以windows中为例)</h2><p>　　hexo可以安装在PC上，也可以直接安装在网站服务器上，区别在于：安装在PC上，等于在PC上生成静态文件后，再将其静态文件上传至服务器的网站根目录，用户只能在该PC上写作；而安装在服务器上则等于在服务器上生成静态文件(也可以直接监听4000端口实现)，用户可以通过shell或者FTP来实现在不同的PC上写作并发布。大家可以自行选择，Alliot推荐前者，原因有三：一是由于文章使用的是markdown语法，在PC上写作，有更多的优秀的编辑器可以选择，如markdownPad、notepad++(可参考<a href="https://www.iots.vip/post/notepad-support-markdown.html">notepad++中实现markdown语法高亮与实时预览</a>)； 二是hexo提供了快速方便的一键部署功能，只需一条命令就能将网站部署到服务器上；最好的做法是，在PC上生成静态文件，通过git直接将网页部署在免费的GitHub或CodingPages上，省去购买服务器的费用。  </p>
<h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>　　众所周知的原因，某天朝下载需要代理，所以这里以及下文用到的工具，Alliot将其上传到度盘，这里只提供了Windows x64下的安装包，其他环境下的朋友可自行搜索。<br>(Git-2.11.0.3-64-bit)链接：<a href="http://pan.baidu.com/s/1cfa5VC">http://pan.baidu.com/s/1cfa5VC</a> 密码：rng9<br>安装是一路下一步，不做过多说明。  </p>
<h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><p>　　(node-v6.9.4-x64)链接：<a href="http://pan.baidu.com/s/1jIdytQQ">http://pan.baidu.com/s/1jIdytQQ</a> 密码：4gsc  同上。  </p>
<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>　　安装完node.js后，会在开始菜单-所有程序中生成一个”nodejs”文件夹，展开将“Node.js command prompt”发送到桌面快捷方式(稍后有用)<img data-src="https://static.iots.vip/nodejs_command.jpg" alt="nodejs_command"> 双击打开进入命令提示符窗口。<br>如图，<img data-src="https://static.iots.vip/%E5%AE%89%E8%A3%85hexo_1.jpg" alt="hexo安装_1"> 输入  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p>（这里天朝由于众所周知的原因，下载可能较(非常)为缓慢，建议挂上代理操作。）<br>出现下图所示，<img data-src="https://static.iots.vip/%E5%AE%89%E8%A3%85hexo_2.jpg" alt="hexo安装_2"> 然后执行   </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init &lt;folder&gt;		//初始化hexo,&lt;folder&gt;为需要安装到的路径</span><br></pre></td></tr></table></figure>
<p>出现下图所示，<img data-src="https://static.iots.vip/%E5%AE%89%E8%A3%85hexo_3.jpg" alt="hexo安装_3"> 则右键桌面的“Node.js command prompt”快捷方式，属性，将”起始位置”中的路径改为刚才初始化hexo的路径。<br>双击打开“Node.js command prompt”，执行  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>安装完成后的目录结构是这样的：  </p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml			<span class="comment">//配置文件，包括博客信息、主题设置等。配置文件中默认有注释。</span></span><br><span class="line">├── package.json		<span class="comment">//应用程序(插件等)信息。</span></span><br><span class="line">├── scaffolds			<span class="comment">//模板文件夹，新建文章或页面后，会自动生成一个非空文件，该文件的内容就是这个文件夹下的文件内容。</span></span><br><span class="line">├── source				<span class="comment">//用户资源文件夹，如文章的markdown就应该在_post中修改。</span></span><br><span class="line"><span class="string">|   ├── _drafts</span></span><br><span class="line"><span class="string">|   └── _posts</span></span><br><span class="line">└── themes				<span class="comment">//主题资源文件夹，下载安装后的主题文件在这个文件夹中。</span></span><br></pre></td></tr></table></figure>
<p>部分引用于官方文档：hexo.io&#x2F;docs&#x2F;setup.html  </p>
<h2 id="使用命令"><a href="#使用命令" class="headerlink" title="使用命令"></a>使用命令</h2><p>　　命令可以通过node.js的命令提示符窗口输入：</p>
<h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">hexo new &quot;<span class="built_in">title</span>&quot;</span><br></pre></td></tr></table></figure>
<p>新建会在 <code>source/_posts/</code> 中生成对应的 .md 文件，编辑该文件即可。默认支持 markdown 与 HTML 语法<br>删除文章，则只需要删除对应的 .md 文档即可。</p>
<h3 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h3><p>要能够在本地预览自己的博客，需要本地启动服务器。这里应先安装 hexo server 模块（hexo 3.0后版本，server 变成了独立的模块) 在命令提示符窗口执行:  </p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">npm install hexo-<span class="keyword">server</span> <span class="comment">--save</span></span><br></pre></td></tr></table></figure>
<p>安装完毕后执行:  </p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo s</span></span><br></pre></td></tr></table></figure>
<p>浏览器输入:  <a href="http://localhost:4000/">http://localhost:4000</a> (IE浏览器必须需要http前缀才可打开)  即可实时预览（注意是实时，修改文章与修改配置，保存后刷新网页都能看到效果）。Ctrl+C 关闭服务器。  </p>
<h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">hexo g  </span><br></pre></td></tr></table></figure>
<p>这里生成静态文件在根目录的 <code>public</code> 下，将此目录内的文件上传到服务器网站根目录即可。  </p>
<h3 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h3><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>
<p>清理缓存与 <code>public</code> 目录，推荐每次执行 <code>hexo s</code> 之前都执行一次 <code>hexo clean</code>，避免出现一些奇怪的问题(主页未同步等)。  </p>
<h3 id="部署发布"><a href="#部署发布" class="headerlink" title="部署发布"></a>部署发布</h3><p>hexo提供了一键部署功能，通过简单的配置能够一键部署到网站服务器上。<br>开始之前需要修改根目录下的 <code>_config.xml</code> 配置文件，这里只举例 git:<br>使用git部署需要先安装 <code>hexo-deployer-git</code> 插件，执行:  </p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>然后修改配置文件_config.xml中的  </p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">deploy:</span></span><br><span class="line"><span class="language-xml">  type: git				//部署类型  </span></span><br><span class="line"><span class="language-xml">  repo: (Repository地址)</span></span><br><span class="line"><span class="language-xml">  branch: (分支名称)</span></span><br><span class="line"><span class="language-xml">  message: (自定义提交信息,默认为Site updated: </span><span class="template-variable">&#123;&#123; <span class="name">now</span>(<span class="name">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>) &#125;&#125;</span><span class="language-xml">)</span></span><br></pre></td></tr></table></figure>
<p>这里以 Coding 中操作为例：  </p>
<blockquote class="blockquote-center">
<p>Coding Pages 是一个免费的静态网页托管和演示服务，您可以使用 Coding Pages 托管博客、项目官网等静态网页</p>

</blockquote>  
<p>(正准备写然后没想到好友 Lu尼玛 同学已经写出来了：<a href="https://luna.fancylog.net/ru-he-mian-fei-da-jian-yi-ge-shu-yu-zi-ji-de-bo-ke/">点这里</a>，大家可以参考他的做法)</p>
<h2 id="配置基本信息"><a href="#配置基本信息" class="headerlink" title="配置基本信息"></a>配置基本信息</h2><p>在根目录下的 <code>_config.xml</code> 中修改。(注意区别于 themes 下主题的 _config.xml 文件)   </p>
<h3 id="网站信息"><a href="#网站信息" class="headerlink" title="网站信息"></a>网站信息</h3><table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">title</td>
<td align="center">网站标题</td>
</tr>
<tr>
<td align="center">subtitle</td>
<td align="center">网站副标题</td>
</tr>
<tr>
<td align="center">description</td>
<td align="center">网站描述</td>
</tr>
<tr>
<td align="center">author</td>
<td align="center">作者名</td>
</tr>
<tr>
<td align="center">language</td>
<td align="center">网站语言</td>
</tr>
<tr>
<td align="center">timezone</td>
<td align="center">网站使用的时区</td>
</tr>
<tr>
<td align="center">url</td>
<td align="center">网站url</td>
</tr>
<tr>
<td align="center">root</td>
<td align="center">网站根目录</td>
</tr>
</tbody></table>
<p>前3个参数主要用于SEO优化。 这里将<a href="https://www.iots.vip/">Alliot’s blog</a> 的这部分配置信息列出如下，各位朋友可以参照本博客来修改：  </p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置文件中注释符号为&#x27;#&#x27;，这里为了方便查看，使用&#x27;//&#x27;做注释，实际中，请使用&#x27;#&#x27;注释，望悉知。  </span></span><br><span class="line"><span class="comment"># Site   </span></span><br><span class="line">title: Alliot<span class="string">&#x27;s blog			//注意Alliot&#x27;</span>s blog前有一个空格，不能省略，否则在检查时会出错。之后的配置文件同此，均应该加空格。</span><br><span class="line">subtitle: Maker &amp; Developer</span><br><span class="line">description: IOTS.VIP is a blog in order to record <span class="keyword">my</span> learning <span class="keyword">and</span> growth</span><br><span class="line">author: Alliot					//作者信息在大部分主题中一般显示在网站底部与文章标题下方。</span><br><span class="line">language: zh-Hans				//中文，汉字</span><br><span class="line">timezone: Asia/Shanghai			//时区：亚洲，上海</span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line">url: https:<span class="regexp">//</span>www.iots.vip		//如果你的网站是放于二级目录，类似于www.iots.vip/blog则请将URL设置为https:<span class="regexp">//</span>www.iots.vip/blog 同时root设置为/blog/</span><br><span class="line">root: <span class="regexp">/</span></span><br><span class="line"><span class="regexp">```  </span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">## 主题设置  </span></span><br><span class="line"><span class="regexp">　　[Alliot&#x27;s blog](https:/</span><span class="regexp">/www.iots.vip) 博客用的是 “NexT”，具体使用方法可以参照[主题官网](http:/</span><span class="regexp">/theme-next.iissnan.com/g</span>etting-started.html) ，(官方文档已经很清楚、详细,这里就不多说)，各位朋友可以按需求配置。  </span><br><span class="line">下面是我的主题配置文件(安全起见，已省略部分内容)，可以直接拿过去用。[点击下载](https:<span class="regexp">//s</span>tatic.iots.vip/<span class="keyword">next</span>%E4%B8%BB%E9%A2%98%E9%85%<span class="number">8</span>D%E7%BD%AE%E6%96%87%E4%BB%B6.yml)  </span><br><span class="line"></span><br><span class="line"><span class="comment">### 搜索功能  </span></span><br><span class="line">　　推荐使用 Local Search 作为站内搜索，搜索速度快，同时比较简洁，启用方法如下：  </span><br><span class="line"><span class="comment">#### 1、安装插件  </span></span><br><span class="line">　　安装 hexo-generator-searchdb 插件  </span><br><span class="line">　　打开 Node.js command prompt，在站点的根目录下执行以下命令：  </span><br></pre></td></tr></table></figure>
<p>npm install hexo-generator-searchdb –save</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">#### <span class="number">2</span>、更改配置文件  </span><br><span class="line">更改站点配置文件，新增如下内容于任意位置：  </span><br></pre></td></tr></table></figure>
<p>search:<br>  path: search.xml<br>  field: post<br>  format: html<br>  limit: 10000</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">更改 <span class="keyword">NexT</span> 主题配置文件，开启 <span class="keyword">Local</span> Search 作为站内搜索：  </span><br></pre></td></tr></table></figure>
<h1 id="Local-search"><a href="#Local-search" class="headerlink" title="Local search"></a>Local search</h1><p>local_search:<br>  enable: true</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 社会化评论  </span></span><br><span class="line"><span class="string">待添加...（之前多说死了，网易云跟贴出来了，然后接着网易云跟贴也死了，国内好用一点的剩下畅言，不知道何时GG，so,暂时不更教程，大家可以使用国外的DISQUS，不过国内用户无法正常使用，有需要的朋友方法参考主题官网）</span>   </span><br><span class="line"></span><br><span class="line"><span class="meta">--- </span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="comment">## 部分Markdown语法注意点  </span></span><br><span class="line"><span class="string">在</span> <span class="string">hexo</span> <span class="string">中，一些</span> <span class="string">Markdown</span> <span class="string">语法与我们平时所用的有些不同。</span>  </span><br><span class="line"><span class="string">这里列举几个常见的：</span></span><br></pre></td></tr></table></figure>
<p>1.插入代码语法中的第二个&#96;&#96;&#96;后面不要加空格  </p>
<p>2.引用语法中使用&gt;，结束使用2个空格加回车  </p>
<p>3.首行缩进可以使用 中文全角下的两个空格  </p>
<p>4.使用* 标注后 需要换行。</p>
<p>5.表格前需要换行  </p>
<p>6.<blockquote class="blockquote-center">
<p>（前有一个空格）居中标签 </p>

</blockquote>  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">--- </span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="comment">## 部分优化  </span></span><br><span class="line"><span class="comment">### Nginx开启Gzip压缩  </span></span><br><span class="line">　　<span class="string">Nginx的部分优化见此文:[链接](https://www.iots.vip/post/nginx-gzip.html)</span>  </span><br><span class="line"><span class="comment">### 取消Google字体库加载  </span></span><br><span class="line">　　<span class="string">主题调用了Google字体库，天朝的GFW下，会导致字体库加载极其缓慢甚至无法加载。这就导致博客在加载时会有很长的等待时间(F12选择network可以查看加载时间)</span>  </span><br><span class="line"><span class="string">解决方法：</span> <span class="string">修改主题配置文件</span> <span class="string">`_config.xml`</span> <span class="string">中的</span> <span class="string">font</span> <span class="string">字段。将</span> <span class="literal">true</span> <span class="string">改为</span> <span class="literal">false</span><span class="string">。(网上有朋友使用360的公共库，我试了觉得还是不够快。。这里索性改为</span> <span class="literal">false</span> <span class="string">反而更快了)</span>  </span><br><span class="line"><span class="string">CDN等设置能明显加速博客的打开速度，同时能够抵御一些小型攻击，由于操作简单这里就不过多赘述，需要注意的是，在同时开启了SSL([Nginx开启SSL与重定向优化](https://www.iots.vip/post/nginx-ssl-seo.html))的时候，应该将回源设置为</span> <span class="string">HTTPS</span> <span class="string">回源方式。</span>  </span><br><span class="line"><span class="comment">### SEO优化设置  </span></span><br><span class="line">　　<span class="string">虽说写博客不是为了搜索排名来写，但是，一定的搜索引擎流量或许能够让博客被更多的人知晓，也就有可能认识到与你志同道合的朋友~</span> <span class="string">这里记录一些简单的SEO做法</span>  </span><br><span class="line"><span class="comment">#### 1、添加robots.txt  </span></span><br><span class="line">　　<span class="string">`robots.txt`</span> <span class="string">是搜索引擎中访问网站的时候要查看的第一个文件。`robots.txt`</span> <span class="string">文件告诉蜘蛛程序在服务器上什么文件是可以被查看的。</span>  </span><br><span class="line"><span class="string">这里推荐我这种写法(当然，hexo</span> <span class="string">的版本不同可能文件目录有所不同)</span>  </span><br></pre></td></tr></table></figure>
<h1 id="welcome-to-www-iots-vip"><a href="#welcome-to-www-iots-vip" class="headerlink" title="welcome to : www.iots.vip"></a>welcome to : <a href="http://www.iots.vip/">www.iots.vip</a></h1><p>User-agent: *<br>Allow: &#x2F;<br>Allow: &#x2F;archives&#x2F;</p>
<p>Disallow: &#x2F;js&#x2F;<br>Disallow: &#x2F;css&#x2F;<br>Disallow: &#x2F;fonts&#x2F;<br>Disallow: &#x2F;vendors&#x2F;<br>Disallow: &#x2F;lib&#x2F;<br>Sitemap: <a href="https://www.iots.vip/sitemap.xml">https://www.iots.vip/sitemap.xml</a>  </p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">这里会出现一些安全隐患（其实是<span class="number">360</span>网站检测提示 `robots.txt` 可能泄露站点目录结构，实际上并无大碍），可以参考[此文](https:<span class="comment">//www.iots.vip/post/360robots-txt.html)解决。  </span></span><br><span class="line">#### <span class="number">2</span>、安装sitemap插件  </span><br><span class="line">　　sitemap 在 SEO 过程中有着十分重要的地位，同时也能限制蜘蛛对某些特定目录的爬取。 具体概念不多赘述。 hexo 有很方便的自动生成sitemap的插件，打开 Node.js command prompt，在站点的根目录下执行以下命令： </span><br></pre></td></tr></table></figure>
<p>npm install hexo-generator-sitemap –save				#sitemap.xml 提交谷歌搜素引擎<br>npm install hexo-generator-baidu-sitemap –save			#baidusitemap.xml 提交百度搜索引擎 </p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">然后在站点配置文件 `_config.xml` 中添加：  </span><br><span class="line">```  </span><br><span class="line"><span class="meta"># 自动生成sitemap</span></span><br><span class="line"><span class="symbol">sitemap:</span></span><br><span class="line"><span class="symbol">path:</span> sitemap.xml</span><br><span class="line"><span class="symbol">baidusitemap:</span></span><br><span class="line"><span class="symbol">path:</span> baidusitemap.xml</span><br></pre></td></tr></table></figure>
<h4 id="3、安装nofollow插件"><a href="#3、安装nofollow插件" class="headerlink" title="3、安装nofollow插件"></a>3、安装nofollow插件</h4><p>　　减少出站链接能够有效防止权重分散，hexo 有很方便的自动为出站链接添加 nofollow 的插件。<br>这里@liuzhichao 感谢其开源的 hexo-autonofollow 插件，打开 Node.js command prompt，在站点的根目录下执行以下命令：  </p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">npm install hexo-autonofollow <span class="comment">--save  </span></span><br></pre></td></tr></table></figure>
<p>该插件会将博客中的出站链接自动加上 <code>nofollow属性</code>，例外请在站点配置文件 <code>_config.xml</code> 中添加如下字段  </p>
<figure class="highlight nestedtext"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nofollow</span><span class="punctuation">:</span></span><br><span class="line">	<span class="attribute">enable</span><span class="punctuation">:</span> <span class="string">true</span></span><br><span class="line">	<span class="attribute">exclude</span><span class="punctuation">:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">www.iots.vip</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">友链地址  </span></span><br></pre></td></tr></table></figure>

<p>这样，例外的链接将不会被加上 <code>nofollow属性</code>。<br>插件自动添加的属性为 ‘external nofollow noopener noreferrer’  一般来说标准的 <code>nofollow属性</code> 只需要 <code>external nofollow</code> 即可，noopener noreferrer 估计是新闻上说的钓鱼漏洞的补救方法，不过这条属性会影响站长工具的友链检测，大家如果需要去掉这一条属性，可以在&#x2F;hexo根目录&#x2F;node_modules\hexo-autonofollow\lib中修改filter.js中</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rel</span>: <span class="string">&#x27;external nofollow noopener noreferrer&#x27;</span>  </span><br></pre></td></tr></table></figure>
<p>将 ‘noopener noreferrer’ 去掉，重新 <code>hexo g</code> 即可。  </p>
<h3 id="文章密码"><a href="#文章密码" class="headerlink" title="文章密码"></a>文章密码</h3><p>　　<del>2017年11月11日更新</del>: 原文<a href="https://blog.paddings.cn/2016/12/01/blog/hexo-password/">点此</a>  这里搬运过来做备份 (这种方式是不安全的，详情请点击<a href="https://www.iots.vip/post/hexo-password-crack.html">hexo文章密码访问的”破解”方法</a>)   </p>
<h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>找到 <code>themes-&gt;next-&gt;layout-&gt;_partials-&gt;head.swig</code> 文件。添加如下代码(推荐加在所有的 <code>&lt;meta&gt;</code> 标签之后):  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">if</span>(<span class="string">&#x27;&#123;&#123; page.password &#125;&#125;&#x27;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">if</span> (<span class="title function_">prompt</span>(<span class="string">&#x27;请输入文章密码&#x27;</span>,<span class="string">&#x27;&#x27;</span>) !== <span class="string">&#x27;&#123;&#123; page.password &#125;&#125;&#x27;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="title function_">alert</span>(<span class="string">&#x27;密码错误！&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">				history.<span class="title function_">back</span>();</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;)();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>写博文的时候顶部的页面变量添加 <code>password: 密码</code> 即可，如:  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">&#x27;2017-01-01&#x27;</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">post/111111111.html</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">心思随笔</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2017-01-01 00:00:00</span></span><br><span class="line"><span class="attr">password:</span> <span class="number">123</span></span><br></pre></td></tr></table></figure>
<h3 id="添加豆瓣读书、电影"><a href="#添加豆瓣读书、电影" class="headerlink" title="添加豆瓣读书、电影"></a>添加豆瓣读书、电影</h3><p><a href="https://github.com/mythsman/hexo-douban">使用hexo-douban插件</a>  </p>
<h3 id="添加鼠标点击动画"><a href="#添加鼠标点击动画" class="headerlink" title="添加鼠标点击动画"></a>添加鼠标点击动画</h3><p>(从<a href="https://blog.txisfine.cn/">TXisfine</a>扒下来的2333)修改themes&#x2F;next&#x2F;layout&#x2F;_layout.swig在底部添加：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="comment">/* 鼠标特效 */</span></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> a_idx = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">	<span class="title function_">jQuery</span>(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params">$</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">		$(<span class="string">&quot;body&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&quot;Alliot&quot;</span>, <span class="string">&quot;最帅&quot;</span>, <span class="string">&quot;最帅！&quot;</span>, <span class="string">&quot;最帅！！&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">var</span> $i = $(<span class="string">&quot;&lt;span/&gt;&quot;</span>).<span class="title function_">text</span>(a[a_idx]);</span></span><br><span class="line"><span class="language-javascript">			a_idx = (a_idx + <span class="number">1</span>) % a.<span class="property">length</span>;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">var</span> x = e.<span class="property">pageX</span>,</span></span><br><span class="line"><span class="language-javascript">			y = e.<span class="property">pageY</span>;</span></span><br><span class="line"><span class="language-javascript">			$i.<span class="title function_">css</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="string">&quot;z-index&quot;</span>: <span class="number">999999999999999999999999999999999999999999999999999999999999999999999</span>,</span></span><br><span class="line"><span class="language-javascript">				<span class="string">&quot;top&quot;</span>: y - <span class="number">20</span>,</span></span><br><span class="line"><span class="language-javascript">				<span class="string">&quot;left&quot;</span>: x,</span></span><br><span class="line"><span class="language-javascript">				<span class="string">&quot;position&quot;</span>: <span class="string">&quot;absolute&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">				<span class="string">&quot;font-weight&quot;</span>: <span class="string">&quot;bold&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">				<span class="string">&quot;color&quot;</span>: <span class="string">&quot;#b7b7b7&quot;</span></span></span><br><span class="line"><span class="language-javascript">			&#125;);</span></span><br><span class="line"><span class="language-javascript">			$(<span class="string">&quot;body&quot;</span>).<span class="title function_">append</span>($i);</span></span><br><span class="line"><span class="language-javascript">			$i.<span class="title function_">animate</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="string">&quot;top&quot;</span>: y - <span class="number">180</span>,</span></span><br><span class="line"><span class="language-javascript">				<span class="string">&quot;opacity&quot;</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">			&#125;,</span></span><br><span class="line"><span class="language-javascript">			<span class="number">1500</span>,</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">				$i.<span class="title function_">remove</span>();</span></span><br><span class="line"><span class="language-javascript">			&#125;);</span></span><br><span class="line"><span class="language-javascript">		&#125;);</span></span><br><span class="line"><span class="language-javascript">	&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="给代码添加复制按钮"><a href="#给代码添加复制按钮" class="headerlink" title="给代码添加复制按钮"></a>给代码添加复制按钮</h3><p>来源于 <a href="http://devinol.com/Hexo/">Devin</a><br>　　项目地址: <a href="https://github.com/zenorocha/clipboard.js">https://github.com/zenorocha/clipboard.js</a>  下载到本地。  </p>
<h4 id="第一步-1"><a href="#第一步-1" class="headerlink" title="第一步"></a>第一步</h4><p>　　在 <code>themes/next/source/lib/</code>,新建文件夹 <code>clipboard</code>，将下载的文件下 <code>src</code> 文件夹下的文件复制到刚才新建的文件夹 <code>clipboard</code> 下。  </p>
<h4 id="第二步-1"><a href="#第二步-1" class="headerlink" title="第二步"></a>第二步</h4><p>打开 <code>themes/next/source/js/src/</code>,新建文件 <code>custom.js</code>,代码如下:  </p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="comment">//此函数用于创建复制按钮</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createCopyBtns</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="symbol">$codeArea</span> = $(<span class="string">&quot;figure table&quot;</span>);</span><br><span class="line">    <span class="comment">//查看页面是否具有代码区域，没有代码块则不创建 复制按钮</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="symbol">$codeArea</span>.<span class="built_in">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//复制成功后将要干的事情</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">changeToSuccess</span>(<span class="params">item</span>) &#123;</span><br><span class="line">             <span class="symbol">$imgO</span>K = $(<span class="string">&quot;#copyBtn&quot;</span>).<span class="built_in">find</span>(<span class="string">&quot;#imgSuccess&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="symbol">$imgO</span>K.css(<span class="string">&quot;display&quot;</span>) == <span class="string">&quot;none&quot;</span>) &#123;</span><br><span class="line">                    <span class="symbol">$imgO</span>K.css(&#123;</span><br><span class="line">                        <span class="attr">opacity</span>: <span class="number">0</span>,</span><br><span class="line">                        <span class="attr">display</span>: <span class="string">&quot;block&quot;</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="symbol">$imgO</span>K.animate(&#123;</span><br><span class="line">                        <span class="attr">opacity</span>: <span class="number">1</span></span><br><span class="line">                    &#125;, <span class="number">1000</span>);</span><br><span class="line">                    setTimeout(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                        <span class="symbol">$imgO</span>K.animate(&#123;</span><br><span class="line">                            <span class="attr">opacity</span>: <span class="number">0</span></span><br><span class="line">                        &#125;, <span class="number">2000</span>);</span><br><span class="line">                    &#125;, <span class="number">2000</span>);</span><br><span class="line">                    setTimeout(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                        <span class="symbol">$imgO</span>K.css(<span class="string">&quot;display&quot;</span>, <span class="string">&quot;none&quot;</span>);</span><br><span class="line">                    &#125;, <span class="number">4000</span>);</span><br><span class="line">                &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//创建 全局复制按钮，仅有一组。包含：复制按钮，复制成功响应按钮</span></span><br><span class="line">        <span class="comment">//值得注意的是：1.按钮默认隐藏，2.位置使用绝对位置 position: absolute; (position: fixed 也可以，需要修改代码)</span></span><br><span class="line">        $(<span class="string">&quot;.post-body&quot;</span>).before(<span class="string">&#x27;&lt;div id=&quot;copyBtn&quot; style=&quot;opacity: 0; position: absolute;top:0px;display: none;line-height: 1; font-size:1.5em&quot;&gt;&lt;span id=&quot;imgCopy&quot; &gt;&lt;i class=&quot;fa fa-paste fa-fw&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;span id=&quot;imgSuccess&quot; style=&quot;display: none;&quot;&gt;&lt;i class=&quot;fa fa-check-circle fa-fw&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/span&gt;&#x27;</span>);</span><br><span class="line">        <span class="comment">//创建 复制 插件，绑定单机时间到 指定元素，支持JQuery</span></span><br><span class="line">        <span class="keyword">var</span> clipboard = <span class="keyword">new</span> Clipboard(<span class="string">&#x27;#copyBtn&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">target</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="comment">//返回需要复制的元素内容</span></span><br><span class="line">                <span class="keyword">return</span> document.querySelector(<span class="string">&quot;[copyFlag]&quot;</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">isSupported</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="comment">//支持复制内容</span></span><br><span class="line">                <span class="keyword">return</span> document.querySelector(<span class="string">&quot;[copyFlag]&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//复制成功事件绑定</span></span><br><span class="line">        clipboard.on(<span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">            <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">                <span class="comment">//清除内容被选择状态</span></span><br><span class="line">                e.clearSelection();</span><br><span class="line">                changeToSuccess(e);</span><br><span class="line">            &#125;);</span><br><span class="line">        <span class="comment">//复制失败绑定事件</span></span><br><span class="line">        clipboard.on(<span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">            <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">                <span class="built_in">console</span>.error(<span class="string">&#x27;Action:&#x27;</span>, e.action);</span><br><span class="line">                <span class="built_in">console</span>.error(<span class="string">&#x27;Trigger:&#x27;</span>, e.trigger);</span><br><span class="line">            &#125;);</span><br><span class="line">        <span class="comment">//鼠标 在复制按钮上滑动和离开后渐变显示/隐藏效果</span></span><br><span class="line">        $(<span class="string">&quot;#copyBtn&quot;</span>).hover(</span><br><span class="line">            <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                $(this).stop();</span><br><span class="line">                $(this).css(<span class="string">&quot;opacity&quot;</span>, <span class="number">1</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                $(this).animate(&#123;</span><br><span class="line">                    <span class="attr">opacity</span>: <span class="number">0</span></span><br><span class="line">                &#125;, <span class="number">2000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//感应鼠标是否在代码区</span></span><br><span class="line">$(<span class="string">&quot;figure&quot;</span>).hover(</span><br><span class="line">    <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//-------鼠标活动在代码块内</span></span><br><span class="line">        <span class="comment">//移除之前含有复制标志代码块的 copyFlag</span></span><br><span class="line">        $(<span class="string">&quot;[copyFlag]&quot;</span>).removeAttr(<span class="string">&quot;copyFlag&quot;</span>);</span><br><span class="line">        <span class="comment">//在新的（当前鼠标所在代码区）代码块插入标志：copyFlag</span></span><br><span class="line">        $(this).<span class="built_in">find</span>(<span class="string">&quot;.code&quot;</span>).attr(<span class="string">&quot;copyFlag&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//获取复制按钮</span></span><br><span class="line">        <span class="symbol">$copy</span>Btn = $(<span class="string">&quot;#copyBtn&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="symbol">$copy</span>Btn.lenght != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//获取到按钮的前提下进行一下操作</span></span><br><span class="line">            <span class="comment">//停止按钮动画效果</span></span><br><span class="line">            <span class="comment">//设置为 显示状态</span></span><br><span class="line">            <span class="comment">//修改 复制按钮 位置到 当前代码块开始部位</span></span><br><span class="line">            <span class="comment">//设置代码块 左侧位置</span></span><br><span class="line">            <span class="symbol">$copy</span>Btn.stop();</span><br><span class="line">            <span class="symbol">$copy</span>Btn.css(<span class="string">&quot;opacity&quot;</span>, <span class="number">0.8</span>);</span><br><span class="line">            <span class="symbol">$copy</span>Btn.css(<span class="string">&quot;display&quot;</span>, <span class="string">&quot;block&quot;</span>);</span><br><span class="line">            <span class="symbol">$copy</span>Btn.css(<span class="string">&quot;top&quot;</span>, parseInt(<span class="symbol">$copy</span>Btn.css(<span class="string">&quot;top&quot;</span>)) + $(this).<span class="built_in">offset</span>().<span class="built_in">top</span> - <span class="symbol">$copy</span>Btn.<span class="built_in">offset</span>().<span class="built_in">top</span> + <span class="number">3</span>);</span><br><span class="line">            <span class="symbol">$copy</span>Btn.css(<span class="string">&quot;left&quot;</span>, -<span class="symbol">$copy</span>Btn.width() - <span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//-------鼠标离开代码块</span></span><br><span class="line">        <span class="comment">//设置复制按钮可见度 2秒内到 0</span></span><br><span class="line">        $(<span class="string">&quot;#copyBtn&quot;</span>).animate(&#123;</span><br><span class="line">            <span class="attr">opacity</span>: <span class="number">0</span></span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">//页面载入完成后，创建复制按钮</span></span><br><span class="line">$(document).ready(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  createCopyBtns();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h4><p>　　打开 <code>themes/next/layout/_custom/</code>,新建文件 <code>custom.swig</code>，代码如下:  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/lib/clipboard/clipboard.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/src/custom.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h4><p>修改文件 <code>themes/next/layout/_layout.swig</code>,在标签 <code>&lt;/body&gt;</code> 上面插入如下代码:  </p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> &#x27;_custom/custom.swig&#x27; %&#125;</span></span><br></pre></td></tr></table></figure>
<p>即可。  </p>
<h3 id="文末添加本文结束标记"><a href="#文末添加本文结束标记" class="headerlink" title="文末添加本文结束标记"></a>文末添加本文结束标记</h3><h4 id="第一步-2"><a href="#第一步-2" class="headerlink" title="第一步"></a>第一步</h4><p>　　在 <code>/themes/next/layout/_macro</code> 中新建 <code>passage-end-tag.swig</code> 文件,并添加以下内容： </p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> not is_index %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center;color: #ccc;font-size:14px;&quot;</span>&gt;</span>------ 本文结束 ------<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h4 id="第二步-2"><a href="#第二步-2" class="headerlink" title="第二步"></a>第二步</h4><p>　　打开 <code>themes/next/layout/_macro/</code> 下的 <code>post.swig</code> 文件,添加：  </p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> not is_index %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> &#x27;passage-end-tag.swig&#x27; %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h4 id="第三步-1"><a href="#第三步-1" class="headerlink" title="第三步"></a>第三步</h4><p>　　然后打开主题配置文件 <code>_config.xml</code>,在末尾添加： </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文章末尾添加“本文结束”标记</span></span><br><span class="line"><span class="attr">passage_end_tag:</span></span><br><span class="line"><span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3 id="添加文章书写样式"><a href="#添加文章书写样式" class="headerlink" title="添加文章书写样式"></a>添加文章书写样式</h3><h4 id="文字增加背景色块"><a href="#文字增加背景色块" class="headerlink" title="文字增加背景色块"></a>文字增加背景色块</h4><p>如：<br><span id="inline-blue"> 站点配置文件 </span><br><span id="inline-purple"> 主题配置文件 </span><br><span id="inline-yellow"> 站点配置文件 </span><br><span id="inline-green"> 主题配置文件 </span><br>打开 <code>themes/next/source/css/_custom</code> 下的 <code>custom.styl</code> 文件,添加属性样式  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 颜色块-黄</span><br><span class="line"><span class="selector-tag">span</span><span class="selector-id">#inline-yellow</span> &#123;</span><br><span class="line"><span class="attribute">display</span>:inline;</span><br><span class="line"><span class="attribute">padding</span>:.<span class="number">2em</span> .<span class="number">6em</span> .<span class="number">3em</span>;</span><br><span class="line"><span class="attribute">font-size</span>:<span class="number">80%</span>;</span><br><span class="line"><span class="attribute">font-weight</span>:bold;</span><br><span class="line"><span class="attribute">line-height</span>:<span class="number">1</span>;</span><br><span class="line"><span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">text-align</span>:center;</span><br><span class="line"><span class="attribute">white-space</span>:nowrap;</span><br><span class="line"><span class="attribute">vertical-align</span>:baseline;</span><br><span class="line"><span class="attribute">border-radius</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#f0ad4e</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 颜色块-绿</span><br><span class="line"><span class="selector-tag">span</span><span class="selector-id">#inline-green</span> &#123;</span><br><span class="line"><span class="attribute">display</span>:inline;</span><br><span class="line"><span class="attribute">padding</span>:.<span class="number">2em</span> .<span class="number">6em</span> .<span class="number">3em</span>;</span><br><span class="line"><span class="attribute">font-size</span>:<span class="number">80%</span>;</span><br><span class="line"><span class="attribute">font-weight</span>:bold;</span><br><span class="line"><span class="attribute">line-height</span>:<span class="number">1</span>;</span><br><span class="line"><span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">text-align</span>:center;</span><br><span class="line"><span class="attribute">white-space</span>:nowrap;</span><br><span class="line"><span class="attribute">vertical-align</span>:baseline;</span><br><span class="line"><span class="attribute">border-radius</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#5cb85c</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 颜色块-蓝</span><br><span class="line"><span class="selector-tag">span</span><span class="selector-id">#inline-blue</span> &#123;</span><br><span class="line"><span class="attribute">display</span>:inline;</span><br><span class="line"><span class="attribute">padding</span>:.<span class="number">2em</span> .<span class="number">6em</span> .<span class="number">3em</span>;</span><br><span class="line"><span class="attribute">font-size</span>:<span class="number">80%</span>;</span><br><span class="line"><span class="attribute">font-weight</span>:bold;</span><br><span class="line"><span class="attribute">line-height</span>:<span class="number">1</span>;</span><br><span class="line"><span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">text-align</span>:center;</span><br><span class="line"><span class="attribute">white-space</span>:nowrap;</span><br><span class="line"><span class="attribute">vertical-align</span>:baseline;</span><br><span class="line"><span class="attribute">border-radius</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#2780e3</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 颜色块-紫</span><br><span class="line"><span class="selector-tag">span</span><span class="selector-id">#inline-purple</span> &#123;</span><br><span class="line"><span class="attribute">display</span>:inline;</span><br><span class="line"><span class="attribute">padding</span>:.<span class="number">2em</span> .<span class="number">6em</span> .<span class="number">3em</span>;</span><br><span class="line"><span class="attribute">font-size</span>:<span class="number">80%</span>;</span><br><span class="line"><span class="attribute">font-weight</span>:bold;</span><br><span class="line"><span class="attribute">line-height</span>:<span class="number">1</span>;</span><br><span class="line"><span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">text-align</span>:center;</span><br><span class="line"><span class="attribute">white-space</span>:nowrap;</span><br><span class="line"><span class="attribute">vertical-align</span>:baseline;</span><br><span class="line"><span class="attribute">border-radius</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#9954bb</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在你需要编辑的文章地方。放置如下代码:<br><code>&lt;span id=&quot;inline-blue&quot;&gt; 站点配置文件 &lt;/span&gt;</code><br><code>&lt;span id=&quot;inline-purple&quot;&gt; 主题配置文件 &lt;/span&gt;</code><br><code>&lt;span id=&quot;inline-yellow&quot;&gt; 站点配置文件 &lt;/span&gt;</code><br><code>&lt;span id=&quot;inline-green&quot;&gt; 主题配置文件 &lt;/span&gt;</code>   </p>
<h4 id="下载按钮样式"><a href="#下载按钮样式" class="headerlink" title="下载按钮样式"></a>下载按钮样式</h4><p>如：<br><a id="download" href="https://www.iots.vip" target="_blank"><i class="fa fa-download"></i><span> Download Now </span> </a><br>打开 <code>themes/next/source/css/_custom</code> 下的 <code>custom.styl</code> 文件,添加属性样式  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-id">#download</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: inline-block;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line"><span class="attribute">background</span>: transparent;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#000</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">2px</span>;</span><br><span class="line"><span class="attribute">transition</span>: all .<span class="number">5s</span> ease;</span><br><span class="line"><span class="attribute">font-weight</span>: bold;</span><br><span class="line">&amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在你需要编辑的文章地方。放置如下代码<br><code>&lt;a id=&quot;download&quot; href=&quot;https://www.iots.vip&quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;fa fa-download&quot;&gt;&lt;/i&gt;&lt;span&gt; Download Now &lt;/span&gt; &lt;/a&gt;</code></p>
<h3 id="简化部署命令"><a href="#简化部署命令" class="headerlink" title="简化部署命令"></a>简化部署命令</h3><p>每次更新博客都需要 <code>hexo clean</code> <code>hexo g</code>，太繁琐，我们可以通过 node.js 的 scripts 来简化部署命令，打开 &#96;&#96; 在末尾的 } 前添加：  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;g&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo clean &amp;&amp; hexo douban &amp;&amp; hexo g&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>这样我们执行 <code>npm run g</code> 就相当于执行了 <code>hexo clean &amp;&amp; hexo douban &amp;&amp; hexo g</code>  </p>
<h2 id="重装系统后博客处理"><a href="#重装系统后博客处理" class="headerlink" title="重装系统后博客处理"></a>重装系统后博客处理</h2><p>　　重装系统前，记得备份好整个目录，这样会避免很多麻烦事情。安装对应版本的 nodejs，重新执行 <code>npm install -g hexo-cli</code> 即可。  </p>
<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>　　本文收集并整理于网络，许多方法并非原创，文中绝大部分的转载内容会加上原作者的链接，望悉知。如有侵权，请原作者提醒，Alliot一定在第一时间内删除并致歉，各位朋友如果有什么其他好玩的或者棘手的问题，可以在本文结尾留言，我会和大家一起寻找解决方法的~  </p>
]]></content>
      <tags>
        <tag>折腾</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>iterm2自动输入堡垒机TOTP验证码</title>
    <url>//post/iterm2-jumpserver-totp-autocomplete.html</url>
    <content><![CDATA[<p>　　堡垒机强制启用了 MFA 双因子认证，每次都需要打开 APP 输入验证码，对于登录频繁的人来说非常不方便，于是利用 <code>expect</code> 与 <code>oath-toolkit</code> 完成了自动登录。（友情提示：本处堡垒机为仅内网可访问，且为边缘测试系统环境，出于安全考虑请不要在重要环境下使用）。 <span id="more"></span>  </p>
<h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install oath-toolkit</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此处secret为绑定 MFA 时的二维码扫描出来后的结果</span></span><br><span class="line">oathtool --totp -b [secret]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行上一行命令会产生一个动态验证码，对比手机APP上的验证码</span></span><br><span class="line"></span><br><span class="line">brew install expect</span><br></pre></td></tr></table></figure>


<h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><p>保存为 <code>jump.sh</code>，并 <code>chmod +x jump.sh</code> 给予执行权限即可。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/expect</span><br><span class="line"></span><br><span class="line">catch &#123;spawn ssh -p 2222 alliot@xx.com&#125;</span><br><span class="line">expect &quot;*password:*&quot;</span><br><span class="line">send &quot;密码\r&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">expect &quot;*OTP*&quot; &#123;</span><br><span class="line">        set code [exec sh -c &#123;oathtool --totp -b 上面扫描出来的密钥&#125;]</span><br><span class="line">        send &quot;$code\r&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">interact</span><br></pre></td></tr></table></figure>
<p>脚本非常简单，捕捉 <code>ssh -p xx</code> 的输出，匹配到 <code>password</code> 时发送密码，匹配到 <code>OTP</code> 时，发送 <code>oathtool</code> 生成的 TOTP 验证码。 之后直接执行 <code>jump.sh</code> 脚本即可登录堡垒机。</p>
]]></content>
      <tags>
        <tag>折腾</tag>
      </tags>
  </entry>
  <entry>
    <title>logrotate服务错误:read-only filesystem</title>
    <url>//post/logrotate-service-read-only-filesystem.html</url>
    <content><![CDATA[<p>　　一台服务器配置了 logrotate 来对 tomcat 日志进行切割，手动执行 <code>logrotate /etc/logrotate.conf</code> 的时候是正常,但是<code>systemd timer</code> 触发的  <code>logrotate.service</code> 状态为 failure， 手动执行 <code>systemctl status logrotate.service</code> 可以看到报错信息：<code>logrotate[2870734]: error: error opening /usr/local/tomcat/logs/catalina.out: Read-only file system</code>  <span id="more"></span> </p>
<h3 id="问题源头"><a href="#问题源头" class="headerlink" title="问题源头"></a>问题源头</h3><p>经过一番权限的检查，甚至给上了 777 权限，问题依旧。<br>由于手动执行 <code>logrotate</code> 是正常的，这时候想起查看它的 service 配置文件：  <code>logrotate.service</code>   </p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Rotate log files</span><br><span class="line"><span class="attr">Documentation</span>=man:logrotate(<span class="number">8</span>) man:logrotate.conf(<span class="number">5</span>)</span><br><span class="line"><span class="attr">ConditionACPower</span>=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=<span class="literal">on</span>eshot</span><br><span class="line"><span class="attr">ExecStart</span>=/usr/sbin/logrotate /etc/logrotate.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># performance options</span></span><br><span class="line"><span class="attr">Nice</span>=<span class="number">19</span></span><br><span class="line"><span class="attr">IOSchedulingClass</span>=best-effort</span><br><span class="line"><span class="attr">IOSchedulingPriority</span>=<span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hardening options</span></span><br><span class="line"><span class="comment">#  details: https://www.freedesktop.org/software/systemd/man/systemd.exec.html</span></span><br><span class="line"><span class="comment">#  no ProtectHome for userdir logs</span></span><br><span class="line"><span class="comment">#  no PrivateNetwork for mail deliviery</span></span><br><span class="line"><span class="comment">#  no ProtectKernelTunables for working SELinux with systemd older than 235</span></span><br><span class="line"><span class="comment">#  no MemoryDenyWriteExecute for gzip on i686</span></span><br><span class="line"><span class="attr">PrivateDevices</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">PrivateTmp</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">ProtectControlGroups</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">ProtectKernelModules</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">ProtectSystem</span>=full</span><br><span class="line"><span class="attr">RestrictRealtime</span>=<span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>注意看倒数第二行 <code>ProtectSystem=full</code> 这就是问题所在， 查看<a href="https://www.freedesktop.org/software/systemd/man/systemd.exec.html#ProtectSystem=">官方文档</a>  </p>
<blockquote>
<p>Takes a boolean argument or the special values “full” or “strict”. If true, mounts the &#x2F;usr&#x2F; and the boot loader directories (&#x2F;boot and &#x2F;efi) read-only for processes invoked by this unit. If set to “full”, the &#x2F;etc&#x2F; directory is mounted read-only, too. If set to “strict” the entire file system hierarchy is mounted read-only, except for the API file system subtrees &#x2F;dev&#x2F;, &#x2F;proc&#x2F; and &#x2F;sys&#x2F; (protect these directories using PrivateDevices&#x3D;, ProtectKernelTunables&#x3D;, ProtectControlGroups&#x3D;). This setting ensures that any modification of the vendor-supplied operating system (and optionally its configuration, and local mounts) is prohibited for the service. It is recommended to enable this setting for all long-running services, unless they are involved with system updates or need to modify the operating system in other ways. If this option is used, ReadWritePaths&#x3D; may be used to exclude specific directories from being made read-only. This setting is implied if DynamicUser&#x3D; is set. This setting cannot ensure protection in all cases. In general it has the same limitations as ReadOnlyPaths&#x3D;, see below. Defaults to off.</p>
</blockquote>
<p>捕捉一下关键点， 当此值为 <code>full</code> 时， <code>/usr</code>, <code>boot</code>, <code>/etc</code>, <code>efi</code> 会挂载为 read-only， 值得一提的是，我们的 tomcat 恰好是安装在 <code>/usr</code> 下的， 出现前面的报错是自然的。  </p>
<h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><p>通过文档得知，我们可以利用 <code>ReadWritePaths</code> 来指定可读写的路径。<br><code>vim /lib/systemd/system/logrotate.service</code> 在末尾加上：  </p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ReadWritePaths</span><span class="operator">=/</span>usr/local/tomcat/logs</span><br></pre></td></tr></table></figure>
<p>执行： </p>
<figure class="highlight nsis"><table><tr><td class="code"><pre><span class="line"><span class="params">system</span>ctl daemon-reload </span><br><span class="line"></span><br><span class="line"><span class="params">system</span>ctl restart logrotate.service</span><br></pre></td></tr></table></figure>
<p>即可。  </p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>notepad++中实现markdown语法高亮与实时预览</title>
    <url>//post/notepad-support-markdown.html</url>
    <content><![CDATA[<p>　　notepad++是一个十分强大的编辑器，除了可以用来制作一般的纯文字说明文件，也十分适合编写计算机程序代码。Notepad++ 不仅有语法高亮度显示，也有语法折叠功能，并且支持宏以及扩充基本功能的外挂模组。当时对markdown支持不够。<br>　　这里通过插件与自定义语法让notepad++变成一个markdown书写工具。<span id="more"></span></p>
<h3 id="导入markdown语法规则"><a href="#导入markdown语法规则" class="headerlink" title="导入markdown语法规则"></a>导入markdown语法规则</h3><h4 id="下载所需文件"><a href="#下载所需文件" class="headerlink" title="下载所需文件"></a>下载所需文件</h4><p>　　由于GitHub不时抽风，我这里将需要用到的工具打包上传到网盘。<br><a href="http://pan.baidu.com/s/1qXQWa3i">下载链接</a><br>提取码：4hvm</p>
<h4 id="导入语法规则"><a href="#导入语法规则" class="headerlink" title="导入语法规则"></a>导入语法规则</h4><p>打开Notepad++，点击“语言” 选择“自定义语言格式” 点击“导入”，选择下载并解压后文件夹中的“userDefineLang_markdown.xml”文件。<br>导入完成后重启notepad++，点击“语言”，选择“markdown”即可。</p>
<h3 id="安装实时预览插件"><a href="#安装实时预览插件" class="headerlink" title="安装实时预览插件"></a>安装实时预览插件</h3><p>打开notepad++，点击“设置”，选择“导入-导入插件”，将之前下载的文件中的“NppMarkdown.dll”导入即可。</p>
<h3 id="打开插件"><a href="#打开插件" class="headerlink" title="打开插件"></a>打开插件</h3><p>打开notepad++，点击“插件”，选择“NppMarkdown”  在右侧出现的“preview markdown”窗口底部，勾选“live preview” 同时点击“preview”即可。<br>效果如图：<img data-src="https://static.iots.vip/notepad++_markdown.jpg" alt="notepad++中markdown预览插件">  </p>
<h3 id="不让文字下面的红线显示"><a href="#不让文字下面的红线显示" class="headerlink" title="不让文字下面的红线显示"></a>不让文字下面的红线显示</h3><p>菜单栏 —— 插件—— DSpellCheck 取消勾选即可<br><del>2019年7月5日更新</del><br>关掉 notepad++ 的代码检查功能（即底下的红色波浪线，快捷键为 ALT+A） </p>
]]></content>
      <tags>
        <tag>折腾</tag>
      </tags>
  </entry>
  <entry>
    <title>shell中exit 0与exit 1</title>
    <url>//post/shell-exit0-exit1.html</url>
    <content><![CDATA[<p>　　shell 脚本中有时候需要运行退出脚本操作，可以使用 exit 来实现退出脚本<span id="more"></span>  </p>
<h1 id="exit-0"><a href="#exit-0" class="headerlink" title="exit 0"></a>exit 0</h1><p>　　使用 <code>eixt 0</code> 退出的脚本，表示脚本正常运行退出，返回 0，运行后 <code>$?</code> 的值为 0<br>如：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# cat alliot.sh </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &quot;exit 0 test&quot;</span><br><span class="line">exit 0</span><br><span class="line">[root@localhost ~]# ./alliot.sh </span><br><span class="line">exit 0 test</span><br><span class="line">[root@localhost ~]# echo $?</span><br><span class="line">0</span><br></pre></td></tr></table></figure>
<h1 id="exit-1"><a href="#exit-1" class="headerlink" title="exit 1"></a>exit 1</h1><p>　　使用 <code>eixt 1</code> 退出的脚本，表示脚本非正常运行退出，返回 1，运行后 <code>$?</code> 的值为 1<br>如：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# cat alliot.sh </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &quot;exit 1 test&quot;</span><br><span class="line">exit 1</span><br><span class="line">[root@localhost ~]# ./alliot.sh </span><br><span class="line">exit 1 test</span><br><span class="line">[root@localhost ~]# echo $?</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>rm: cannot remove &#39;filename&#39;: Device or resource busy的解决方法</title>
    <url>//post/device-or-resource-busy.html</url>
    <content><![CDATA[<p>今天删除备份的时候出现了 rm: cannot remove ‘filename’: Device or resource busy 的报错，本文记录了原因与解决方法。<span id="more"></span></p>
<h3 id="查看挂载情况"><a href="#查看挂载情况" class="headerlink" title="查看挂载情况"></a>查看挂载情况</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">df</span> -h</span><br></pre></td></tr></table></figure>
<p><img data-src="https://static.iots.vip/2016/11/201611139018_5543.png"><br>发现要rm的目录中挂载了一个数据盘。于是对其进行umount ，这时提示</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line"><span class="title">umount: filename:</span> target is busy</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">### 用 fuser 终止进程  </span><br><span class="line">在通过参数指定挂载点时，fuser 命令的 -k 选项会自动地终止找到的进程。当然，必须作为root执行 fuser 命令，才能终止属于其他用户的进程。  </span><br><span class="line">命令格式为  </span><br><span class="line">``` bash</span><br><span class="line">fuser -k filename</span><br></pre></td></tr></table></figure>

<h3 id="使用df-h再次查看挂载情况"><a href="#使用df-h再次查看挂载情况" class="headerlink" title="使用df -h再次查看挂载情况"></a>使用df -h再次查看挂载情况</h3><p>确认无误后，再次执行  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf filename</span><br></pre></td></tr></table></figure>
<p>完成删除。</p>
<h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><p>参考资料：@<a href="http://blog.sina.com.cn/s/blog_7eb1931901010yb2.html">竹影青瞳</a><br>　　umount 命令的标准 Linux 版本包含一个延迟卸载选项 -l，它有助于卸载正在使用的文件系统。这个命令需要 Linux 内核 2.4.11 或更高版本，目前这通常没问题。执行 umount -l &#x2F;name&#x2F;of&#x2F;file system 可以让指定的文件系统与系统的目录层次结构脱离，让新进程不能使用这个文件系统，然后当正在访问它的所有进程都终止时卸载它。这很方便，但是当需要马上卸载文件系统时它并不合适。<br>　　如果需要马上卸载文件系统，而文件系统报告忙碌，还有其他办法。如果您是系统的惟一用户，那么只需终止阻止文件系统卸载的进程。这需要查看所有窗口，寻找 并终止正在写这个分区或使用它作为当前工作目录的暂停的进程或后台进程。但是，在有许多本地用户和远程用户的多用户系统上，这种方法是不实际的。幸运的 是，开放源码社区提供了一些命令，可以轻松地识别并终止这些进程。  </p>
<h4 id="用-lsof-寻找打开的文件"><a href="#用-lsof-寻找打开的文件" class="headerlink" title="用 lsof 寻找打开的文件"></a>用 lsof 寻找打开的文件</h4><p>lsof (list open files) 命令列出特定的文件系统、目录或设备上所有打开的文件以及与它们相关联的进程。在大多数 UNIX 和类 UNIX 系统上都可以使用 lsof 命令。  </p>
<p>　　在默认情况下，lsof 命令列出当前打开的所有文件、共享库和目录，并提供尽可能多的相关信息。即使在负载很轻的系统上，这个命令的输出也非常长，因此通常通过命令行参数指定一 个目录名，或者使用管道筛选它的输出。例如，假设希望卸载挂载在 &#x2F;opt2目录上的文件系统。为了查看与 &#x2F;opt2 目录相关联的所有进程，应该执行下面所示的命令。<br><img data-src="https://static.iots.vip/2016/11/201611137991_970.jpg"><br>　　需要终止所有这些进程，然后才能卸载 &#x2F;opt2 分区。因为这个列表中的进程都不能写任何文件，所以可以使用 kill 命令并指定第二列中列出的进程 ID (PID) 以终止它们，然后就可以顺利地卸载分区。注意，PID 23402 与最后两行相关联 — 第一行表示 more 命令以 &#x2F;opt2 作为当前工作目录 (cwd)，第二行表示 more 命令打开了 &#x2F;opt2&#x2F;resume.txt 文件。<br>　　lsof 命令还有许多选项，可以帮助您识别不同类型的文件系统上打开的文件和目录、打开了网络套接字的进程、正在使用特定的库的进程等等。lsof 命令的缺点是，必须联系用户并要求他们终止某些进程，或者自己手工终止它们。fuser 命令更复杂，但是更强大，在作为根用户运行时可以替您执行许多进程终止工作。  </p>
<h4 id="用-fuser-寻找用户进程"><a href="#用-fuser-寻找用户进程" class="headerlink" title="用 fuser 寻找用户进程"></a>用 fuser 寻找用户进程</h4><p>　　fuser (find user processes) 命令也是一个开放源码应用程序，可以帮助您识别阻止文件系统卸载的进程。fuser 命令寻找与作为命令行参数指定的文件、目录或文件系统相关联的进程。本文主要关注对文件系统挂载点使用 fuser。关于 fuser 命令的更多信息，请参见它的在线参考信息。fuser 命令要求系统支持 &#x2F;proc 文件系统。因此，在所有 Linux 发行版和 FreeBSD 系统上都可以使用它。关于获得 fuser 命令的源代码的方法请参见 网络。<br>　　与 lsof 命令一样，作为命令行参数提供文件系统挂载点名称是使用 fuser 命令识别阻止文件系统卸载的进程的最简单方法：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fuser filename</span><br></pre></td></tr></table></figure>
<p>fuser 命令的输出指出正在使用指定挂载点的进程的 PID。每个 PID 后面有一个字母，它表示与 PID 相关联的进程以什么方式使用指定的挂载点。最常见的字母是前面示例所示的 c，这表示指定的进程使用此文件系统上的一个目录作为当前工作目录。<br>但是，fuser 命令的默认输出不便于最终用户使用，即使按 Linux 标准来看也是如此。fuser 命令提供一个 -v 选项，它在 fuser 命令的输出中增加一些与标准 ps 命令相似的输出，如下面所示：<br><img data-src="https://static.iots.vip/2016/11/201611139698_9941.png"><br>然后，可以使用标准的 kill 命令手工终止指定的进程，或者像下一节中解释的，使用 fuser 命令的一些高级功能自动地终止它们。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>shell脚本常见错误排查</title>
    <url>//post/shell-error-checking.html</url>
    <content><![CDATA[<p>　　本文记录写新手在 shell 脚本的过程中经常遇到的报错与逃坑方案。<span id="more"></span>  </p>
<h2 id="常见报错"><a href="#常见报错" class="headerlink" title="常见报错"></a>常见报错</h2><p>　　这里列举一些新手经常遇到的报错。  </p>
<h3 id="’-r’-command-not-found或-’-r’-未找到命令"><a href="#’-r’-command-not-found或-’-r’-未找到命令" class="headerlink" title="$’\r’:  command not found或$’\r’: 未找到命令"></a>$’\r’:  command not found或$’\r’: 未找到命令</h3><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>　　用 Windows 的同学，经常会遇到这个问题，比如我，习惯性在桌面新建 <code>.txt</code> 文件，更改后缀名为 <code>.sh</code>，然后用 notepad++ 进行打开。这是由于 Windows 与 Unix 下换行符的差异导致的，Windows 默认新建 <code>.txt</code> 的文件格式为 dos 文件格式，Windows 下换行符其实为”\CR\LF”，Unix 下换行符为”\CR”。  </p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>方法一： notepad++ 打开脚本，右键 notepad++ 右下角的 Windows(CR LF) 修改为 Unix 保存即可。这里最好在 notepad++ 中选择 设置-首选项-新建的”格式”中选择”Unix(LF)”。<br>方法二： 使用 dos2unix 转换格式  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install dos2unix		# CentOS </span><br><span class="line">apt-get install dos2unix	# Ubuntu </span><br></pre></td></tr></table></figure>
<p>执行:  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dos2unix filename  </span><br></pre></td></tr></table></figure>
<p>即可。  </p>
<h3 id="d-command-not-found或-d-未找到命令"><a href="#d-command-not-found或-d-未找到命令" class="headerlink" title="[-d: command not found或[-d: 未找到命令"></a>[-d: command not found或[-d: 未找到命令</h3><p>　　出现这个报错一般是部分新手不知道 if 语句两边的中括号要加空格。如下列代码:  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span>  </span><br><span class="line">if [-d /etc]; then</span><br><span class="line">        echo &quot;ok&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<p>就会出现这个报错。 改成如下即可：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span>  </span><br><span class="line">if [空格-d /etc空格]; then </span><br><span class="line">        echo &quot;ok&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h3 id="badinterpreter-Nosuchfileordirectory"><a href="#badinterpreter-Nosuchfileordirectory" class="headerlink" title="[:badinterpreter:Nosuchfileordirectory]"></a>[:badinterpreter:Nosuchfileordirectory]</h3><p>　　这是因为在 Windows 下编辑，传到 Linux 下执行，由于编码不一致，导致的：<br>在 DOS&#x2F;windows 里，文本文件的换行符为 <code>rn</code>，而在 <code>nix</code> 系统里则为<code>n</code>，所以<code>DOS/Windows</code> 里编辑过的文本文件到了 <code>nix</code> 里，每一行都多了个 <code>^M</code>。  </p>
<h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi:%s/r//g:%s/^M//g # （^M输入用Ctrl+v,Ctrl+m）</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或</span> </span><br><span class="line">vi:set ff=unix  </span><br></pre></td></tr></table></figure>

<h3 id="引用变量时，变量中的’-’字符被解释器运行了"><a href="#引用变量时，变量中的’-’字符被解释器运行了" class="headerlink" title="引用变量时，变量中的’*’字符被解释器运行了"></a>引用变量时，变量中的’*’字符被解释器运行了</h3><p>先看范例：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">JAVA_OPTIONS=&#x27;-Dspring.session.redis.cleanup-cron=&quot;0 * * * * ?&quot;&#x27;</span><br><span class="line">echo $JAVA_OPTIONS</span><br></pre></td></tr></table></figure>
<p>执行该脚本时，结果为： </p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">-Dspring<span class="selector-class">.session</span><span class="selector-class">.redis</span>.cleanup-cron=<span class="string">&quot;0 1.sh mysql.socket tmpfile</span></span><br></pre></td></tr></table></figure>
<p>后面的 ‘<em>‘ 变成了脚本目录下的文件名，即 ‘</em>‘ 被解释器运行了。<br>要避免这种情况只需要在引用变量的时候，用双引号包裹变量即可：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">JAVA_OPTIONS=&#x27;-Dspring.session.redis.cleanup-cron=&quot;0 * * * * ?&quot;&#x27;</span><br><span class="line">echo &quot;$JAVA_OPTIONS&quot;</span><br></pre></td></tr></table></figure>
<p>执行后结果为：  </p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">-Dspring.session.redis.cleanup-cron</span>=<span class="string">&quot;0 * * * * ?&quot;</span></span><br></pre></td></tr></table></figure>
<p>达到预期的效果。  </p>
<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><h3 id="脚本检验"><a href="#脚本检验" class="headerlink" title="脚本检验"></a>脚本检验</h3><p>　　脚本在运行前最好检查一下语法错误：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh -n filename  # 不运行脚本，只检查语法错误  </span><br><span class="line">sh -x filename  # 运行并跟踪脚本执行过程   </span><br></pre></td></tr></table></figure>
<p>这里也可以在脚本的开头加入 <code>set -x</code> 来达到与上述 <code>sh -x</code> 同样的效果。<br>关于这方面详细可以参考  <a href="https://blog.csdn.net/weixin_42167759/article/details/80700719]">shell脚本——调试（-n &#x2F; -x &#x2F;-c）</a>  </p>
<h3 id="ShellCheck-工具"><a href="#ShellCheck-工具" class="headerlink" title="ShellCheck 工具"></a>ShellCheck 工具</h3><p>　　ShellCheck 是一款 shell 脚本静态检查工具，帮助查出错误，同时也会给出一些建议。  </p>
]]></content>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Using a proxy for ssh connections based on netcat</title>
    <url>//post/ssh-over-proxy-by-nc.html</url>
    <content><![CDATA[<p>　　Sometimes, we need to forward our ssh connection through a proxy, For example, you want to connect your cloud server through socks5 proxy. When you try to specify a proxy by executing <code>export all_proxy=socks5://127.0.0.1:123</code> command through terminal, you will find that it does not take effect for ssh connection. Fortunately, <code>netcat</code> can easily achieve your purpose.<span id="more"></span>   </p>
<h3 id="Install-netcat"><a href="#Install-netcat" class="headerlink" title="Install netcat"></a>Install netcat</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">homebrew</span> </span><br><span class="line">brew install netcat</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">apt</span> </span><br><span class="line">apt install netcat</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">rhel/centos</span>  </span><br><span class="line">yum install nmap</span><br></pre></td></tr></table></figure>

<h3 id="Configure-ssh-config"><a href="#Configure-ssh-config" class="headerlink" title="Configure ssh config"></a>Configure ssh config</h3><p><code>vim ~/.ssh/config</code> (Create it if it doesn’t exist.)</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Host</span> alliot_server-<span class="number">01</span>       <span class="comment"># specify a alias for this host</span></span><br><span class="line">  Hostname <span class="number">192.168.1.123</span>    <span class="comment"># the IP/Hostname of this ssh connection</span></span><br><span class="line">  User root                 <span class="comment"># ssh username</span></span><br><span class="line">  ForwardAgent <span class="literal">yes</span> </span><br><span class="line">  Port <span class="number">22</span>                   <span class="comment"># port</span></span><br><span class="line">  ProxyCommand /usr/bin/nc -X <span class="number">5</span> -x <span class="number">127.0.0.1:7890</span> %h %p     <span class="comment"># This configuration represents a proxy using the SOCKS v.5 protocol, and the proxy address is 127.0.0.1:1234</span></span><br></pre></td></tr></table></figure>
<p>After do this, You can establish a connection on the basis of this proxy directly through <code>ssh alliot_server-01</code>.  </p>
<h3 id="Dry-run"><a href="#Dry-run" class="headerlink" title="Dry-run"></a>Dry-run</h3><p>　　If you’re only connecting temporarily and don’t need persistence, you can directly use the following command:  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -o ProxyCommand=&quot;/usr/bin/nc -X 5 -x 127.0.0.1:1234 %h %p&quot; root@192.168.1.123 -p 22</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>折腾</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>typedef与#define的区别及取舍</title>
    <url>//post/typedef-define-c.html</url>
    <content><![CDATA[<p>　　今天在看郭天祥老师的代码与普中科技的源码的时候发现两者分别采用了#define与typedef两种不同的方式来对数据类型声明与自定义，于是查了一下两者的区别 <span id="more"></span>  </p>
<blockquote>
<p>typedef是一种在计算机编程语言中用来声明自定义数据类型，配合各种原有数据类型来达到简化编程的目的的类型定义关键字。 #define是预处理指令。  </p>
</blockquote>
<p> #define是C中定义的语法，typedef是C++中定义的语法，二者在C++中可以通用，但#define成了预编译指令，typedef当成语句处理。Typedef和define都可以用来给对象取一个别名，但是两者却有着很大不同。  </p>
<h2 id="区别如下"><a href="#区别如下" class="headerlink" title="区别如下"></a>区别如下</h2><h3 id="功能："><a href="#功能：" class="headerlink" title="功能："></a>功能：</h3><p>typedef只能用来定义类型的别名，而#define作为宏定义，可替换任意字符。  </p>
<h3 id="作用域："><a href="#作用域：" class="headerlink" title="作用域："></a>作用域：</h3><p>typedef的作用域类似于定义变量的类型一样，若在main函数前，则相当于全局变量的作用域，若在函数中，则只在所在函数中作用。<br> #define则没有定义域的限制，只要是定义过的宏，在所有的地方都能使用。  </p>
<h3 id="作用时间："><a href="#作用时间：" class="headerlink" title="作用时间："></a>作用时间：</h3><p>#define作为宏替换，作用在预处理阶段，即编译之前，只进行机械式的字符串替换，而不进行任何检查。而typedef则在编译阶段作用，因此具有类型检查的作用。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>　　结合上文，不难看出，在对数据类型名进行自定义时，采用typedef更为保险，当然也非一成不变的规律，主要是理解二者的区别，依情况选用。</p>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>【救火】误动libc.so.6的补救措施</title>
    <url>//post/do-not-modify-libc-so-6.html</url>
    <content><![CDATA[<p>　　国庆假期闲来无事，对自己的群晖 NAS（非生产环境） 内的一个内置软件包做编译升级。在不明确该动态库具体作用的情况下，误操作将 <code>/lib/libc.so.6</code> 这个动态库文件重命名为了 <code>libc.so.6.bak</code>，导致 <code>ls</code>、<code>mv</code>、<code>cp</code> 等一系列基础命令无法使用，本文记录一下解决方案。<span id="more"></span></p>
<h3 id="症状表现"><a href="#症状表现" class="headerlink" title="症状表现"></a>症状表现</h3><p>　　在执行完(切勿作死！！！) <code>mv /lib/libc.so.6 /lib/libc.so.6.bak</code> 的一瞬间，终端便报错：  </p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">mv /lib/libc.<span class="keyword">so</span>.6 /lib/libc.<span class="keyword">so</span>.6.bak</span><br><span class="line">whoami: <span class="keyword">error</span> <span class="keyword">while</span> loading shared libraries: libc.<span class="keyword">so</span>.6: cannot <span class="keyword">open</span> shared object <span class="keyword">file</span>: <span class="keyword">No</span> such <span class="keyword">file</span> or directory</span><br><span class="line">logger: <span class="keyword">error</span> <span class="keyword">while</span> loading shared libraries: libc.<span class="keyword">so</span>.6: cannot <span class="keyword">open</span> shared object <span class="keyword">file</span>: <span class="keyword">No</span> such <span class="keyword">file</span> or directory</span><br></pre></td></tr></table></figure>
<p>　　想执行 <code>mv</code> 将其重新命名回来的时候，已经无济于事。大部分的命令均报 <code>error while loading shared libraries: libc.so.6: cannot open shared object file: No such file or directory</code> 错误。  </p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>　　首先，如果是生产环境遇到这种情况，在没有明确解决办法的情况下，请第一时间停止一切操作，不要退出终端。  </p>
<h4 id="未退出终端的情况下"><a href="#未退出终端的情况下" class="headerlink" title="未退出终端的情况下"></a>未退出终端的情况下</h4><p>　　这种情况比较简单，利用 LD_PRELOAD 这个环境变量来指定正确的动态库，再执行命令即可  </p>
<blockquote>
<p>LD_PRELOAD是Linux系统的一个环境变量，它可以影响程序的运行时的链接（Runtime linker），它允许你定义在程序运行前优先加载的动态链接库。这个功能主要就是用来有选择性的载入不同动态链接库中的相同函数。通过这个环境变量，我们可以在主程序和其动态链接库的中间加载别的动态链接库，甚至覆盖正常的函数库。一方面，我们可以以此功能来使用自己的或是更好的函数（无需别人的源码），而另一方面，我们也可以以向别人的程序注入程序，从而达到特定的目的。  </p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">LD_PRELOAD=/lib/libc.so.6.bak mv /lib/libc.so.6.bak /lib/libc.so.6</span><br></pre></td></tr></table></figure>

<h4 id="已退出终端或重启"><a href="#已退出终端或重启" class="headerlink" title="已退出终端或重启"></a>已退出终端或重启</h4><p>　　这种情况下就比较麻烦，需要使用光盘镜像刻录的启动U盘，进入救援模式，挂载硬盘分区来进行修复了。（部分系统原有 SELinux 的，修改前需要关闭 SELinux，否则无法启动）   </p>
<h5 id="群晖解决方案"><a href="#群晖解决方案" class="headerlink" title="群晖解决方案"></a>群晖解决方案</h5><p>　　首先需要明白的是，群晖的系统存在于每块磁盘上的第一个分区，文件系统类型为 ext4,因此，当我们需要修改系统文件的时候，需要对每块磁盘都进行修改。<br>　　将磁盘挂载到 CentOS（其他你更为熟悉的发行版均可），通过 <code>lsblk</code> 查看磁盘的分区情况。将磁盘的第一块分区使用 <code>mount -t ext4 /dev/xx（分区设备名）/mnt </code> 的方式挂载，再进行修改即可。（群晖貌似是没开SELinux的，所以直接修改文件也不会有大坑）。修改完后别忘记 <code>umount</code> 防止出现数据损坏。<br>　　待所有盘都修改完成后，再全部插入到群晖中开机。<br>　　如果要恢复数据文件，则在第三个分区。用以上方式同理（数据文件一般为 btrfs 文件系统类型）即可。倘若你的存储空间为 SHR 模式，则需先安装 <code>mdadm</code> 来还原软 RAID： </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mdadm -Asf &amp;&amp; vgchange -ay</span><br></pre></td></tr></table></figure>
<p>这时候会提示生成了阵列drive，直接对其挂载即可：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mount -t btrfs /dev/mdx(上一步提示的) /mnt</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>折腾</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【转载】C语言结构体中(.)与(-&gt;)的区别</title>
    <url>//post/c-1.html</url>
    <content><![CDATA[<p>　　在对结构体成员进行访问时有(.)与(-&gt;)两种方式，这两种方式的使用方法有些不同。转自<a href="blog.csdn.net/shenyuanluo/article/details/51146140">@ShenYuanLuo</a>  <span id="more"></span>  </p>
<h3 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h3><p>　　二者都是二元运算符，右边的操作数均为成员名称。  </p>
<h3 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h3><p>　　点运算符(.)左边为结构体名称。<br>　　箭头运算符(-&gt;)左边为结构体指针。<br>如下：  </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>          // 定义一个结构体类型：<span class="title">DATA</span>  </span></span><br><span class="line"><span class="class">&#123;</span>  </span><br><span class="line">    <span class="type">char</span> key[<span class="number">10</span>];       <span class="comment">// 结构体成员：key  </span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];      <span class="comment">// 结构体成员：name  </span></span><br><span class="line">    <span class="type">int</span> age;            <span class="comment">// 结构体成员：age  </span></span><br><span class="line">&#125;DATA;  </span><br><span class="line">      </span><br><span class="line">DATA data;              <span class="comment">// 声明一个结构体变量  </span></span><br><span class="line">DATA *pdata;            <span class="comment">// 声明一个指向结构体的指针  </span></span><br><span class="line">      </span><br><span class="line"><span class="comment">// 访问数据操作如下：  </span></span><br><span class="line">data.age = <span class="number">24</span>;          <span class="comment">// 结构体变量通过点运算符( . )访问  </span></span><br><span class="line">pdata-&gt;age = <span class="number">24</span>;        <span class="comment">// 指向结构体的指针通过箭头运算符( -&gt; )访问  </span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>转载</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>两个远程仓库不同步的解决方案</title>
    <url>//post/sync-all-git-repository.html</url>
    <content><![CDATA[<p>　　本地一个仓库添加了 Github 与 Coding 两个远程仓库同步(<a href="/post/coding-github-repository.html">配置Coding仓库与GitHub仓库同步更新</a>)，由于在 GitHub 上直接提交了一个 commit 导致本地再 push 的时候出现 rejected。<span id="more"></span>  </p>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>　　出现与远程仓库不同步的情况，肯定首先想到的是 <code>git pull</code> 下来，然而这里我添加的是两个远程仓库，只有一个仓库有了改动，恰好设置的第一个远程仓库是未改动的那个仓库，这就导致我 <code>git pull</code> 下来的是未改动的那个远程仓库，所以再执行 <code>git push</code> 的时候依然出现如下图所示的 rejected:<br><img data-src="https://static.iots.vip/sync-all-git-repository.png" alt="git-rejected"></p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>　　这里我的解决方法比较笨，我不是添加的两个远程仓库吗，我先移除掉那个未改动的仓库再 <code>git pull</code> 之后再加回来执行 <code>git push</code> 不就 OK 了吗，我真聪 (sha) 明 (diao) …<br>　　打开本地仓库下的 .git 的 config 文件，移除掉 [remote “origin”] 中那个未改动的远程仓库地址，保存后 <code>git pull</code>，再改回来 <code>git push</code>。<br>ps: 其实我想知道有啥更好的方法来 <code>git pull</code> 指定的远程仓库的…  </p>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>不到300块捡一台4盘位NAS——蜗牛星际上车记</title>
    <url>//post/diy-nas-woniuxingji.html</url>
    <content><![CDATA[<p>　　最近小众币圈翻车流出大量的星际蜗牛矿车（具体事件：<a href="https://zhuanlan.zhihu.com/p/59752860">蜗牛星际矿机骗局：一堆价值800的机器骗到20亿后，变成废铁-知乎</a>）， 咱这么有爱心，肯定是要为拯救受害者尽一份微薄之力的，于是闲鱼入了一台 D 版单网口，J1900+4G垃圾内存+16G垃圾固态，260 德邦包邮。<span id="more"></span><br>一共有 ABCD 四个版本，可以见图（来自闲鱼卖家）：<img data-src="https://static.iots.vip/%E8%9C%97%E7%89%9B%E6%98%9F%E9%99%85%E7%89%88%E6%9C%AC%E5%AF%B9%E6%AF%94.png" alt="蜗牛星际版本对比">  </p>
<h3 id="开箱"><a href="#开箱" class="headerlink" title="开箱"></a>开箱</h3><p>快递盒子用的营养快线，泡沫不多，好在德邦没有给我丢变形：<br><img data-src="https://static.iots.vip/%E8%9C%97%E7%89%9B%E6%98%9F%E9%99%85%E5%BF%AB%E9%80%92%E5%9B%BE.JPG" alt="蜗牛星际快递图"> ，整体上成色很新，不过箱子顶部缝隙有点大，像是被卖家拆过的，强迫症有点不太舒服，但是想到价格，还是那句话，要啥自行车，对吧。  </p>
<h3 id="拆机"><a href="#拆机" class="headerlink" title="拆机"></a>拆机</h3><p>开始拆机，这里要注意一下，拆开外壳以后，由于电源与机箱散热风扇还有硬盘位间隙很小，所以要先拆掉电源，再拆机箱风扇。<br><img data-src="https://static.iots.vip/%E8%9C%97%E7%89%9B%E6%98%9F%E9%99%85%E6%8B%86%E6%9C%BA%E5%9B%BE1.JPG" alt="蜗牛星际拆机图1"><br>电源成色很新，不过拆开看，这做工很单薄，为了防止炸硬盘，之后得换个电源：<br><img data-src="https://static.iots.vip/%E8%9C%97%E7%89%9B%E6%98%9F%E9%99%85%E7%94%B5%E6%BA%90%E6%8B%86%E8%A7%A3%E5%9B%BE.JPG" alt="蜗牛星际电源拆解图"><br>接下来要拆的是硬盘位，这个有点麻烦，在拿掉硬盘架后，需要先把前面板的四个固定螺母拧下来后再取掉前后螺丝：<br><img data-src="https://static.iots.vip/%E8%9C%97%E7%89%9B%E6%98%9F%E9%99%85%E6%8B%86%E6%9C%BA%E5%9B%BE2.JPG" alt="蜗牛星际拆机图2"><br>拆解完成，让我们来看看内存 CPU 与固态：<br><img data-src="https://static.iots.vip/%E8%9C%97%E7%89%9B%E6%98%9F%E9%99%85%E5%86%85%E5%AD%98%E5%9B%BA%E6%80%81CPU%E5%9B%BE.JPG" alt="蜗牛星际内存固态CPU图"><br>内存固态都是很菜的，考虑到平时四盘位的机箱都两百来块了，这相当于买机箱送主板送内存送固态送电源，垃圾不垃圾就无所谓了，要啥自行车。   </p>
<h3 id="上车注意"><a href="#上车注意" class="headerlink" title="上车注意"></a>上车注意</h3><p>　　一般来说 200+ 的价格基本可以入手，其实整机来说，换个机箱静音风扇和一个好点的电源就完全足够用来当 NAS 使用了，机箱风扇声音太大，换了一个马云家 9.9 包邮的 3PIN+4 PIN “<a href="https://detail.tmall.com/item.htm?id=37567919684&spm=a1z09.2.0.0.b9232e8dOVRkSQ">先马游戏风暴12CM机箱风扇</a> ”后清净了许多，很多大佬都说这电源容易炸硬盘，推荐换一个好点的电源，但我电源目前还没有换，因为我现在只带了一块盘，以后加盘的话再去马云家捡一个拆机台达之类的，据说NG大眼仔家改好静音的 400W 台达不错，先观望一下。<br>　　另外就是，硬盘架的固定螺丝需要沉头螺丝（固态盘的螺丝可以用），普通台式机的圆头螺丝会卡住，我买的马云家的“<a href="https://item.taobao.com/item.htm?spm=a1z09.2.0.0.b9232e8dOVRkSQ&id=538981478873">硬盘沉头螺丝钉 服务器硬盘托架螺丝 机柜粗牙螺丝 6#-32美制螺丝</a> ”，满 6 块钱包邮。<br>　　普遍来说都是玩黑裙晖了，这里建议将自带的固态用作引导盘，这样可以省去一块 U 盘。 具体安装与洗白可以参照网上的，这里就不具体展开了，有时间再整理一下。  </p>
<p><del>2020年2月17日 补充</del><br>　　数据安全，除去前面讲到的电源方面，如果真心当主力 NAS，硬盘笼的背板是需要更换的，原装背板基本没“料”，光秃秃的，如果不进行热插拔操作，问题还是不大，网上目前 2 个流派，不折腾的是更换定制的背板，马云家大概在 100 大洋的样子，另外一个流派就是自己动手给原装背板 “加料”，稳定性目前也没有相关的测试资料。<br>　　现在原装电源，带 2 块盘，7x24 年底跑 PT、BT 到现在，还是巴适的很。当然我这里的盘里基本就是些电影、歌单等临时的东西，重要数据不建议玩火。   </p>
]]></content>
      <tags>
        <tag>折腾</tag>
        <tag>硬件</tag>
      </tags>
  </entry>
  <entry>
    <title>中银香港丝滑开户总结</title>
    <url>//post/summary-of-smooth-account-opening-in-boc-hong-kong.html</url>
    <content><![CDATA[<p>我在这里分享一下我最近在香港中银行成功开户的经历。  <span id="more"></span>  </p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>我是在公众号 “中银香港微服务” 提前一个星期和朋友一起预约了下午的 “日出康城中银分行网点” 开户服务。<br>早上到香港比较早，于是在关口附近的 “上水” 分行尝试一下 Walk in，没想到开成功了，下午陪朋友去预约的 “日出康城” 反而被拒。  </p>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><h4 id="出发前："><a href="#出发前：" class="headerlink" title="出发前："></a>出发前：</h4><ul>
<li>邮箱： 开户时需要填写邮箱，建议使用 gmail&#x2F;outlook 等，需要确保能收到邮件。  </li>
<li>港币现金：在内地银行购汇，一般的分行都提供这项服务，只需带身份证和银行卡就可以。在关口的 ATM 也可以用银联卡换取港币，但是会收取手续费。我备了 2000 港币用于开户，另外600港币用于其他开销。  </li>
<li>中银香港手机APP： IOS 用户可以在 App Store下载； Android 用户如果能在 Google Play下载最好，否则可以直接在官网下载： <a href="https://www.bochk.com/tc/more/ebanking/apps.html">中银香港APP下载官网</a> 一定要提前下载好，开户时需要填写资料。  </li>
<li>国内手机开通国际漫游功能： 老卡一般都有，没有的可以直接联系运营商客服开通，以确保开户时能收到验证码。 数据流量的话，到关口时再在支付宝&#x2F;微信搜索跨境流量包即可。  </li>
<li>信用卡账单、地址证明（水电煤气账单）、银行流水等： 是否需要这些文件取决于分行和审核人，虽然我这次没有用到，但我还是建议最好准备一份打印备用。  </li>
<li>充电宝： 共享充电宝点不多，需要押金，所以如果能自带就最好。  </li>
<li>英(港)转中插头： 我是用于手机快充头用的，可以在淘宝买个10块以内的，提前准备好。 记住是英标不是欧标。</li>
</ul>
<h4 id="出发时"><a href="#出发时" class="headerlink" title="出发时"></a>出发时</h4><ul>
<li>地铁： 支付宝刷码即可  </li>
<li>过关小票： 切记一定要保存好，开户要用到  </li>
<li>提前吃好早餐&#x2F;干粮： 早上比较早的时候那边吃的还比较少（同时也比较贵，还不太好吃）</li>
</ul>
<h3 id="开户过程"><a href="#开户过程" class="headerlink" title="开户过程"></a>开户过程</h3><p>上水分行（关口过去后最近的一个站）只支持线下排队预约，分行 9:00 开门，我是 7:30 左右到分行门口的，现场已经有四五个人在排队了。据说如果排在前20名，基本上能成功开户。</p>
<p>开户在二楼，进去后会有工作人员初次问询开户用途、检查过关小票，然后给你排队号码，让你打开中银香港APP，点击开户，二维码开户，填入他们的分行密码（工作人员会帮忙输入）。  </p>
<p>然后你就可以预填开户信息，过程中需要填写手机号和邮箱接收验证码。如果验证码收不到，可以尝试换个号码或找人代收短信。到真正开户时可以跟工作人员说修改手机号。  </p>
<p>等到你的号码被叫到后，工作人员会再次询问开户用途。一般来自大陆的客户大多是为了投资，如果你有内地的股票或基金账户，可以出示给他们看（我这次没有被问到）。    </p>
<p>我建议直接使用身份证上的地址作为注册地址，这样可能就不需要提供地址证明了。  </p>
<p>在填写姓名时，一定要确认拼音是否正确，是否与内地中银上的英文名一致，否则就无法享受同名账户互转免费。  </p>
<p>信息确认无误后，会有蓝牌工作人员来再次核对信息。我的朋友去的日出康城分行似乎就是没有蓝牌权限，所以无法开户（这是网点接待人员说的，因此预约开户时最好确认网点有开户权限，可以在网上查看别人成功开户的网点）。  </p>
<p>最后就是走流程宣读使用条例等，签名，然后给你一张开户成功的回执。  </p>
<p>格式为:  </p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">### 账户服务  </span><br><span class="line">智盈理财 服务               xxxx </span><br><span class="line">姓名                               <span class="number">012</span>-xxxxx-x  结算账户  </span><br><span class="line"></span><br><span class="line">### 存款账户 </span><br><span class="line">- 港元储蓄账户               <span class="number">012</span>-xxxxx-x</span><br><span class="line">- [外汇宝] 储蓄账户         <span class="number">012</span>-xxxxx-x</span><br><span class="line"></span><br><span class="line">### 中银卡<span class="number">1</span>  </span><br><span class="line">持卡人姓名              <span class="number">012</span>-xxxxx-x        <span class="number">012</span>-xxxx-x 附属账户<span class="number">1</span>  </span><br><span class="line"></span><br><span class="line">### 手机银行/网上银行/电话银行<span class="number">1</span>  </span><br><span class="line">号码:    xxxx</span><br></pre></td></tr></table></figure>
<p>需要记住的是，网银登录号码是8位数， 后面我们最常用的是 012 的港币账户。  </p>
<h3 id="开户结束"><a href="#开户结束" class="headerlink" title="开户结束"></a>开户结束</h3><h4 id="卡片获取"><a href="#卡片获取" class="headerlink" title="卡片获取"></a>卡片获取</h4><p>只有少数大的分行能现场下卡，其他的都是通过邮寄到通讯地址，一般一个月左右会收到。<br>注意，这是普通邮寄，包裹上只有地址没有手机号码，可能会投递失败，所以最好在发出后一两周去邮政官网查询一下，联系当地邮递员派送。<br>也可以在出卡前联系客服转为挂号信快递，补交50港币，费用从账户中扣除。 （不过个人觉得实体卡用处其实不大）</p>
<h4 id="ATM存钱"><a href="#ATM存钱" class="headerlink" title="ATM存钱"></a>ATM存钱</h4><p>我建议在香港时从ATM上存点港币进去，这样就不用从APP转账（虽然免手续费，但是到账有延迟，需要审核）。分行旁边就有存钱机器，无卡也可以存钱。  </p>
<h4 id="内地转港户"><a href="#内地转港户" class="headerlink" title="内地转港户"></a>内地转港户</h4><h5 id="购汇"><a href="#购汇" class="headerlink" title="购汇"></a>购汇</h5><p>打开内地中银APP，先搜索购汇，个人购汇，币种选择 “港币”，钞汇选择 “现汇” 兑换即可， 每人一年最多购汇 5W 美金。  </p>
<h5 id="同名互转"><a href="#同名互转" class="headerlink" title="同名互转"></a>同名互转</h5><p>打开内地中银APP，转帐——选择”跨境汇款”，选择”境外中行”，填写模板内容：  </p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">收款人名称： 你的拼音名（港卡户名）  </span><br><span class="line">收款人账号： 012开头的港币账户  </span><br><span class="line">收款人详细地址： 地图找个中行HK的地址即可  （找一下英文或拼音）</span><br><span class="line"></span><br><span class="line">记住收发的地址都要精确到门牌号</span><br><span class="line"></span><br><span class="line">附言： TRAVEL  </span><br><span class="line">用途： 旅游（根据自己需求）</span><br></pre></td></tr></table></figure>
<p>转账完成后，一般需要一定时间审核才会到账。  </p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>如果你是特地去办卡的，我建议你像我一样，提前预约一个大家都能成功办理的分行（部分小分行网点可能权限不够，没有蓝卡权限就没法办卡），然后早点去一个只能现场排队的分行尝试现场申请。  </p>
]]></content>
      <tags>
        <tag>折腾</tag>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>个人医疗影像资料业余科普</title>
    <url>//post/medical-dicom-manage.html</url>
    <content><![CDATA[<p>&emsp;&emsp;很多人都去过医院拍过片，医院给到的胶片照片通常不易保存，在有需要查看病情发展或有需求做互联网远程问诊的情况下，就非常不方便。我们可以将数字化的影像资料做保存，已备不时之需。这里 Alliot 查阅了一部分资料，大致做一下介绍。Alliot 非医疗行内人士，因此全文仅与影像资料格式处置思路有关，不涉及任何医学相关内容与建议，可以放心阅读。<span id="more"></span></p>
<h3 id="DICOM是什么"><a href="#DICOM是什么" class="headerlink" title="DICOM是什么"></a>DICOM是什么</h3><blockquote>
<p>医疗数位影像传输协定（DICOM，Digital Imaging and Communications in Medicine）是一组通用的标准协定，在对于医学影像的处理、储存、打印、传输上。它包含了档案格式的定义及网络通信协定。DICOM是以TCP&#x2F;IP为基础的应用协定，并以TCP&#x2F;IP联系各个系统。两个能接受DICOM格式的医疗仪器间，可借由DICOM格式的档案，来接收与交换影像及病人资料。 <a href="https://zh.wikipedia.org/wiki/DICOM">https://zh.wikipedia.org/wiki/DICOM</a>  </p>
</blockquote>
<p>&emsp;&emsp;DICOM 格式本身不仅是图像内容，还包括与检查和诊断相关的信息。这些信息以DICOM 元素的形式储存在 DICOM 文件中。因此导出 JPG 等图片格式后再进行存储是不合适的。  </p>
<h3 id="如何获取"><a href="#如何获取" class="headerlink" title="如何获取"></a>如何获取</h3><p>&emsp;&emsp;一般来说，影像设备(如 CT&#x2F;MRI 扫描)与医院的PACS（影像归档与通信系统）都是连在局域网内的。设备产生的影像，通过标准 DICOM 接口发送到 PACS 的服务器上，影像科的医生会通过 PACS 来调阅影像资料。<br>&emsp;&emsp;大部分医院放射影像科是可以提供刻录光盘服务的（收费，一般20元左右的物料费）。影像科会通过 <a href="http://www.baidu.com/link?url=q6sceRMgJu14JD7CHsAVNmI6mExv5vIYPVFmiPCRz-sZ5S7KVCoTvk0iLcKdPjKItUALFT7ntkwxNMPEVAYRfWxNctikbrU_O1YYJOuIXO1ONjesEAtb5ooadlTeBsUz">便携医学影像信息发布模式(<em>PDI</em>)</a> 刻录光盘给到患者，光盘内 <code>/DICOM </code> 路径下即我们需要的文件。</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">========================================================================================</span><br><span class="line">PDI (Portable Data for Imaging) Contents</span><br><span class="line">========================================================================================</span><br><span class="line"></span><br><span class="line">Institution:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">This collection was created with Advantage Workstation (AW4.7 ext 16) as a manifestation of the IHE Portable Data for Imaging application profile.</span><br><span class="line">(c) 2010 GE Medical Systems</span><br><span class="line"></span><br><span class="line"><span class="section">Contents</span></span><br><span class="line"><span class="section">----------------</span></span><br><span class="line"></span><br><span class="line"><span class="code"> README.TXT  - this file.</span></span><br><span class="line"><span class="code"> INDEX.HTM   - contains information about the images written on this media.</span></span><br><span class="line">/DICOM       - directory of the DICOM images.</span><br><span class="line">/IHE_PDI     - the DICOM Directory content in web viewable format.</span><br></pre></td></tr></table></figure>

<h3 id="如何查看DICOM文件"><a href="#如何查看DICOM文件" class="headerlink" title="如何查看DICOM文件"></a>如何查看DICOM文件</h3><p>&emsp;&emsp;从前面了解到的知识可以知道，DICOM 并不是普通的单纯的图片，因此使用操作系统自带的图片浏览器是无法查看的，Photoshop 可以预览，但所得很有限。这里推荐两款读取软件：<br><a href="https://www.horosproject.org/">horos</a> 这款比较多的医生推荐，不过好像 Alliot 用不到那么多功能，学习成本也稍高，所以没做过多的了解，相关专业的同学可能更清楚。  </p>
<p>&emsp;&emsp;Alliot 使用的是，<a href="https://xiaosaiviewer.com/">小赛看看</a> ，国人开发的一款 DICOM 阅片软件，操作比较简单，打开就能用。支持 Windows 与 MacOS，于非专业人员来说，算够用了。</p>
<h3 id="互联网传输脱敏"><a href="#互联网传输脱敏" class="headerlink" title="互联网传输脱敏"></a>互联网传输脱敏</h3><p>&emsp;&emsp;前面说到 DICOM 文件会保存患者部分信息，网络存储或传输时为避免患者信息泄漏，尽量考虑做脱敏操作。（源文件可以考虑压缩包加密并离线保存，已备不时之需）。<br>&emsp;&emsp;Python 下， <a href="https://github.com/pydicom/pydicom">pydicom</a> 包能够处理 DICOM 文件，其中就包括对 DICOM 文件元数据的修改，我们可以用它来实现脱敏操作：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import glob</span><br><span class="line">import pydicom as dicom</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def clear_dcm(dcm_path):</span><br><span class="line">    # /*/* 取决于你传入目录内的目录层数</span><br><span class="line">    file_list = glob.glob(dcm_path + &quot;/*/*&quot;, recursive=True)</span><br><span class="line"></span><br><span class="line">    ds_list = [(dicom.dcmread(file), file) for file in file_list]</span><br><span class="line">    print(file_list)</span><br><span class="line">    for ds in ds_list:</span><br><span class="line">        # 存在多个信息，这里只列举比较敏感的部分</span><br><span class="line">        ds[0].PatientName = &#x27;zhangsan&#x27;</span><br><span class="line">        ds[0].PatientID = &#x27;&#x27;</span><br><span class="line">        ds[0].PatientBirthDate = &#x27;&#x27;</span><br><span class="line">        ds[0].InstitutionName = &#x27;none&#x27;</span><br><span class="line">        ds[0].InstitutionAddress = &#x27;&#x27;</span><br><span class="line">        ds[0].OperatorName = &#x27;&#x27;</span><br><span class="line">        ds[0].ReferrringPhysicianName = &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">        ds[0].save_as(ds[1])</span><br><span class="line">        print(&quot;success&quot;)</span><br><span class="line"></span><br><span class="line"># dicom 文件路径，</span><br><span class="line">path = &quot;/home/alliot/DICOM_1&quot;</span><br><span class="line">clear_dcm(path)</span><br></pre></td></tr></table></figure>

<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>&emsp;&emsp;就寻医问诊的亲身经历来说，当下平民的医疗环境确实一般，医疗资源的紧缺，求医难是无法避免的。但专业的事情必须交给专业的人干，患者能够做的只能是用相对科学的方法与态度去看待，尽量准确的给到病情资料，减少医生与你的沟通成本，方便医生对病情做出准确且及时的判断，方便诊治。<br>&emsp;&emsp;这里拜谢 @<a href="https://blog.drpika.com/">Dr.Pika</a> 给到的专业、耐心细致的分析与建议，如果有幸您也是一位医者，看到这里，或许可以去到 <a href="https://blog.drpika.com/">Dr.Pika</a> 的个人博客逛逛，相信您一定会有不小的收获。  </p>
<h3 id="参考资料-拓展阅读"><a href="#参考资料-拓展阅读" class="headerlink" title="参考资料&#x2F;拓展阅读"></a>参考资料&#x2F;拓展阅读</h3><p><a href="https://www.zhihu.com/question/22828723">医院里面 CT、MRI 影像文件是什么格式，可以问医生要走吗？ - 知乎</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/59413289">处理医疗影像的Python利器：PyDicom</a></p>
<p><a href="https://zh.wikipedia.org/wiki/DICOM">DICOM - 维基百科</a></p>
]]></content>
      <tags>
        <tag>折腾</tag>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>主流厂商存储多路径软件的安装与使用</title>
    <url>//post/storage-multipath.html</url>
    <content><![CDATA[<p>　　在生产环境中，为保证存储访问的可靠性（当然也为负载均衡），一般会用 2 张甚至更多的光纤卡，通过 2 条或更多的 FC 路径，接在磁盘阵列的两个控制器上，当一条路径出现故障的时候也能够保证系统与存储的不间断访问。但是这会导致一个问题，一个实际的 LUN 在一条路径过来在系统层面来看，就会有一个设备，同一个 LUN 从不同的路径过来就会有多个设备，也就是说你在存储上划的一个 LUN 给你的系统，通过多个路径过来，在操作系统上就会看到多个盘，这就需要多路径软件来将这些盘虚拟成一个设备。本文将介绍各个多路径软件的安装与配置。<span id="more"></span><br>　　一般来说，主流厂商的存储都会有自家的多路径软件，例如，日立 (HITACHI) 存储使用的多路径软件为 <code>HDLM</code>，EMC (戴尔收购) 存储使用的多路径软件为 <code>PowerPath</code>，华为存储为 <code>UltraPath</code> ，其他厂商 Linux 下大多会使用红帽家的 <code>multipath</code>，AIX 或是 Windows 下使用 <code>mpio</code>。</p>
<h3 id="日立"><a href="#日立" class="headerlink" title="日立"></a>日立</h3><p>　　日立存储 (HDS) 使用的多路径是 <code>HDLM</code>（Hitachi Dynamic Link Manager），本文仅记录 <code>Linux</code> 环境下的安装与使用，其他平台大同小异。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>　　手上目前只有 <code>RHEL 6</code> 的安装包与 license，下文都是在该环境下完成的，<code>RHEL 7</code> 下的安装大同小异，后期有相关需求的时候再补上。  </p>
<h5 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h5><p>安装 <code>HDLM</code> 前需要安装如下软件包：  </p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">- libstdc++-RPM <span class="keyword">package</span> <span class="title">version.i386.rpm  </span></span><br><span class="line">- libgcc-RPM <span class="keyword">package</span> <span class="title">version.i386.rpm  </span></span><br><span class="line">- glibc-RPM <span class="keyword">package</span> <span class="title">version.i686.rpm  </span></span><br><span class="line"></span><br><span class="line">- libstdc++-RPM <span class="keyword">package</span> <span class="title">version.i686.rpm  </span></span><br><span class="line">- libgcc-RPM <span class="keyword">package</span> <span class="title">version.i686.rpm  </span></span><br><span class="line">- glibc-RPM <span class="keyword">package</span> <span class="title">version.i686.rpm  </span></span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意 i686 i386 均要安装</span></span><br><span class="line">yum install -y libstdc++  </span><br><span class="line">yum install -y libgcc  </span><br><span class="line">yum install -y glibc-  </span><br><span class="line">yum install -y glibc.i686 </span><br><span class="line">yum install -y libgcc.i686</span><br><span class="line">yum install -y libstdc++.i686</span><br></pre></td></tr></table></figure>
<p>否则将出现如下报错:  　　</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">[root<span class="comment">@localhost HDLM_Linux]# ./installhdlm </span></span><br><span class="line"><span class="comment">KAPL09210-I installhdlm will now start.</span></span><br><span class="line"><span class="comment">KAPL09093-I HDLM 8.7.0-00 will be installed. Is this OK ? [y/n]: y</span></span><br><span class="line"><span class="comment">KAPL09098-E An attempt to install /tmp/HDLM_Linux/rpm/HDLM-8.7.0.0.808-3.x86_64.rpm has failed. Code = 1</span></span><br><span class="line"><span class="comment">KAPL09212-E installhdlm ended abnormally.</span></span><br><span class="line"><span class="comment">[root@</span>localhost HDLM_Linux]<span class="meta"># </span></span><br></pre></td></tr></table></figure>
<h5 id="上传安装包"><a href="#上传安装包" class="headerlink" title="上传安装包"></a>上传安装包</h5><p>　　上传 <code>HDLM_Linux</code> 文件夹到 &#x2F;tmp 目录，上传 &#x2F;licence&#x2F;hdlm_license 到 &#x2F;var&#x2F;tmp。  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /tmp/HDLM_Linux  </span><br><span class="line">chmod -R 755 *  # 给权限  </span><br><span class="line">./installhdlm</span><br></pre></td></tr></table></figure>
<h5 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure>
<p>在 PATH 字段后追加: </p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="symbol">:/opt/DynamicLinkManager/bin</span> </span><br></pre></td></tr></table></figure>
<p>并 <code>source</code> 让其生效：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure>
<p>安装后需要重启系统 <code>reboot</code> 完成安装。  </p>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建HDLM设备</span></span><br><span class="line">/sbin/dlmcfgmgr -r </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动HDLM</span> </span><br><span class="line">/etc/init.d/DLMManager start</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 HDLM 配置</span>  </span><br><span class="line">dlnkmgr view -sys</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看路磁盘路径</span>  </span><br><span class="line">dlnkmgr view -path </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置路径的自动 Failback 功能</span></span><br><span class="line">dlnkmgr set -afb on</span><br></pre></td></tr></table></figure>

<h3 id="华为"><a href="#华为" class="headerlink" title="华为"></a>华为</h3><p>　　华为 OceanStor，对应使用华为自己的 <code>UltraPath</code> 多路径软件。  </p>
<h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><h5 id="静默安装配置"><a href="#静默安装配置" class="headerlink" title="静默安装配置"></a>静默安装配置</h5><p>　　上传并解压 <code>UltraPath</code> 的安装包后，进入其解压目录，修改 “unattend_install.conf” 的如下字段：  </p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动类型，1 为本地启动(Local Boot)，2 为 SAN 存储（SAN Boot）启动，前者即操作系统装在本地磁盘，后者为操作系统装在 SAN 网络中。一般都为前者。</span></span><br><span class="line"><span class="attr">boot_type</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装完是否重启 </span></span><br><span class="line"><span class="attr">restart</span> = y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当系统自带多路径DM-multipath已经启用时，是否继续安装UltraPath多路径。</span></span><br><span class="line"><span class="attr">continue_when_dm_enable</span> = y</span><br></pre></td></tr></table></figure>
<p>给 “install.sh” 执行权限：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod +x install.sh</span><br></pre></td></tr></table></figure>
<p>开始安装：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./install.sh -f unattend_install.conf</span><br></pre></td></tr></table></figure>
<p>安装完成后需要重启操作系统。  </p>
<h5 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h5><p>检查是否在内核加载成功：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsmod | grep nxup</span><br></pre></td></tr></table></figure>
<p>显示类似如下即可：  </p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nxupext_a</span> <span class="number">4008975</span> <span class="number">0</span></span><br><span class="line"><span class="attribute">nxup</span> <span class="number">477464</span> <span class="number">1</span> nxupext_a</span><br></pre></td></tr></table></figure>
<p>检查服务进程是否开启：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef | grep upservice | grep -v grep</span><br></pre></td></tr></table></figure>
<h4 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新启动 UltraPath 服务</span>  </span><br><span class="line">service nxup restart  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取软件版本</span>  </span><br><span class="line">upadmin show version  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看服务器所连接的存储系统信息</span>  </span><br><span class="line">upadmin show array  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看存储系统映射到服务器上的 LUN 信息</span>  </span><br><span class="line">upadmin show lun  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看物理路径的工作状态</span>  </span><br><span class="line">upadmin show path</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">禁用/启用指定物理路径</span>  </span><br><span class="line">upadmin set pathstate=enable/disable path_id=路径ID</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看存储系统、虚拟 LUN 的 IOPS、带宽信息、响应时间等性能信息</span>  </span><br><span class="line">upadmin show iostat</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看运行过程中的关键事件信息</span>  </span><br><span class="line">upadmin show event  </span><br></pre></td></tr></table></figure>

<h3 id="EMC"><a href="#EMC" class="headerlink" title="EMC"></a>EMC</h3><p>　　EMC 存储用的多路径软件为 <code>PowerPath</code>，相比其他厂商的多路径软件，<code>PowerPath</code> 多了负载均衡的优势。  </p>
<h4 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h4><h5 id="安装rpm包"><a href="#安装rpm包" class="headerlink" title="安装rpm包"></a>安装rpm包</h5><p>　　上传对应版本的 rpm 包，使用 <code>rpm -Uvh</code> 安装：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -Uvh EMCPower.LINUX-6.3.0.01.00-001.RHEL6.x86_64.rpm</span><br></pre></td></tr></table></figure>
<h5 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">emcpreg -install # 将提示输入license</span><br></pre></td></tr></table></figure>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/etc/init.d/PowerPath start  </span><br></pre></td></tr></table></figure>
<h4 id="检查-1"><a href="#检查-1" class="headerlink" title="检查"></a>检查</h4><p>查看是否有 emcpower 伪设备:  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fdisk -l |grep emcpower</span><br></pre></td></tr></table></figure>
<h4 id="常用命令-2"><a href="#常用命令-2" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出 PowerPath 配置的 HBA 状态</span></span><br><span class="line">powermt display dev=all  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取软件版本</span>  </span><br><span class="line">powermt version</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">手工检查 PowerPath 通道</span></span><br><span class="line">powermt check</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">手工恢复 PowerPath 通道</span></span><br><span class="line">powermt restore</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">保存 PowerPath 设备数据库文件</span>  </span><br><span class="line">powermt save</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加载以前保存的配置</span>  </span><br><span class="line">powermt load</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除配置中的一条路径</span>  </span><br><span class="line">powermt remove</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">识别 PowerPath 设备</span>  </span><br><span class="line">powermt config</span><br></pre></td></tr></table></figure>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h4><p>　　在厂商没有自己的多路径软件的时候（如华三），一般用红帽的 <code>multipath</code>，其安装十分简单，直接通过 <code>yum</code> 安装 <code>device-mapper-multipath device-mapper</code> 即可：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y device-mapper-multipath</span><br></pre></td></tr></table></figure>
<p><code>multipath</code> 针对不同的存储有不同的更优配置，并且提供了相关的模板文件，需要根据不同的存储，配置不同的参数。在 <code>RHEL 6</code> 下，其模板文件位置为 “&#x2F;usr&#x2F;share&#x2F;doc&#x2F;device-mapper-multipath-xxx&#x2F;multipath.conf.defaults”，部分存储厂家也会提供其对应型号的推荐配置。  </p>
<h4 id="常用命令-3"><a href="#常用命令-3" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动</span>  </span><br><span class="line">/etc/init.d/multipathd start </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除现有路径</span>  </span><br><span class="line">multipath -F</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">格式化路径</span>  </span><br><span class="line">multipath -v2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看多路径</span>  </span><br><span class="line">multipath -ll</span><br></pre></td></tr></table></figure>

<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p><code>/etc/multipath/bindings</code>:  wwid 和盘 alias 的绑定<br><code>/etc/multipath/wwids</code>: multipath 发现的所有 wwid</p>
<p><code>/etc/multipath.conf</code> 配置解释: </p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># 【blacklist】 -- 【default】 -- 【devices】 -- 【multipaths】 -- 【multipath】</span><br><span class="line">#    黑名单   --     默认配置  --厂商存储配置 --  多路径设备配置 --   子设备配置</span><br><span class="line"></span><br><span class="line">########## 黑名单配置</span><br><span class="line">blacklist &#123;                                                    </span><br><span class="line">        wwid <span class="number">3600605</span>b009d63a801ca59ff70e55ce7a </span><br><span class="line">        devnode <span class="string">&quot;^(ram|raw|loop|fd|md|dm-|sr|scd|st)[0-9]*&quot;</span></span><br><span class="line">        devnode <span class="string">&quot;^hd[a-z]&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">              </span><br><span class="line">##### 默认配置              </span><br><span class="line">defaults &#123;                               </span><br><span class="line">       user_friendly_names yes</span><br><span class="line">       path_grouping_policy multibus</span><br><span class="line">       failback immediate</span><br><span class="line">       no_path_retry fail</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">                              </span><br><span class="line">####### 厂商存储配置                           </span><br><span class="line">devices &#123;                    </span><br><span class="line">        device &#123;</span><br><span class="line">                vendor <span class="string">&quot;EMC&quot;</span></span><br><span class="line">                product <span class="string">&quot;SYMMETRIX&quot;</span></span><br><span class="line">                path_grouping_policy <span class="string">&quot;multibus&quot;</span></span><br><span class="line">                getuid_callout <span class="string">&quot;/lib/udev/scsi_id --page=pre-spc3-83 --whitelisted --device=/dev/%n&quot;</span></span><br><span class="line">                path_selector <span class="string">&quot;round-robin 0&quot;</span></span><br><span class="line">                path_checker <span class="string">&quot;tur&quot;</span></span><br><span class="line">                features <span class="string">&quot;0&quot;</span></span><br><span class="line">                hardware_handler <span class="string">&quot;0&quot;</span></span><br><span class="line">                prio <span class="string">&quot;const&quot;</span></span><br><span class="line">                rr_weight <span class="string">&quot;uniform&quot;</span></span><br><span class="line">                no_path_retry <span class="string">&quot;6&quot;</span></span><br><span class="line">                rr_min_io <span class="string">&quot;1000&quot;</span></span><br><span class="line">                rr_min_io_rq <span class="string">&quot;1&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;                             </span><br><span class="line">                              </span><br><span class="line"> </span><br><span class="line">##########  多路径设备配置  </span><br><span class="line">multipaths &#123;                         </span><br><span class="line"> </span><br><span class="line">#####单独设备配置</span><br><span class="line">    multipath &#123;   </span><br><span class="line">        wwid    <span class="number">1111111111111111111111111111111111111111111111111</span></span><br><span class="line">        alias    asm1</span><br><span class="line">                                                &#125;</span><br><span class="line">                                                </span><br><span class="line">    multipath &#123;</span><br><span class="line">        wwid    <span class="number">22222222222222222222222222</span></span><br><span class="line">        alias    asm2</span><br><span class="line">                                       &#125;</span><br><span class="line">                                      </span><br><span class="line">    multipath &#123;</span><br><span class="line">        wwid    <span class="number">33333333333333333333</span></span><br><span class="line">        alias    asm3</span><br><span class="line">    &#125;</span><br><span class="line">                 </span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>存储</tag>
      </tags>
  </entry>
  <entry>
    <title>两种方式安装atop</title>
    <url>//post/install_atop.html</url>
    <content><![CDATA[<p>　　atop是一款用于监控Linux系统资源与进程的工具，它以一定的频率记录系统的运行状态，所采集的数据包含系统资源(CPU、内存、磁盘和网络)使用情况和进程运行情况，并能以日志文件的方式保存在磁盘中，服务器出现问题后，我们可获取相应的atop日志文件进行分析，其比较强大的地方是其支持我们分析数据时进行排序、视图切换、正则匹配等处理。 本文记录了yum与源码包两种方式安装方式<span id="more"></span>    </p>
<h2 id="yum安装atop"><a href="#yum安装atop" class="headerlink" title="yum安装atop"></a>yum安装atop</h2><p>　　最为简单的方式，默认的yum源不包含atop，若要安装atop需要先安装第三方源：  </p>
<h3 id="安装第三方yum源EPEL"><a href="#安装第三方yum源EPEL" class="headerlink" title="安装第三方yum源EPEL"></a>安装第三方yum源EPEL</h3><blockquote>
<p>官方的rpm repository提供的rpm包不够丰富，很多时候有找不到对应软件rpm包的情况，源码安装软件是一件很麻烦的事情，我们可以使用第三方的yum源。<br>EPEL的全称叫 Extra Packages for Enterprise Linux 。EPEL是由 Fedora 社区打造，为 RHEL 及衍生发行版如 CentOS、Scientific Linux 等提供高质量软件包的项目。  </p>
</blockquote>
<h2 id="项目官方wiki地址：http-fedoraproject-org-wiki-EPEL-zh-cn从wiki上可知，CentOS下，EPEL能够很方便的通过yum来安装并启用：-安装执行"><a href="#项目官方wiki地址：http-fedoraproject-org-wiki-EPEL-zh-cn从wiki上可知，CentOS下，EPEL能够很方便的通过yum来安装并启用：-安装执行" class="headerlink" title="项目官方wiki地址：http://fedoraproject.org/wiki/EPEL/zh-cn从wiki上可知，CentOS下，EPEL能够很方便的通过yum来安装并启用：### 安装执行:"></a>项目官方wiki地址：<a href="http://fedoraproject.org/wiki/EPEL/zh-cn">http://fedoraproject.org/wiki/EPEL/zh-cn</a><br>从wiki上可知，CentOS下，EPEL能够很方便的通过yum来安装并启用：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install epel-release</span><br></pre></td></tr></table></figure><br>### 安装<br>执行:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y atop</span><br></pre></td></tr></table></figure></h2><h2 id="源码包安装atop"><a href="#源码包安装atop" class="headerlink" title="源码包安装atop"></a>源码包安装atop</h2><h2 id="先去官网查看最新的版本号-http-www-atoptool-nl-downloadatop-php-，目前是2-3-0。-下载源码包-这里采用的是wget方式-当然也可以直接从官网下载源码包然后FTP到服务器-然后解压：-编译安装-进入解压目录-编译安装-安装报错解决-若未安装gcc，请执行：-若提示zlib-h-No-such-file-or-directory，请安装zlib-同样先找最新版本号-http-zlib-net-目前最新的是zlib-1-2-11-参考：http-blog-csdn-net-langzi7758521-article-details-51446178-若提示curses-h-No-such-file-or-directory，请安装ncurses："><a href="#先去官网查看最新的版本号-http-www-atoptool-nl-downloadatop-php-，目前是2-3-0。-下载源码包-这里采用的是wget方式-当然也可以直接从官网下载源码包然后FTP到服务器-然后解压：-编译安装-进入解压目录-编译安装-安装报错解决-若未安装gcc，请执行：-若提示zlib-h-No-such-file-or-directory，请安装zlib-同样先找最新版本号-http-zlib-net-目前最新的是zlib-1-2-11-参考：http-blog-csdn-net-langzi7758521-article-details-51446178-若提示curses-h-No-such-file-or-directory，请安装ncurses：" class="headerlink" title="　　先去官网查看最新的版本号:http://www.atoptool.nl/downloadatop.php ，目前是2.3.0。### 下载源码包　　这里采用的是wget方式(当然也可以直接从官网下载源码包然后FTP到服务器):然后解压：### 编译安装　　进入解压目录:　　编译安装:### 安装报错解决* 若未安装gcc，请执行：* 若提示zlib.h: No such file or directory，请安装zlib:同样先找最新版本号 http://zlib.net 目前最新的是zlib 1.2.11(参考：http://blog.csdn.net/langzi7758521/article/details/51446178)* 若提示curses.h: No such file or directory，请安装ncurses："></a>　　先去官网查看最新的版本号:<a href="http://www.atoptool.nl/downloadatop.php">http://www.atoptool.nl/downloadatop.php</a> ，目前是2.3.0。<br>### 下载源码包<br>　　这里采用的是wget方式(当然也可以直接从官网下载源码包然后FTP到服务器):<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://www.atoptool.nl/download/atop-2.3.0.tar.gz  (请根据官网最新的版本号对应修改)  </span><br></pre></td></tr></table></figure><br>然后解压：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf atop-2.3.0.tar.gz</span><br></pre></td></tr></table></figure><br>### 编译安装<br>　　进入解压目录:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> atop-2.3.0</span><br></pre></td></tr></table></figure><br>　　编译安装:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make  </span><br><span class="line"><span class="comment">#CentOS 7执行:</span></span><br><span class="line">make systemdinstall  </span><br><span class="line"><span class="comment">#CentOS 7前的版本请执行：</span></span><br><span class="line">make prefix=/usr/local/atop install</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><br>### 安装报错解决<br>* 若未安装gcc，请执行：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y gcc</span><br></pre></td></tr></table></figure><br>* 若提示zlib.h: No such file or directory，请安装zlib:<br>同样先找最新版本号 <a href="http://zlib.net/">http://zlib.net</a> 目前最新的是zlib 1.2.11<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">wget http://zlib.net/zlib-1.2.11.tar.gz  (请根据官网最新的版本号对应修改)  </span><br><span class="line">tar -zxvf zlib-1.2.11.tar.gz  </span><br><span class="line"><span class="built_in">cd</span> zlib-1.2.11  </span><br><span class="line">./configure --shared</span><br><span class="line">make <span class="built_in">test</span></span><br><span class="line">make install</span><br><span class="line"><span class="built_in">cp</span> zutil.h /usr/local/include  </span><br><span class="line"><span class="built_in">cp</span> zutil.c /usr/local/include </span><br></pre></td></tr></table></figure><br>(参考：<a href="http://blog.csdn.net/langzi7758521/article/details/51446178">http://blog.csdn.net/langzi7758521/article/details/51446178</a>)<br>* 若提示curses.h: No such file or directory，请安装ncurses：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y ncurses-devel</span><br></pre></td></tr></table></figure></h2><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>　　此文很详细：<a href="http://www.361way.com/atop/5162.html">http://www.361way.com/atop/5162.html</a></p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么Python中没有&quot;a++&quot;这种写法</title>
    <url>//post/python-1.html</url>
    <content><![CDATA[<p>　　一开始学习 Python 的时候习惯性的使用 C 中的 <code>a++</code> 这种写法，发现会报 <code>SyntaxError: invalid syntax</code> 错误，为什么 Python 没有自增运算符的这种写法呢？<span id="more"></span></p>
<h2 id="我们可以看一下-Python-下：再来看看-C-语言中：输出-这里可以看出-Python-在变量的存储上与-C-语言的不同，在-C-语言中，值的存储以变量名来区分，一个变量具有单独的地址空间；而-Python-中则不一样，只要值是相同的，不管你的变量名是什么，它们的地址都是相同的，也就是说，-Python-允许一个值被多个变量名称绑定。-这里说明一下，在脚本式编程环境中是这样，但是在交互式编程环境下，Python-为了优化速度，使用了小整数对象池，-避免为整数频繁申请和销毁内存空间，编译器会有一个小整数池的概念，小整数的定义是-5-256-这些整数对象是提前建立好的，不会被垃圾回收，也就是说，变量在这个范围内是会按照前面所说的，共用内存地址，超过这个值则使用单独的内存地址。-如："><a href="#我们可以看一下-Python-下：再来看看-C-语言中：输出-这里可以看出-Python-在变量的存储上与-C-语言的不同，在-C-语言中，值的存储以变量名来区分，一个变量具有单独的地址空间；而-Python-中则不一样，只要值是相同的，不管你的变量名是什么，它们的地址都是相同的，也就是说，-Python-允许一个值被多个变量名称绑定。-这里说明一下，在脚本式编程环境中是这样，但是在交互式编程环境下，Python-为了优化速度，使用了小整数对象池，-避免为整数频繁申请和销毁内存空间，编译器会有一个小整数池的概念，小整数的定义是-5-256-这些整数对象是提前建立好的，不会被垃圾回收，也就是说，变量在这个范围内是会按照前面所说的，共用内存地址，超过这个值则使用单独的内存地址。-如：" class="headerlink" title="我们可以看一下 Python 下：再来看看 C 语言中：输出:　　这里可以看出 Python 在变量的存储上与 C 语言的不同，在 C 语言中，值的存储以变量名来区分，一个变量具有单独的地址空间；而 Python 中则不一样，只要值是相同的，不管你的变量名是什么，它们的地址都是相同的，也就是说， Python 允许一个值被多个变量名称绑定。　　这里说明一下，在脚本式编程环境中是这样，但是在交互式编程环境下，Python 为了优化速度，使用了小整数对象池， 避免为整数频繁申请和销毁内存空间，编译器会有一个小整数池的概念，小整数的定义是 [-5, 256] 这些整数对象是提前建立好的，不会被垃圾回收，也就是说，变量在这个范围内是会按照前面所说的，共用内存地址，超过这个值则使用单独的内存地址。 如："></a>我们可以看一下 Python 下：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)		<span class="comment">#id() 函数用于获取对象的内存地址。  </span></span><br><span class="line"><span class="number">140732976575344</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(b)</span><br><span class="line"><span class="number">140732976575344</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><br>再来看看 C 语言中：<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> b = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,&amp;a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,&amp;b);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>输出:<br><figure class="highlight dns"><table><tr><td class="code"><pre><span class="line"><span class="number">6356732</span></span><br><span class="line"><span class="number">6356728</span></span><br></pre></td></tr></table></figure><br>　　这里可以看出 Python 在变量的存储上与 C 语言的不同，在 C 语言中，值的存储以变量名来区分，一个变量具有单独的地址空间；而 Python 中则不一样，只要值是相同的，不管你的变量名是什么，它们的地址都是相同的，也就是说， Python 允许一个值被多个变量名称绑定。<br>　　这里说明一下，在脚本式编程环境中是这样，但是在交互式编程环境下，Python 为了优化速度，使用了小整数对象池， 避免为整数频繁申请和销毁内存空间，编译器会有一个小整数池的概念，小整数的定义是 [-5, 256] 这些整数对象是提前建立好的，不会被垃圾回收，也就是说，变量在这个范围内是会按照前面所说的，共用内存地址，超过这个值则使用单独的内存地址。 如：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="number">1000</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=<span class="number">1000</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a);<span class="built_in">id</span>(b)</span><br><span class="line"><span class="number">266662366224</span></span><br><span class="line"><span class="number">266617350384</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></h2><p>参考资料: <a href="https://blog.csdn.net/wangyunfeis/article/details/77607156">@wangyunfeis</a></p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>从指定路径更新雷池WAF证书</title>
    <url>//post/update-safeline-ssl-cert-from-file.html</url>
    <content><![CDATA[<p>　　雷池(SafeLine) 是长亭科技部分<del>开源</del>的一款 Web 防火墙，社区版本已经有较为完善的 WAF 功能，可以满足个人项目的基本 Web 防护需求。 不过目前(v5.2.0)雷池对于证书的操作，仅支持从 UI 导入或使用 <a href="https://letsencrypt.org/docs/challenge-types/#http-01-challenge">Let’s Encrypt 的 HTTP-01 验证方法</a> 来配置证书， 这对于使用 DNS 验证的短期证书用户来说非常不方便，可以看到社区有这样的需求的小伙伴还是挺多的： <a href="https://github.com/chaitin/SafeLine/issues/782">[建议] 证书增加使用路径导入方式 | Github issue</a>， 因此便写了个小脚本来实现这个需求。 <span id="more"></span>  </p>
<h3 id="调研"><a href="#调研" class="headerlink" title="调研"></a>调研</h3><p>雷池本身也是基于 Tengine 来做网关的， 证书配置也在 Tengine 来实现， 因此 Alliot 一开始准备直接操作容器中 Tengine 的证书文件来实现， 不过看样子社区中有小伙伴已经尝试过了： <a href="https://github.com/chaitin/SafeLine/issues/733">[Bug] 手动更新证书文件并重启容器后，【证书管理】界面的有效期时间没有同步更新</a>， 从底下的评论可以知道目前雷池的证书还是以数据库为准，直接操作文件并不能达到更新证书的目的。<br>这里打算通过操作雷池 API 来达到目的。  </p>
<h3 id="动手"><a href="#动手" class="headerlink" title="动手"></a>动手</h3><p>官方并没有提供 API 文档，也没有提供生成 API key 的操作，只能通过模拟登录来实现。<br>雷池登录流程为： 密码登录 -&gt; 校验通过后得到中间 JWT -&gt; 校验 OTP -&gt; 校验通过后得到最终的 JWT， 并且前面过程中都需要携带 CSRF token， 由于逻辑并不复杂，并且也是简单的构建一下请求，这里就直接贴代码吧：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import time</span><br><span class="line">import pyotp</span><br><span class="line">import urllib3</span><br><span class="line"></span><br><span class="line">BASE_URL = &quot;https://www.iots.vip&quot;     # 登录地址</span><br><span class="line">USERNAME = &quot;admin&quot;         </span><br><span class="line">PASSWORD = &quot;123123123&quot;</span><br><span class="line"></span><br><span class="line">OTP_SECRET = &quot;ADXXXXXXWB5S3UIWZCDX&quot;   # 动态验证码的密钥</span><br><span class="line">CERT_ID = &quot;1&quot;                         # 证书ID， 一般如果仅有一个证书，ID为1， 多个证书也可以调用下面的list_all_certs来获取ID</span><br><span class="line">CERT_FILE_PATH = &quot;www.iots.vip.crt&quot;   # 证书路径</span><br><span class="line">CERT_KEY_PATH = &quot;www.iots.vip.key&quot;    # 证书路径 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_passcode(secret):</span><br><span class="line">    totp = pyotp.TOTP(secret)</span><br><span class="line">    return totp.now()</span><br><span class="line"></span><br><span class="line">class SafeLine:</span><br><span class="line">    def __init__(self, base_url):</span><br><span class="line">        urllib3.disable_warnings()</span><br><span class="line">        self.base_url = base_url</span><br><span class="line">        self.csrf_token = None</span><br><span class="line">        self.jwt = None</span><br><span class="line">        self.session = requests.Session()</span><br><span class="line">        self.session.verify = False</span><br><span class="line"></span><br><span class="line">    def get_csrf_token(self):</span><br><span class="line">        response = self.session.get(f&quot;&#123;self.base_url&#125;/api/open/auth/csrf&quot;)</span><br><span class="line">        data = response.json()</span><br><span class="line">        self.csrf_token = data[&#x27;data&#x27;][&#x27;csrf_token&#x27;]</span><br><span class="line">        return self.csrf_token</span><br><span class="line"></span><br><span class="line">    def login(self, username, password):</span><br><span class="line">        self.get_csrf_token()</span><br><span class="line">        payload = &#123;</span><br><span class="line">            &quot;username&quot;: username,</span><br><span class="line">            &quot;password&quot;: password,</span><br><span class="line">            &quot;csrf_token&quot;: self.csrf_token</span><br><span class="line">        &#125;</span><br><span class="line">        response = self.session.post(f&quot;&#123;self.base_url&#125;/api/open/auth/login&quot;, json=payload)</span><br><span class="line">        data = response.json()</span><br><span class="line">        self.jwt = data[&#x27;data&#x27;][&#x27;jwt&#x27;]</span><br><span class="line">        return self.jwt</span><br><span class="line"></span><br><span class="line">    def validate_mfa(self, code):</span><br><span class="line">        self.get_csrf_token()</span><br><span class="line">        headers = &#123;&#x27;authorization&#x27;: &#x27;Bearer &#x27; + self.jwt&#125;</span><br><span class="line">        payload = &#123;</span><br><span class="line">            &quot;code&quot;: code,</span><br><span class="line">            &quot;timestamp&quot;: int(time.time() * 1000),</span><br><span class="line">            &quot;csrf_token&quot;: self.csrf_token</span><br><span class="line">        &#125;</span><br><span class="line">        response = self.session.post(f&quot;&#123;self.base_url&#125;/api/open/auth/tfa&quot;, headers=headers, json=payload)</span><br><span class="line">        data = response.json()</span><br><span class="line">        if data[&#x27;err&#x27;] is None:</span><br><span class="line">            self.jwt = data[&#x27;data&#x27;][&#x27;jwt&#x27;]</span><br><span class="line">            print(&quot;login success&quot;)</span><br><span class="line">        else:</span><br><span class="line">            self.jwt = None</span><br><span class="line">        return data[&#x27;data&#x27;][&#x27;jwt&#x27;]</span><br><span class="line"></span><br><span class="line">    def list_all_certs(self):</span><br><span class="line">        headers = &#123;&#x27;authorization&#x27;: &#x27;Bearer &#x27; + self.jwt&#125;</span><br><span class="line">        response = self.session.get(f&quot;&#123;self.base_url&#125;/api/open/cert&quot;, headers=headers)</span><br><span class="line">        data = response.json()</span><br><span class="line">        return data[&#x27;data&#x27;][&#x27;nodes&#x27;]</span><br><span class="line"></span><br><span class="line">    def update_cert(self, cert_id, crt, key):</span><br><span class="line">        headers = &#123;&#x27;authorization&#x27;: &#x27;Bearer &#x27; + self.jwt&#125;</span><br><span class="line">        payload = &#123;</span><br><span class="line">            &quot;manual&quot;: &#123;</span><br><span class="line">                &quot;crt&quot;: crt,</span><br><span class="line">                &quot;key&quot;: key</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;type&quot;: 2</span><br><span class="line">        &#125;</span><br><span class="line">        response = self.session.put(f&quot;&#123;self.base_url&#125;/api/open/cert/&#123;cert_id&#125;&quot;, headers=headers, json=payload)</span><br><span class="line">        data = response.json()</span><br><span class="line">        if data[&#x27;err&#x27;] is None:</span><br><span class="line">            print(&quot;update success&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    safeline = SafeLine(base_url=BASE_URL)</span><br><span class="line">    safeline.login(USERNAME, PASSWORD)</span><br><span class="line">    safeline.validate_mfa(get_passcode(OTP_SECRET))</span><br><span class="line"></span><br><span class="line">    with open(CERT_FILE_PATH, &#x27;r&#x27;) as cert_file:</span><br><span class="line">        cert_str = cert_file.read()</span><br><span class="line">    with open(CERT_KEY_PATH, &#x27;r&#x27;) as key_file:</span><br><span class="line">        cert_key = key_file.read()</span><br><span class="line">    safeline.update_cert(CERT_ID, cert_str, cert_key)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>安装依赖:  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install requests pyotp</span><br></pre></td></tr></table></figure>
<p>填好参数后 <code>python main.py</code> 运行，去到控制台便可以看到完成了证书更新。    </p>
<h3 id="部署到Certbot"><a href="#部署到Certbot" class="headerlink" title="部署到Certbot"></a>部署到Certbot</h3><p>Alliot 是使用 Certbot 自动申请的泛域名证书，配合对应 DNS 提供商的插件，可以实现自动颁发、续签证书。 这里使用 <a href="https://github.com/tengattack/certbot-dns-aliyun">certbot-dns-aliyun</a> 来实现阿里云托管域名的 Let’s Encrypt 证书自动申请。  </p>
<h4 id="安装部署Certbot-阿里云DNS插件"><a href="#安装部署Certbot-阿里云DNS插件" class="headerlink" title="安装部署Certbot &amp;&amp; 阿里云DNS插件"></a>安装部署Certbot &amp;&amp; 阿里云DNS插件</h4><p>已经有自己的证书的可以跳到下一小节。  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">确保已经安装Python3运行环境后执行</span> </span><br><span class="line">pip install certbot certbot-nginx certbot-dns-aliyun</span><br></pre></td></tr></table></figure>
<p>创建配置文件，填入阿里云 AccessKey（申请方式: <a href="https://www.alibabacloud.com/help/zh/cloudesl/developer-reference/obtain-an-accesskey-pair">获取AccessKey|Aliyun</a>）:  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /etc/certbot</span><br><span class="line"></span><br><span class="line">touch ali_credentials.ini  </span><br><span class="line">chmod 600 ali_credentials.ini</span><br></pre></td></tr></table></figure>
<p><code>ali_credentials.ini</code> 格式如下：  </p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">dns_aliyun_access_key</span> = xxxx</span><br><span class="line"><span class="attr">dns_aliyun_access_key_secret</span> = xxxx</span><br></pre></td></tr></table></figure>
<p>之后我们尝试申请一下证书:  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">certbot certonly \</span><br><span class="line">    --authenticator=dns-aliyun \</span><br><span class="line">    --dns-aliyun-credentials=&#x27;/etc/certbot/ali_credentials.ini&#x27; \</span><br><span class="line">    -d &quot;*.example.com,example.com&quot;</span><br></pre></td></tr></table></figure>
<p>添加一个定时任务到 <code>crontab</code>：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(crontab -l 2&gt;/dev/null; echo &quot;0 0 * * * certbot renew -q&quot;) | crontab -</span><br></pre></td></tr></table></figure>

<h4 id="配置自动更新雷池里的证书"><a href="#配置自动更新雷池里的证书" class="headerlink" title="配置自动更新雷池里的证书"></a>配置自动更新雷池里的证书</h4><p>现在 Certbot 已经可以为我们自动申请 SSL 证书了，我们可以利用 Certbot 的 renewal-hooks 来达到证书续期后自动更新到雷池： </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制上面的代码，填入自己的配置</span></span><br><span class="line">vim /etc/certbot/renew_safeline_cert.py</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个hook</span> </span><br><span class="line">cd /etc/letsencrypt/renewal-hooks/deploy</span><br><span class="line"></span><br><span class="line">cat &gt; update_safeline_ssl.sh &lt;&lt; EOF</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">python /etc/certbot/safeline_renew_cert/main.py</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<p>现在来测试一下 renewal-hooks:  </p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">certbot renew <span class="comment">--dry-run --run-deploy-hooks</span></span><br><span class="line">Saving debug <span class="built_in">log</span> <span class="built_in">to</span> /var/<span class="built_in">log</span>/letsencrypt/letsencrypt.<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">Processing /etc/letsencrypt/renewal/www.iots.vip.conf</span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">Simulating renewal <span class="keyword">of</span> <span class="keyword">an</span> existing certificate <span class="keyword">for</span> www.iots.vip</span><br><span class="line">Waiting <span class="number">30</span> <span class="built_in">seconds</span> <span class="keyword">for</span> DNS changes <span class="built_in">to</span> propagate</span><br><span class="line">Hook <span class="string">&#x27;deploy-hook&#x27;</span> ran <span class="keyword">with</span> output:</span><br><span class="line"> login success</span><br><span class="line"> update success</span><br></pre></td></tr></table></figure>
<p>可以看到 deploy-hook 成功执行，大工告成！ 之后每次 Certbot 在更新完证书后都会同步更新雷池里托管的 SSL 证书。  </p>
]]></content>
      <tags>
        <tag>折腾</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>云服务器性能评估与使用体验</title>
    <url>//post/vps-assessment.html</url>
    <content><![CDATA[<p>测试方法见之前的“服务器性能测试系列”<span id="more"></span>  </p>
<h2 id="测试概要"><a href="#测试概要" class="headerlink" title="测试概要"></a>测试概要</h2><p>主机和硬盘我直接选择了性能更优的 SSD 机型，从硬件迭代的角度说，之后高性能主机会更加普及和主流。为了保证测试数据可形成有效对比，本次测试在所有厂商申请的主机和带宽配置都相同，具体情况如下：  </p>
<ul>
<li>测试厂商：阿里云、比格云、华为企业云、腾讯云、UCloud。  </li>
<li>测试机型：IO 优化&#x2F;高 IO 型、4 核 CPU、8G 内存、100G 数据盘、5M BGP 网络。</li>
</ul>
<h2 id="测试内容、方法与工具"><a href="#测试内容、方法与工具" class="headerlink" title="测试内容、方法与工具"></a>测试内容、方法与工具</h2><ul>
<li>测试内容<br>本次测试主要对云主机实际使用中比较关注的几项做了一个检测，测试项目包括网络I&#x2F;O 能力、存储 IO 能力和 CPU 计算能力测试。  </li>
<li>测试工具<br>网络方面主要用 Netperf 2.7.0，多地 ping 直接用 Chinaz 在线测；IO 用 FIO 工具进行测试，软件是默认 yum 安装的最新版本；CPU 计算能力用 Unixbench，软件版本 5.1.3。</li>
</ul>
<h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><h3 id="网络测试结果对比"><a href="#网络测试结果对比" class="headerlink" title="网络测试结果对比"></a>网络测试结果对比</h3><h4 id="Ping-值测试结果"><a href="#Ping-值测试结果" class="headerlink" title="Ping 值测试结果"></a>Ping 值测试结果</h4><p><img data-src="https://static.iots.vip/2016/11/201611299514_6560.png" alt="Aliyun">Aliyun<br><img data-src="https://static.iots.vip/2016/11/201611295506_5207.png" alt="Biggeryun">Biggeryun<br><img data-src="https://static.iots.vip/2016/11/201611298889_8830.png" alt="Qcloud">Qcloud<br><img data-src="https://static.iots.vip/2016/11/201611297431_3708.png" alt="HUAWEI">HUAWEI<br><img data-src="https://static.iots.vip/2016/11/201611291130_3112.png" alt="UCloud">UCloud<br>　　通过多地区 ping 数据来看，阿里云、比格云、华为企业云和 UCloud 的网络在全国范围内均表现良好，但 4 家不同线路、不同节点的表现还是有些许差异：阿里云电信线路的表现很好，广东节点最快达到 7mm。联通、移动等线路的表现稍微逊色，但还是在通畅的范围内，基本速度都在 30mm 以内。值得一提是，海外香港节点的速度最快到 12mm，在提供海外节点的厂商中属于第一梯队。<br>　　比格云、华为企业云和 UCloud 的网络整体表现比较稳定。江苏和上海节点的网络速度全线比较通畅，电信、联通、移动、多线的响应速度大致在 10mm 以内，平均响应速度只有 40-60mm。尤其是比格云，作为新平台同华为和 UCloud 等老司机相比毫不逊色，网速一项仅次阿里，排名第二，表现十分惊艳。不过可惜没有海外节点。<br>　　腾讯云的网络情况比较鸡肋。广东和香港节点 6mm 高速响应，但是也有不少国内省市的响应速度已经掉出平均线，论坛里部分黑粉也曾给过腾讯的网速稳定性着重差评。不过Ping 值测试每次都会有一定数值差异，笔者只是轻喷。实际选择服务器时，大家还是要看自己实地测的结果。  </p>
<h4 id="Netperf-测试结果"><a href="#Netperf-测试结果" class="headerlink" title="Netperf 测试结果"></a>Netperf 测试结果</h4><table>
<thead>
<tr>
<th>测试主机</th>
<th align="center">Throughput（10^6bits&#x2F;sec）</th>
</tr>
</thead>
<tbody><tr>
<td>Biggeryun</td>
<td align="center">6.72</td>
</tr>
<tr>
<td>Aliyun</td>
<td align="center">4.72</td>
</tr>
<tr>
<td>HUAWEI</td>
<td align="center">3.39</td>
</tr>
<tr>
<td>UCloud</td>
<td align="center">4.75</td>
</tr>
<tr>
<td>总体看，阿里云、比格云、腾讯云、UCloud 在此项的表现都比较正常。其中比格云测出来给到用户的带宽比实际申请的更大，量比较足。HUAWEI 在相同配置的情况下，测出TCP 带宽 3.39M，我仔细检查命令又测了一遍，确实还是这个数据。具体原因我并没有跟官方校准深究，可能是我 Sever 主机的网络跟华为之间连通不太好，也有可能是华为给到的带宽不太够。</td>
<td align="center"></td>
</tr>
</tbody></table>
<h3 id="IO-测试结果对比"><a href="#IO-测试结果对比" class="headerlink" title="IO 测试结果对比"></a>IO 测试结果对比</h3><table>
<thead>
<tr>
<th></th>
<th align="center">4K随机读</th>
<th align="center">4K随机写</th>
<th align="center">512k顺序读</th>
<th align="center">512k顺序写</th>
</tr>
</thead>
<tbody><tr>
<td>Biggeryun</td>
<td align="center">iops&#x3D;252897</td>
<td align="center">iops&#x3D;247642</td>
<td align="center">bw&#x3D;21086MB&#x2F;s</td>
<td align="center">bw&#x3D;17631MB&#x2F;s</td>
</tr>
<tr>
<td>Aliyun</td>
<td align="center">iops&#x3D;2998</td>
<td align="center">iops&#x3D;2998</td>
<td align="center">bw&#x3D;100MB&#x2F;s</td>
<td align="center">bw&#x3D;100.1KB&#x2F;s</td>
</tr>
<tr>
<td>Qcloud</td>
<td align="center">iops&#x3D;114173</td>
<td align="center">iops&#x3D;14639</td>
<td align="center">bw&#x3D;3629.9MB&#x2F;s</td>
<td align="center">bw&#x3D;4135.8MB&#x2F;s</td>
</tr>
<tr>
<td>HUAWEI</td>
<td align="center">iops&#x3D;20002</td>
<td align="center">iops&#x3D;20002</td>
<td align="center">bw&#x3D;349.8MB&#x2F;s</td>
<td align="center">bw&#x3D;350.1MB&#x2F;s</td>
</tr>
<tr>
<td>UCloud</td>
<td align="center">iops&#x3D;56350</td>
<td align="center">iops&#x3D;35464</td>
<td align="center">bw&#x3D;8380.8MB&#x2F;s</td>
<td align="center">bw&#x3D;150121KB&#x2F;s</td>
</tr>
<tr>
<td>相同配置条件下，比格云的 IOPS 已经明显爆表了。他们官网宣传的数字是 12 万，我实际测出来的有 25 万，也是逆天。回头看下他们家的网络测试结果，也是实际的比官方公布的更高。可见比格云官方还是以低调、稳重为主的。腾讯、华为的 IO 优化主机，性能均较普通型主机有很大提升。阿里和 UCloud 应该是机房负载过高，同样的 SSD 主机，但看IO 一项结果并不是很理想。</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<h3 id="CPU-计算能力测试结果对比"><a href="#CPU-计算能力测试结果对比" class="headerlink" title="CPU 计算能力测试结果对比"></a>CPU 计算能力测试结果对比</h3><table>
<thead>
<tr>
<th></th>
<th align="center">1parallel</th>
<th align="center">4 parallel</th>
</tr>
</thead>
<tbody><tr>
<td>Biggeryun</td>
<td align="center">1704.9</td>
<td align="center">4578.7</td>
</tr>
<tr>
<td>Aliyun</td>
<td align="center">1091.0</td>
<td align="center">3087.6</td>
</tr>
<tr>
<td>Qcloud</td>
<td align="center">1512.6</td>
<td align="center">3910.4</td>
</tr>
<tr>
<td>HUAWEI</td>
<td align="center">1540.0</td>
<td align="center">3178.0</td>
</tr>
<tr>
<td>UCloud</td>
<td align="center">1212.6</td>
<td align="center">3786.7</td>
</tr>
<tr>
<td>比格云的 CPU 也不错，新平台到底是全新的设备，性能领先。腾讯、华为依旧持平，保持大厂风范。垫底的还是阿里和 UCloud。</td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<h2 id="综合使用体验"><a href="#综合使用体验" class="headerlink" title="综合使用体验"></a>综合使用体验</h2><p>　　综合分析之前，先比个价格： </p>
<table>
<thead>
<tr>
<th></th>
<th align="center">包月&#x2F;包年计费</th>
<th align="center">按需计费</th>
</tr>
</thead>
<tbody><tr>
<td>Biggeryun</td>
<td align="center">562元&#x2F;月</td>
<td align="center">1.55元&#x2F;小时</td>
</tr>
<tr>
<td>Aliyun</td>
<td align="center">627元&#x2F;月</td>
<td align="center">2.14元&#x2F;小时</td>
</tr>
<tr>
<td>Qcloud</td>
<td align="center">591元&#x2F;月</td>
<td align="center">2.07元&#x2F;小时</td>
</tr>
<tr>
<td>HUAWEI</td>
<td align="center">654.8元&#x2F;月</td>
<td align="center">1.96元&#x2F;小时</td>
</tr>
<tr>
<td>UCloud</td>
<td align="center">581元&#x2F;月</td>
<td align="center">1.22元&#x2F;小时</td>
</tr>
<tr>
<td>从实用角度，综合主机性能、网络、价格、易用性 4 方面来说，本次测试后我的排序是：</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td>Biggeryun&gt;UCloud&gt; Aliyun&gt; Qcloud&gt;HUAWEI。</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td>先说说排第一的比格云，为什么把它放大厂里面对比测。因为这家也是大厂——盛大云的盘子。盛大云在国内云计算刚兴起的时候就稳坐了业内老大，技术和布局也曾是国内一哥，然而遗憾后期没落。这次测下来，新布局的比格云虽是新平台，但单谈主机性能在同类厂商中已经是前三了。价格对比普通主机略贵，但是在高性能领域 PK 性价比非常明显。受制于刚刚上线，产品类型、产品布局、方案类的东西还是较为欠缺。但是有老盛大的经验和资金支持，我想他们之后扩张的速度会非常快，也许会是一匹半路杀出来的黑马。</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td>阿里毋庸置疑是云计算行业大哥大。或许是布局比较早，受到底层架构的限制，SSD 高配对比从前的普通款并没有太大的提升和惊喜。网络方面表现一流，虽说价钱贵一点，但还是稳定放心的。阿里产品类型、产品生态、周边的服务，也是业内最强。阿里现在自身也在积极发展大数据、人工智能、物联网方向，预计在未来互联网的新变化和新兴产业链上，配套方案和服务的提供也会抢先其他平台。</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td>UCloud 跟七牛在云计算行业创业至今，也可以说是杀出一条血路的神话了。在各大厂商紧锣密鼓布局之中杀出一条血路，非扎实的技术和深厚的行业积淀不能成。本次测试中，UCloud 的表现基本跟宣传相符，价格亲民、性能虽不拔尖但也够用，界面简洁、体验很不错。但云计算是重资产的行业，UCloud 作为创业公司，比起其他大厂来说路还有很长。</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td>腾讯和华为两家实力不相伯仲，各有各的优势，各有各的槽点。性能方面都是大厂风范，但腾讯的网络不均衡、界面复杂，华为的网络、界面体验都不佳，而且镜像功能也有缺失。还望两家大厂的产品经理长点儿心，对产品细节好好优化一下，不要被后浪拍在沙滩上。</td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<hr>
<p>文字经过朋友的加工，但是数据确为如此。<br>PS：不吹不黑，比格云、UCLOUD的机器性价比最高（当然，是在没有考虑其他因素的情况下）然后就是阿里云（自己用的就是阿里的，感觉挺不错的，后台需要适应，不过VPS的话，不怎么用到后台管理面板）腾讯云同等配置情况下，较阿里云慢一点（本博客就是腾讯云的） 最差的感觉就是华为了。。。暂且不说性能，单说镜像与面板就很不舒服了。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>优雅的处理Git多帐号与代理问题</title>
    <url>//post/elegant-solution-git-multiple-accounts-proxy-issues.html</url>
    <content><![CDATA[<p>　　在工作中，常常会容易遇到一台电脑用多个 Git 账号的场景，比如账号 company 账号是工作用的，而账号 personal 是自己个人用的。 由于 Git 本身并没有多账号的机制，导致我们在默认设置下无法很好的区分哪个仓库使用哪个账号。 同时，在某些众所周知的场景下，我们无法直接访问到 Github 仓库，需要走一层 proxy 来加速我们的代码拉取与推送速度， 本文将使用 SSH config 相对优雅的解决这些问题。<span id="more"></span></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>　　Git 通常的鉴权方式有两种： HTTPS 与 SSH，前者通常是在需要鉴权的操作时(如<code>git push</code>)，弹出（或是在命令行提示）填写用户名与密码的认证，通过后方可继续执行，这种方式不是很方便的同时，也存在一定的安全隐患，目前已经<a href="https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/">被 Github 弃用</a>；后者 SSH 方式，通过提前配置好的 SSH 密钥来对 Git 做鉴权，不再需要输入用户名密码，是现在更为推荐的鉴权方式。<br>　　如何在 Github 配置 SSH 公钥使用密钥认证，参考:<br><a href="https://docs.github.com/zh/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account">新增 SSH 密钥到 GitHub 帐户</a><br><a href="https://coding.net/help/docs/repo/ssh/config.html">如何配置 SSH 公钥访问 git 仓库? – CODING 帮助中心</a>  </p>
<p>　　至于代理，在之前的一篇博客 <a href="/post/ssh-over-proxy-by-nc.html">Using a proxy for ssh connections based on netcat</a> 中，我们曾经使用 SSH config来实现对SSH流量的代理。既然 Git 可以通过 SSH 方式进行连接，自然我们也可以使用这种方式来实现代理。</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>　　在Alliot的电脑中，存在四个不同的Git账号，一个是个人的Coding账号，一个是个人的GitHub账号，还有一个是公司的GitHub账号，以及一个自建的Gitea账号。Coding仓库可以直连，不需要代理；而GitHub由于众所周知的原因需要代理来加速；自建的Gitea仓库则需要通过个人的隧道来连接到内网。以下是Alliot所用的整体示例配置：</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这里可以 Include 其他路径的 ssh config  </span></span><br><span class="line"><span class="comment"># Include /home/root/.ssh/config</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这是 Coding的配置</span></span><br><span class="line">Host e.coding.net</span><br><span class="line">    Hostname e.coding.net</span><br><span class="line">    <span class="keyword">User</span> <span class="title">git</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义ssh私钥地址</span></span><br><span class="line">    IdentityFile ~/.ssh/coding</span><br><span class="line"></span><br><span class="line"><span class="comment"># 公共仓库，不需要登录的，我直接使用原域</span></span><br><span class="line">Host github.com</span><br><span class="line">    Hostname ssh.github.com</span><br><span class="line">    Port <span class="number">443</span></span><br><span class="line">    <span class="keyword">User</span> <span class="title">git</span></span><br><span class="line">    <span class="comment"># 定义ssh私钥地址</span></span><br><span class="line">    IdentityFile ~/.ssh/alliot</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用nc做proxy转发</span></span><br><span class="line">    ProxyCommand /usr/bin/nc -X <span class="number">5</span> -x <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">7890</span> %h %p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自己个人账号下的私有仓库，我定义Host为alliot.github来区分  </span></span><br><span class="line">Host alliot.github</span><br><span class="line">    Hostname ssh.github.com</span><br><span class="line">    Port <span class="number">443</span></span><br><span class="line">    <span class="keyword">User</span> <span class="title">git</span></span><br><span class="line">    IdentityFile ~/.ssh/alliot</span><br><span class="line">    <span class="comment"># 使用nc做proxy转发</span></span><br><span class="line">    ProxyCommand /usr/bin/nc -X <span class="number">5</span> -x <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">7890</span> %h %p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 公司账号，定义Host为corp.github来区分  </span></span><br><span class="line">Host corp.github</span><br><span class="line">    Hostname ssh.github.com</span><br><span class="line">    Port <span class="number">443</span></span><br><span class="line">    <span class="keyword">User</span> <span class="title">git</span></span><br><span class="line">    IdentityFile ~/.ssh/company</span><br><span class="line">    ProxyCommand /usr/bin/nc -X <span class="number">5</span> -x <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">7890</span> %h %p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自建的Git</span></span><br><span class="line">Host git.local</span><br><span class="line">    Hostname <span class="number">192.168</span>.<span class="number">1.123</span></span><br><span class="line">    <span class="keyword">User</span> <span class="title">git</span></span><br><span class="line">    IdentitAyFile ~/.ssh/key</span><br><span class="line">    ProxyCommand /usr/bin/nc -X <span class="number">5</span> -x <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">7890</span> %h %p</span><br><span class="line">    Port <span class="number">22</span></span><br><span class="line">    ForwardAgent yes</span><br></pre></td></tr></table></figure>
<p>　　根据上面的配置可以看出，我们使用 <code>Host</code> 字段来配置仓库地址的别名，在命令行拉取或克隆仓库时，可以使用自定义的 <code>Host</code> 来区分不同的 SSH 密钥，这样就能实现如下效果：<br>　　当需要使用个人 Github 账号来克隆一个仓库时， 我们可以使用如下命令：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone git@alliot.github:AlliotTech/AlliotTech.git  </span><br></pre></td></tr></table></figure>
<p>　　注意，这里使用 <code>alliot.github</code> 代替了原本的 <code>github.com</code>， 这样所有流量都会代理至本地 7890 端口，并且使用 <code>~/.ssh/alliot</code> 作为 SSH 密钥来鉴权。 </p>
<p>　　而当需要使用公司帐号的时候，我们可以使用如下的命令：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone git@corp.github:AlliotTech/AlliotTech.git  </span><br></pre></td></tr></table></figure>
<p>　　使用 <code>corp.github</code> 代替了原本的 <code>github.com</code>， 这样就避免了每次都要切换账号的问题。</p>
<p>　　需要注意的是，目前(2022年) Github 的 SSH 连接方式必须按照 Alliot 这里的配置来(参考<a href="https://docs.github.com/en/authentication/troubleshooting-ssh/using-ssh-over-the-https-port#enabling-ssh-connections-over-https">Enabling SSH connections over HTTPS</a>)  ，即：  </p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">Hostname ssh.github.com</span><br><span class="line">Port <span class="number">443</span></span><br><span class="line"><span class="keyword">User</span> <span class="title">git</span></span><br></pre></td></tr></table></figure>
<p>否则可能会遇到类似的错误：  </p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Connection</span> closed <span class="keyword">by</span> <span class="type">UNKNOWN</span> port <span class="number">65535</span></span><br><span class="line">致命错误：无法读取远程仓库。</span><br><span class="line"></span><br><span class="line">请确认您有正确的访问权限并且仓库存在。</span><br></pre></td></tr></table></figure>

<h3 id="拓展阅读"><a href="#拓展阅读" class="headerlink" title="拓展阅读"></a>拓展阅读</h3><p><a href="https://www.ssh.com/academy/ssh/config">SSH config file for OpenSSH client</a>  </p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>从零部署Zabbix服务器</title>
    <url>//post/zabbix-deployment.html</url>
    <content><![CDATA[<p>　　Zabbix 是一个优秀的企业级分布式开源监控套件，支持对服务、硬件、网络的监控与告警。本文记录了如何从零部署一个 Zabbix 服务器。<a href="https://www.zabbix.com/download">Zabbix官网文档</a> 其实已经很详尽，基础较好的同学可以直接关闭本文，或是拿来避坑用。  <span id="more"></span></p>
<h3 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h3><p>系统： CentOS 7.6<br>数据库： MySQL 5.7.28 Community Server （Zabbix 支持 MySQL 与 PostgreSQL）<br>推荐使用阿里云的 yum 镜像源，执行以下命令即可：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/AlliotTech/yum2aliyun/master/yum2aliyun.sh &amp;&amp; chmod +x yum2aliyun.sh &amp;&amp; ./yum2aliyun.sh 2&gt;&amp;1 | tee yum2aliyun.log  </span><br></pre></td></tr></table></figure>
<h3 id="安装-MySQL"><a href="#安装-MySQL" class="headerlink" title="安装 MySQL"></a>安装 MySQL</h3><p>优先采用 <code>yum</code> 方式安装（啰嗦一句：能通过 <code>yum</code> 安装的软件尽量通过 <code>yum</code> 来安装，编译等方式安装软件管理起来其实很不方便）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载并启用 MySQL 的源</span></span><br><span class="line">cd /etc/yum.repos.d/</span><br><span class="line">wget  http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm </span><br><span class="line">yum localinstall mysql57-community-release-el7-10.noarch.rpm </span><br><span class="line">yum repolist enabled | grep &quot;mysql.*-community.*&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑 MySQL 的源，将 5.7 的 <span class="built_in">enable</span> 改为 1， 5.6 的 <span class="built_in">enable</span> 改为0</span></span><br><span class="line">vim /etc/yum.repos.d/mysql-community.repo </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 MySQL</span>  </span><br><span class="line">yum install -y mysql-community-server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动 MySQL</span></span><br><span class="line">systemctl start mysqld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 MySQL 默认密码</span></span><br><span class="line">grep &#x27;temporary password&#x27; /var/log/mysqld.log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置 MySQL 开机启动</span></span><br><span class="line">systemctl enable mysqld和systemctl daemon-reload</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登录 mysql</span> </span><br><span class="line">mysql -u root -p</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改mysql密码（mysql5.7新增了密码策略，默认策略为：必须包含大小写字母、数字和特殊符号，并且长度不能少于8位。否则会提示错误）</span> </span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;myPassword123#&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>参考链接：<br><a href="https://blog.csdn.net/qq2430/article/details/80473748">CentOS 安装 MySQL </a></p>
<h3 id="安装-Zabbix"><a href="#安装-Zabbix" class="headerlink" title="安装 Zabbix"></a>安装 Zabbix</h3><h4 id="添加-Zabbix-官方源"><a href="#添加-Zabbix-官方源" class="headerlink" title="添加 Zabbix 官方源"></a>添加 Zabbix 官方源</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -Uvh https://repo.zabbix.com/zabbix/4.4/rhel/7/x86_64/zabbix-release-4.4-1.el7.noarch.rpm</span><br><span class="line">yum clean all</span><br></pre></td></tr></table></figure>
<h4 id="安装-Zabbix-组件"><a href="#安装-Zabbix-组件" class="headerlink" title="安装 Zabbix 组件"></a>安装 Zabbix 组件</h4><p>包括 前端、服务端、Agent：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install zabbix-server-mysql zabbix-web-mysql zabbix-apache-conf zabbix-agent</span><br></pre></td></tr></table></figure>
<p>这里 Alliot 遇到 <code>yum</code> 下载 zabbix-server-mysql 报错，无法继续安装，这种情况一般是由于网络状况导致部分 rpm 包无法下载，手动去<a href="http://repo.zabbix.com/zabbix/4.4/rhel/7">Zabbix的repo</a> 下载对应的包，置于 <code>yum</code> 的缓存目录重新执行 <code>yum install</code> 即可。</p>
<h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p  # 输入密码 （上面更改密码为myPassword123#）</span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">create database zabbix character <span class="built_in">set</span> utf8 collate utf8_bin;</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">grant all privileges on zabbix.* to zabbix@localhost identified by <span class="string">&#x27;password&#x27;</span>;</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">quit;</span></span><br></pre></td></tr></table></figure>
<h4 id="导入数据库表"><a href="#导入数据库表" class="headerlink" title="导入数据库表"></a>导入数据库表</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz | mysql -uzabbix -p zabbix  </span><br></pre></td></tr></table></figure>
<h4 id="编辑Zabbix数据库连接"><a href="#编辑Zabbix数据库连接" class="headerlink" title="编辑Zabbix数据库连接"></a>编辑Zabbix数据库连接</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">DBPassword=password(这里为MySQL密码，如上面更改的myPassword123#)</span><br></pre></td></tr></table></figure>
<h4 id="编辑Zabbix时区"><a href="#编辑Zabbix时区" class="headerlink" title="编辑Zabbix时区"></a>编辑Zabbix时区</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/httpd/conf.d/zabbix.conf</span><br></pre></td></tr></table></figure>
<p>将 <code>php_value date.timezone Europe/Riga</code> 改为 <code>php_value date.timezone Asia/Shanghai</code>。<br>关于 PHP时区，参考： <a href="https://www.php.net/manual/zh/timezones.php">PHP支持的时区列表</a>  </p>
<h4 id="启动Zabbix"><a href="#启动Zabbix" class="headerlink" title="启动Zabbix"></a>启动Zabbix</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart zabbix-server zabbix-agent httpd</span><br><span class="line">systemctl enable zabbix-server zabbix-agent httpd</span><br></pre></td></tr></table></figure>
<p>访问: <a href="https://ip/zabbix">https://ip/zabbix</a> 即可进入前端安装界面，数据库默认端口3306。<br>用户名：Admin<br>密码： zabbix  </p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>MySQL</tag>
        <tag>运维监控</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Navicat连接群晖的PostgreSQL数据库</title>
    <url>//post/navicat-connect-synology-postgresql.html</url>
    <content><![CDATA[<p>　　群晖的类似 Moments、Audio station、Video Station 等套件都是使用群晖内置的一个 PostgreSQL 数据库，记录一下连接这个数据库的方法。温馨提示： 群晖多个套件均依赖此数据库，没有一定基础的同学，请做好备份，自行评估操作风险。<span id="more"></span></p>
<h3 id="创建数据库用户并授权"><a href="#创建数据库用户并授权" class="headerlink" title="创建数据库用户并授权"></a>创建数据库用户并授权</h3><p>　　打开<a href="/post/synology-series-1.html#ssh-%E8%BF%9E%E6%8E%A5%E5%B9%B6%E8%8E%B7%E5%BE%97-root-%E6%9D%83%E9%99%90">ssh 连接并群晖获取 root 权限</a>，切换到 posgres 用户，进入 <code>psql</code> 交互命令行，创建新用户并授权：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到postgres用户</span></span><br><span class="line">su - postgres</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入posql交互</span></span><br><span class="line">psql</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 创建用户</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> 用户名 PASSWORD <span class="string">&#x27;密码&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># 授权所有权限</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> 用户名 <span class="keyword">WITH</span> SUPERUSER CREATEDB;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> 用户名 <span class="keyword">WITH</span> CREATEDB;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> 用户名 <span class="keyword">WITH</span> CREATEROLE;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> 用户名 <span class="keyword">WITH</span> REPLICATION;</span><br><span class="line"></span><br><span class="line"># 查看用户列表 看是否执行成功</span><br><span class="line">\du</span><br><span class="line"></span><br><span class="line"># 退出psql</span><br><span class="line">\q</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出postgres用户，回到root下</span></span><br><span class="line">exit</span><br></pre></td></tr></table></figure>
<p>　　修改 <code>pg_hba.conf</code>，将新建的用户授权登陆：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/postgresql/pg_hba.conf</span><br></pre></td></tr></table></figure>
<p>　　原始内容为：  </p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"># <span class="keyword">TYPE</span>  <span class="keyword">DATABASE</span>        <span class="keyword">USER</span>            ADDRESS                 <span class="keyword">METHOD</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span>   <span class="keyword">all</span>             postgres                                peer map=pg_root</span><br><span class="line"><span class="keyword">local</span>   <span class="keyword">all</span>             <span class="keyword">all</span>                                     peer</span><br></pre></td></tr></table></figure>
<p>　　我们新增一行，<code>host all 用户名 127.0.0.1/0 md5</code>，修改之后内容为：  </p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"># <span class="keyword">TYPE</span>  <span class="keyword">DATABASE</span>        <span class="keyword">USER</span>            ADDRESS                 <span class="keyword">METHOD</span></span><br><span class="line">host    <span class="keyword">all</span>             用户名           <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>/<span class="number">0</span>             md5</span><br><span class="line"><span class="keyword">local</span>   <span class="keyword">all</span>             postgres                                peer map=pg_root</span><br><span class="line"><span class="keyword">local</span>   <span class="keyword">all</span>             <span class="keyword">all</span>                                     peer</span><br></pre></td></tr></table></figure>
<p>　　重新载入配置文件:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su -l postgres -c &quot;exec /usr/bin/pg_ctl reload&quot;</span><br></pre></td></tr></table></figure>

<h3 id="修改群晖sshd配置，允许端口转发"><a href="#修改群晖sshd配置，允许端口转发" class="headerlink" title="修改群晖sshd配置，允许端口转发"></a>修改群晖sshd配置，允许端口转发</h3><p>　　不进行此步操作，后面使用 ssh 隧道连接数据库的时候，终端会出现类似 <code>channel 4: open failed: administratively prohibited: open failed</code> 的报错。  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>
<p>　　在约 86 行（Alliot的是DSM6.2版本），找到<code>AllowTcpForwarding no</code> 将其改为 <code>AllowTcpForwarding yes</code>,保存退出（<code>i</code> 为编辑，编辑完后，按一下 <code>ESC</code>，依次输入<code>:wq</code>即可保存退出）。<br>直接登陆网页的 DSM 控制台，依次进入 控制面板——终端机和SNMP——终端机，将“启动SSH功能”取消勾选，应用之后，重新勾选并应用，即可重启 <code>sshd</code> 服务。（<code>synoservice</code>没找到<code>sshd</code>服务，直接用控制台吧&#x3D;.&#x3D;!）  </p>
<h3 id="使用Navicat连接数据库"><a href="#使用Navicat连接数据库" class="headerlink" title="使用Navicat连接数据库"></a>使用Navicat连接数据库</h3><p>　　新建——PostgreSQL，连接名随意，主机填写127.0.0.1，端口填写 PostgreSQL 监听的端口 5432，初始数据库填写 <code>postgres</code>，用户名、密码为前面新建数据库用户设置的，在 “SSH” 页选择使用 SSH 通道，IP、用户名、密码使用群晖的 ssh 连接信息即可。<br>　　使用 macOS 的同学如果 Navicat 自带的 SSH 通道兼容性有问题的，可以本地使用SSH隧道进行端口转发：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1234为本地监听的端口，5432 为群晖上postgreSQL的监听端口</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root@192.168.1.2 -p 22 表示Alliot的群晖用户名为root，IP为192.168.1.2，sshd端口为22</span></span><br><span class="line">ssh -L 5432:127.0.0.1:5432 root@192.168.1.2 -p 22</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看macOS本地监听的端口，出现1234端口的监听则OK</span></span><br><span class="line">netstat -AaLlnW </span><br></pre></td></tr></table></figure>
<p>之后 Navicat 连接时，端口填 5432 。  </p>
<h3 id="删除用户，回收权限"><a href="#删除用户，回收权限" class="headerlink" title="删除用户，回收权限"></a>删除用户，回收权限</h3><p>　　操作完成后，如果需要回收权限，恢复到原样。只需要删除我们新增的那行 <code>pg_hba.conf</code> 配置文件的内容。进入 <code>psql</code> 交互命令中，执行：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> 用户名;</span><br></pre></td></tr></table></figure>
<p>即可。  </p>
]]></content>
      <tags>
        <tag>折腾</tag>
        <tag>群晖</tag>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Django为Nightingale实现Jira伪统一认证</title>
    <url>//post/nightingale-jira-auth.html</url>
    <content><![CDATA[<p>&emsp;&emsp;由于我司内部系统均使用 Jira 的统一认证，而在用的监控平台 <a href="https://github.com/didi/nightingale">Nightingale</a> 并不支持 Jira 认证的接口，因此就有了本文。（还有其他诸多不支持 Jira 认证的平台也可通过相同思路实现 Jira 统一认证）<span id="more"></span></p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>&emsp;&emsp;众所周知，用户认证的过程就是将用户的认证信息发往服务端进行核对数据库用户名和密码的相关信息是否正确的过程。<br>&emsp;&emsp;Jira 有用于用户认证的 Restful 接口，可以通过 POST 请求对用户进行鉴权。而 Nightingale 作为前后端分离的项目，各个模块都很好的进行了解耦，拥有独立的认证接口，因此，我们要做的仅仅是将用户认证模块的请求拦截后转向到 Jira 等统一认证平台进行认证再返回即可。将用户的认证请求拦截的这个过程我们可以通过 Nginx 去实现。  </p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>&emsp;&emsp;我们先来抓一下 Nightingale 的认证接口。通过浏览器控制台将登陆过程中的请求抓下来得到类似这样的一个请求：  </p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">url: http:<span class="comment">//www.iots.vip/api/rdb/auth/login  </span></span><br><span class="line"><span class="keyword">method</span>: POST</span><br><span class="line">header: content-<span class="keyword">type</span>: application/json</span><br><span class="line">body: <span class="comment">&#123;username: &quot;alliot&quot;, password: &quot;alliot&quot;, is_ldap: 0&#125;</span></span><br><span class="line">response: <span class="comment">&#123;&quot;err&quot;: &quot;&quot;&#125;</span> # err 为空则成功登陆并带上一个 cookie</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;因此，我们需要实现这样一个接口：接口拿到用户鉴权信息去到 Jira 认证接口进行认证，认证成功后模拟登陆拿到 Nightingale 认证的 Cookie 并响应给浏览器即可。<br>&emsp;&emsp;因为需要综合进内部的 Django 项目中，所以这里是通过 Django 来实现的（当然你也可以使用 FastApi、Flask 之类更轻量的框架去实现）代码如下： </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="comment"># by: Alliot</span></span><br><span class="line"><span class="comment"># date: 2021-05-13</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse, HttpResponseRedirect</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">JIRA_BASIC_URL = <span class="string">&#x27;http://www.iots.vip&#x27;</span> <span class="comment"># Jira地址</span></span><br><span class="line">JIRA_LOGIN_URL = <span class="string">&#x27;/rest/auth/1/session&#x27;</span></span><br><span class="line">JIRA_LOGIN_OUT_URL = <span class="string">&#x27;/rest/auth/1/session&#x27;</span></span><br><span class="line">JIRA_LOGIN_WHO_URL = <span class="string">&#x27;/rest/api/2/myself&#x27;</span></span><br><span class="line">JIRA_GET_USER = <span class="string">&#x27;/rest/api/2/user&#x27;</span></span><br><span class="line"></span><br><span class="line">N9E_HOST = <span class="string">&#x27;http://127.0.0.1:8000&#x27;</span></span><br><span class="line"><span class="comment"># n9e token 在个人设置中创建</span></span><br><span class="line">N9E_TOKEN = <span class="string">&#x27;alliot_4578492a3280&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    拦截的请求入口</span></span><br><span class="line"><span class="string">    :param request:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    data = request.body</span><br><span class="line">    data = json.loads(data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        login_username = data[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        login_password = data[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">        use_ldap = data[<span class="string">&#x27;is_ldap&#x27;</span>]</span><br><span class="line">        <span class="comment"># 判断是否勾选使用LDAP登陆，是则使用n9e原生认证接口，否则使用JIRA认证接口</span></span><br><span class="line">        <span class="keyword">if</span> use_ldap:</span><br><span class="line">            data[<span class="string">&#x27;is_ldap&#x27;</span>] = <span class="number">0</span></span><br><span class="line">            <span class="keyword">return</span> n9e_login(login_username, login_password)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            jira_user_data = &#123;</span><br><span class="line">                <span class="string">&#x27;username&#x27;</span>: login_username,</span><br><span class="line">                <span class="string">&#x27;password&#x27;</span>: login_password&#125;</span><br><span class="line">            headers = &#123;<span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>&#125;</span><br><span class="line">            status_code = <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                result = requests.post(</span><br><span class="line">                    JIRA_BASIC_URL +</span><br><span class="line">                    JIRA_LOGIN_URL,</span><br><span class="line">                    json=jira_user_data,</span><br><span class="line">                    headers=headers)</span><br><span class="line">                cookies = result.cookies</span><br><span class="line">                result_user = requests.get(</span><br><span class="line">                    JIRA_BASIC_URL + JIRA_GET_USER,</span><br><span class="line">                    params=jira_user_data,</span><br><span class="line">                    cookies=cookies)</span><br><span class="line">                status_code = result_user.status_code</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(e)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Auth Failed&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> status_code == <span class="number">200</span>:</span><br><span class="line">                <span class="keyword">return</span> n9e_login(login_username, login_password)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> HttpResponse(content=json.dumps(&#123;</span><br><span class="line">                <span class="string">&quot;err&quot;</span>: <span class="string">&quot;登陆失败，请检查jira用户名/密码，其他问题请联系Alliot&quot;</span></span><br><span class="line">            &#125;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">n9e_login</span>(<span class="params">username, password</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    n9e原生登陆接口，直接响应结果</span></span><br><span class="line"><span class="string">    :param username:</span></span><br><span class="line"><span class="string">    :param password:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    post_data = json.dumps(&#123;</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: username,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>: password,</span><br><span class="line">        <span class="string">&#x27;is_ldap&#x27;</span>: <span class="number">0</span></span><br><span class="line">    &#125;)</span><br><span class="line">    session = requests.Session()</span><br><span class="line">    r = session.post(<span class="string">f&#x27;<span class="subst">&#123;N9E_HOST&#125;</span>/api/rdb/auth/login&#x27;</span>, data=post_data)</span><br><span class="line">    cookie_dict = requests.utils.dict_from_cookiejar(r.cookies)</span><br><span class="line">    <span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line">    response = HttpResponse(content=json.dumps(&#123;</span><br><span class="line">        <span class="string">&#x27;err&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;))</span><br><span class="line">    response.set_cookie(<span class="string">&#x27;ecmc-sid&#x27;</span>, cookie_dict[<span class="string">&#x27;ecmc-sid&#x27;</span>])</span><br><span class="line">    pprint(response)</span><br><span class="line">    <span class="comment"># print(&#x27;-&#x27;*10)</span></span><br><span class="line">    <span class="comment"># pprint(r.text)</span></span><br><span class="line">    <span class="keyword">if</span> r.text == <span class="string">&#x27;&#123;&quot;err&quot;:&quot;登陆失败，请检查用户名/密码&quot;&#125;&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(n9e_register(username, password))</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(content=json.dumps(&#123;</span><br><span class="line">            <span class="string">&quot;err&quot;</span>: <span class="string">&quot;这是你第一次登陆本系统，正在同步账号信息，请重新登陆一次&quot;</span></span><br><span class="line">        &#125;))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">n9e_reset_password</span>(<span class="params">username, password</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(content=json.dumps(&#123;</span><br><span class="line">        <span class="string">&quot;err&quot;</span>: <span class="string">&quot;jira密码与n9e密码不一致，请重置n9e密码&quot;</span></span><br><span class="line">    &#125;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">n9e_register</span>(<span class="params">username, password</span>):</span><br><span class="line">    payload = json.dumps(&#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;username&quot;</span>: username,</span><br><span class="line">        <span class="string">&quot;password&quot;</span>: password,</span><br><span class="line">        <span class="string">&quot;dispname&quot;</span>: username,</span><br><span class="line">        <span class="string">&quot;is_root&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;active_begin&quot;</span>: <span class="literal">None</span>,</span><br><span class="line">        <span class="string">&quot;active_end&quot;</span>: <span class="literal">None</span>,</span><br><span class="line">        <span class="string">&quot;is_tenant_admin&quot;</span>: <span class="number">0</span></span><br><span class="line">    &#125;)</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;X-User-Token&#x27;</span>: N9E_TOKEN</span><br><span class="line">    &#125;</span><br><span class="line">    r = requests.request(<span class="string">&quot;POST&quot;</span>, <span class="string">f&#x27;<span class="subst">&#123;N9E_HOST&#125;</span>/api/rdb/users&#x27;</span>, headers=headers, data=payload)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;已存在&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        n9e_reset_password(username, password)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># urls.py: </span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> app.views <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;api/rdb/auth/login&#x27;</span>, login),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>修改 Nightingale 的 nginx 配置将请求拦截到我们的接口，配置如下：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># n9e.conf</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">        # 拦截n9e认证登陆接口</span><br><span class="line">        location /api/rdb/auth/login &#123;</span><br><span class="line">          proxy_pass http://localhost:8081/api/rdb/auth/login; # 代理到我们写的接口</span><br><span class="line">        &#125;</span><br><span class="line">...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;这样，用户登陆 Nightingale 默认是通过 Jira 来进行用户鉴权的，当 Jira 用户鉴权通过，则会去用账号密码模拟登陆 Nightingale，当认证成功（表示 Nightingale 中存在该用户，并且账号密码正确），则返回模拟登陆得到的 Cookies 返回给用户。当 Nightingale 不存在该用户时，则会调用 Nightingale 接口创建用户（账号密码与 Jira 一致）；当用户勾选 ldap 登陆后，则会直接走 Nightingale 来登陆。  </p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>&emsp;&emsp;这个伪统一认证实际上只是通过 Jira 验证了用户信息，避免了新用户创建账号的烦恼，权限控制等依然在 Nightingale 中完成，同时也不影响现有的 Nightingale 用户。  </p>
]]></content>
      <tags>
        <tag>折腾</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Packer构建AWS AMI镜像</title>
    <url>//post/packer-build-aws-ami-for-jenkins-node.html</url>
    <content><![CDATA[<p>　　<a href="https://www.packer.io/">Packer</a> 是 <a href="https://www.hashicorp.com/">Hashicorp</a>(没错，就是 Terraform、Vault 的那家公司。) 公司推出的开源的轻量级自动化打包镜像工具。它允许你通过一套模板代码同时为多个平台构建相同的镜像, 其工作模式也是 Infrastructure as Code 的一种体现。 本文以 AWS 上的 AMI 为例，初始化一个用做 Jenkins node 的基础镜像。 <span id="more"></span>   </p>
<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>　　使用 Packer 创建一个 AMI，该 AMI 需要以官方 Ubuntu LTS20.04 为底包，预安装一些必要的软件包，并做一些初始化操作（如修改SSH端口等）。</p>
<h3 id="安装-Packer"><a href="#安装-Packer" class="headerlink" title="安装 Packer"></a>安装 Packer</h3><p>　　推荐使用 <code>asdf</code> 管理多版本运行环境。 更多请参考： <a href="https://www.iots.vip/post/asdf-multi-version-terraform.html">asdf管理多版本Terraform|Alliot’s blog</a><br>在前文的基础下，只需要执行：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出可用packer版本</span>  </span><br><span class="line">asdf list-all packer  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装指定版本</span></span><br><span class="line">asdf install packer 1.9.2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置全局版本, 该参数会在当前用户HOME下生成 .tool-version 文档来标识版本</span>  </span><br><span class="line">asdf global packer 1.9.2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果只是为了在某路径下使用特定版本，可以通过<span class="built_in">local</span>参数来指定，该参数会在当前目录下生成 .tool-version</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">asdf <span class="built_in">local</span> packer 1.9.2</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果项目下已有 .tool-version，可以直接执行 asdf install来自动安装指定版本的工具</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果只是为了当前shell下临时切换，可以通过shell参数来指定</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">asdf shell packer 1.9.2</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前版本（可能需要你重新登录终端生效）</span>  </span><br><span class="line">asdf current  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载asdf指定的packer版本  (区别于remove，uninstall仅仅是去掉环境变量，让你可以用其他途径安装的packer)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">asdf uninstall packer</span></span><br></pre></td></tr></table></figure>

<h3 id="创建镜像配置"><a href="#创建镜像配置" class="headerlink" title="创建镜像配置"></a>创建镜像配置</h3><p>main.pkr.hcl:  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">packer &#123;</span><br><span class="line">  required_plugins &#123;</span><br><span class="line">    amazon = &#123;</span><br><span class="line">      version = &quot;&gt;= 0.0.2&quot;</span><br><span class="line">      source  = &quot;github.com/hashicorp/amazon&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 以下可以通过官方示例文档https://developer.hashicorp.com/packer/plugins/builders/amazon/ebs#owners 获得更多信息  </span><br><span class="line"></span><br><span class="line"># 定义EBS磁盘 </span><br><span class="line">source &quot;amazon-ebs&quot; &quot;ubuntu&quot; &#123;</span><br><span class="line">  ami_name      = &quot;jenkins-ec2-slave&quot;</span><br><span class="line">  instance_type = &quot;t3.micro&quot;</span><br><span class="line">  region        = &quot;ap-southeast-1&quot;</span><br><span class="line">  source_ami_filter &#123;</span><br><span class="line">    filters = &#123;</span><br><span class="line">      name                = &quot;ubuntu/images/*ubuntu-focal-20.04-amd64-server-*&quot;</span><br><span class="line">      root-device-type    = &quot;ebs&quot;</span><br><span class="line">      virtualization-type = &quot;hvm&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    most_recent = true</span><br><span class="line">    owners      = [&quot;099720109477&quot;]  # </span><br><span class="line">  &#125;</span><br><span class="line">  ssh_username = &quot;ubuntu&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 构建阶段预处理  </span><br><span class="line">build &#123;</span><br><span class="line">  name = &quot;jenkins-ec2-slave&quot;</span><br><span class="line">  sources = [</span><br><span class="line">    &quot;source.amazon-ebs.ubuntu&quot;</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">	provisioner &quot;shell&quot; &#123;</span><br><span class="line">		script = &quot;./init.sh&quot;</span><br><span class="line"></span><br><span class="line">        # 使用sudo执行 init.sh 脚本</span><br><span class="line">		execute_command = &quot;sudo -S sh -c &#x27;&#123;&#123; .Vars &#125;&#125; &#123;&#123; .Path &#125;&#125;&#x27;&quot;</span><br><span class="line"></span><br><span class="line">		start_retry_timeout = &quot;5m&quot;</span><br><span class="line">		skip_clean = true</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对应前文，在构建阶段执行一个系统初始化脚本，用来提供给 Packer 对镜像做预处理。<br>在同路径下创建:  <code>init.sh</code>， 内容如下：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line">set -o errexit</span><br><span class="line">set -o pipefail</span><br><span class="line">set -o xtrace</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">等待服务完全启动</span></span><br><span class="line">sleep 10</span><br><span class="line">cat /etc/apt/sources.list</span><br><span class="line">apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get install software-properties-common</span><br><span class="line">sudo apt-add-repository universe</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取消交互模式, 非交互模式会选择默认的选项并以最快的速度完成构建，Debian系尽量指定一下这个变量， apt安装包时静默。</span></span><br><span class="line">export DEBIAN_FRONTEND=noninteractive</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加nodejs 18仓库，后面安装 nodejs 的时候要用，不需要可以去掉</span></span><br><span class="line">curl -fsSL https://deb.nodesource.com/setup_18.x | bash - </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Install OpenSSH</span></span><br><span class="line">apt-get install -y --no-install-recommends openssh-server </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">根据需求增减需要安装的软件包</span></span><br><span class="line">apt-get install -y ubuntu-standard \</span><br><span class="line">	cloud-init \</span><br><span class="line">	ubuntu-server \</span><br><span class="line">	acpid \</span><br><span class="line">	ec2-hibinit-agent \</span><br><span class="line">	ec2-instance-connect \</span><br><span class="line">	hibagent \</span><br><span class="line">	krb5-locales \</span><br><span class="line">	ncurses-term \</span><br><span class="line">	ssh-import-id \</span><br><span class="line">	xauth dialog \</span><br><span class="line">	bash \</span><br><span class="line">	curl \</span><br><span class="line">	git \</span><br><span class="line">	unzip \</span><br><span class="line">	rsync \</span><br><span class="line">	ssh \</span><br><span class="line">	vim \</span><br><span class="line">	openjdk-11-jdk-headless \</span><br><span class="line">	maven \</span><br><span class="line">	nodejs</span><br><span class="line"></span><br><span class="line">apt-get clean</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果你还需要做一些ssh端口更改等操作，可以参考如下:</span> </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sudo sed -i <span class="string">&#x27;/^PasswordAuthentication/s/yes/no/g&#x27;</span> /etc/ssh/sshd_config</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sudo sed -i <span class="string">&#x27;/^PermitRootLogin/s/without-password/no/g&#x27;</span> /etc/ssh/sshd_config</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sudo <span class="built_in">echo</span> <span class="string">&quot;Port 1234&quot;</span>  &gt;&gt; /etc/ssh/sshd_config</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sudo <span class="built_in">echo</span> <span class="string">&quot;ClientAliveInterval 300&quot;</span> &gt;&gt; /etc/ssh/sshd_config</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sudo <span class="built_in">echo</span> <span class="string">&quot;ClientAliveCountMax 3&quot;</span> &gt;&gt; /etc/ssh/sshd_config</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sudo <span class="built_in">echo</span> <span class="string">&quot;PubkeyAcceptedKeyTypes=+ssh-rsa&quot;</span> &gt;&gt; /etc/ssh/sshd_config</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sudo /etc/init.d/ssh restart</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>IaC</tag>
        <tag>AWS</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Atlantis自动化你的Terraform Pull Request</title>
    <url>//post/atlantis-terraform-pull-request-automation.html</url>
    <content><![CDATA[<p>　　<a href="https://www.runatlantis.io/">Atlantis</a> 是一个 Terraform Pull Request 流程自动化工具。本文将带你搭建 Atlantis 并体验其协作模式。<span id="more"></span>  </p>
<h3 id="为什么需要它？"><a href="#为什么需要它？" class="headerlink" title="为什么需要它？"></a>为什么需要它？</h3><p>　　Terraform 已经成为了基础设施即代码（IaC）的主要工具，它让资源的配置变得非常快速且简单。在使用 Terraform 去对基础设施做变更的时候，需要通过 <code>terraform plan</code> 来验证变更，经过 review 过后再运行 <code>terraform apply</code> 来应用变更。这个过程对于个人或者微小团队间或许能够非常方便快捷，但是当在一定规模的团队需要协作的时候，管理所有变更与 PR 便会非常麻烦。<br>　　在这个过程中，你可能会面临如下的困难：  </p>
<ol>
<li>权限管控： Terraform 在 <code>plan</code> 与 <code>apply</code> 阶段，不仅仅需要 state backend 的权限，还需要有 cloud provider 的部分权限（取决于变更动作，如创建、修改或删除一个 EC2），给每个人都分配这些权限显然不现实。   </li>
<li>PR 变更 review： 每个 PR 你可能都需要附上当前变更执行 <code>terraform plan</code> 后的日志，已便管理员来审批并应用变更。  </li>
<li>不同的 DevOps 人员可能使用了不同的 Terraform 版本（尽管你可以提前好约定工具链版本），由于版本差异，在执行变更操作的过程中可能遇到一些奇奇怪怪的问题等。</li>
</ol>
<p>　　以上如果能够有一个统一的服务去管控整个 Terraform 流程，那这些问题便迎刃而解了。<br>而 <a href="https://www.runatlantis.io/">Atlantis</a> 就是做这个事情的。它能够在一个 Pull Request 创建的时候，自动执行 <code>terraform plan</code> 并将其 log 附加到 PR 中，管理员经过 review 确认变更后，通过评论来对其发送指令，Atlantis 接受到指令后，便会执行 <code>terraform apply</code> 来应用变更。 团队协作过程中，仅仅需要修改代码，所有 <code>plan</code>与 <code>apply</code> 操作均由 Atlantis 来完成，权限也进行了最大程度的收敛。<br>　　下图是整个流程的简要示意：<br><img data-src="https://static.iots.vip/atlantis-terraform-github-workflow-1.png" alt="atlantis-terraform-github-workflow">  </p>
<h3 id="测试体验"><a href="#测试体验" class="headerlink" title="测试体验"></a>测试体验</h3><p>　　讲了那么多，我们先来体验一下整个流程吧。 <a href="https://www.runatlantis.io/">Atlantis</a> 提供了 testdrive 的参数来让你体验整个 workflow。<br>　　首先通过官方仓库的 release 来下载 Atlantis: <a href="https://github.com/runatlantis/atlantis/releases">https://github.com/runatlantis/atlantis/releases</a><br>　　解压并赋予执行权限后：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./atlantis testdrive</span><br></pre></td></tr></table></figure>
<p>　　根据提示，输入你的 GitHub 用户名回车，会提示你创建一个名为 “atlantis” 的GitHub token（需要给予仓库权限），粘贴 token 并确认后，将会 fork 示例仓库，并通过 “ngork” 映射服务到公网以供 GitHub webhook 调用， 此时，控制台将返回一个 PR 链接，通过浏览器打开这个 PR，PR 的内容为创建了一个空资源：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">resource &quot;null_resource&quot; &quot;example&quot; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>　　我们给这个 PR 评论一个 “atlantis plan”，Atlantis 便会在后台自动完成 <code>terraform plan</code>， 并将输出格式化输出到 PR 下的评论区：  </p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Terraform used <span class="keyword">the</span> selected providers <span class="keyword">to</span> generate <span class="keyword">the</span> following execution</span><br><span class="line">plan. Resource actions are indicated <span class="keyword">with</span> <span class="keyword">the</span> following symbols:</span><br><span class="line">+ create</span><br><span class="line"></span><br><span class="line">Terraform will perform <span class="keyword">the</span> following actions:</span><br><span class="line"></span><br><span class="line">  <span class="comment"># null_resource.example will be created</span></span><br><span class="line">+ resource <span class="string">&quot;null_resource&quot;</span> <span class="string">&quot;example&quot;</span> &#123;</span><br><span class="line">      + <span class="built_in">id</span> = (known <span class="keyword">after</span> apply)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">Plan: <span class="number">1</span> <span class="keyword">to</span> add, <span class="number">0</span> <span class="keyword">to</span> change, <span class="number">0</span> <span class="keyword">to</span> destroy.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>　　我们预览无误后，再次评论 “atlantis apply”，Atlantis 便会在后台执行 “terraform apply” 并将返回格式化输出到评论区：  </p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">null_resource</span>.example: Creating...</span><br><span class="line"><span class="attribute">null_resource</span>.example: Creation complete after <span class="number">0</span>s<span class="meta"> [id=5251230807]</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">Apply</span> complete! Resources: <span class="number">1</span> added, <span class="number">0</span> changed, <span class="number">0</span> destroyed.</span><br></pre></td></tr></table></figure>
<p>之后我们便可以对这个 PR 进行 merge。  </p>
<h3 id="生产部署"><a href="#生产部署" class="headerlink" title="生产部署"></a>生产部署</h3><p>　　Atlantis 支持 Kubernetes、Docker、虚拟机等多种方式部署，本文以虚拟机部署为例（其他方式部署官方文档已经非常详尽并提供了 <code>helm</code> 包或 <code>kustomize</code> 等编排文件，就不做翻译家了）。  </p>
<h4 id="前置环境要求"><a href="#前置环境要求" class="headerlink" title="前置环境要求"></a>前置环境要求</h4><ul>
<li>网络： 部署的服务器需要有公网入口供 GitHub webhook 调用。    </li>
<li>Terraform： 建议通过 <a href="/post/asdf-multi-version-terraform.html">asdf管理多版本Terraform</a> 来安装 Terraform。  </li>
<li>创建webhook密钥： 这个随意，非弱口令即可，可以通过这个在线工具生成： <a href="https://www.browserling.com/tools/random-string">https://www.browserling.com/tools/random-string</a>  </li>
<li>Github token： <a href="https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/#creating-a-token">https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/#creating-a-token</a></li>
</ul>
<h5 id="配置provider凭证"><a href="#配置provider凭证" class="headerlink" title="配置provider凭证"></a>配置provider凭证</h5><p>　　非本文重点，略过， Alliot 这里是用的 AWS，则直接使用 <code>aws cli</code> 进行配置， 阿里云、GCP 等根据其文档配置 access key 等凭证信息即可 。  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">aws configure # 根据交互提示配置即可  </span><br></pre></td></tr></table></figure>

<h5 id="部署Atlantis服务"><a href="#部署Atlantis服务" class="headerlink" title="部署Atlantis服务"></a>部署Atlantis服务</h5><p>　　注： 本文将所有文件丢在 <code>/home/atlantis</code> 路径下，因此所有操作均在该路径下操作，如果需要更换其他路径，别忘了替换下文配置文件中对应的路径。<br>　　创建 Atlantis 配置文件 <code>config.yml</code>:  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Atlantis地址  </span></span><br><span class="line"><span class="attr">atlantis-url:</span> <span class="string">https://www.iots.vip:4141</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置启用的仓库白名单  </span></span><br><span class="line"><span class="attr">repo-allowlist:</span> <span class="string">github.com/xxx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># GitHub用户名 </span></span><br><span class="line"><span class="attr">gh-user:</span> <span class="string">alliot&#x27;s</span> <span class="string">blog</span>    </span><br><span class="line"></span><br><span class="line"><span class="comment"># GitHub token</span></span><br><span class="line"><span class="attr">gh-token:</span> <span class="string">xxxxx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># GitHub webhook 密钥 </span></span><br><span class="line"><span class="attr">gh-webhook-secret:</span> <span class="string">xxxx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SSL 证书</span></span><br><span class="line"><span class="attr">ssl-cert-file:</span> <span class="string">/nginx/cert/server.crt</span></span><br><span class="line"><span class="attr">ssl-key-file:</span> <span class="string">/nginx/cert/server.key</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># web控制台鉴权</span></span><br><span class="line"><span class="attr">web-basic-auth:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">web-username:</span> <span class="string">alliot</span> </span><br><span class="line"><span class="attr">web-password:</span> <span class="string">alliot&#x27;blog_www.iots.vip</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 端口</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">4141</span></span><br><span class="line"><span class="comment"># 默认 terraform 版本</span></span><br><span class="line"><span class="attr">default-tf-version:</span> <span class="number">1.2</span><span class="number">.1</span></span><br></pre></td></tr></table></figure>

<p>　　由于后面会用 <code>systemd</code> 来托管，所以采用 <code>rsyslog</code> 来捕捉日志：   <code>vim /etc/rsyslog.d/atlantis.conf</code>:  </p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">if $programname == &#x27;atlantis&#x27; then /home/atlantis/atlantis.<span class="built_in">log</span></span><br><span class="line"><span class="meta">&amp; stop</span></span><br></pre></td></tr></table></figure>
<p>　　编写 <code>systemd</code> 服务文件 <code>vim /usr/lib/systemd/system/atlantis.service</code>:  </p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=atlantis server</span><br><span class="line"><span class="attr">After</span>=network-<span class="literal">on</span>line.target</span><br><span class="line"><span class="attr">Wants</span>=network-<span class="literal">on</span>line.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">User</span>=root</span><br><span class="line"><span class="attr">Group</span>=root</span><br><span class="line"></span><br><span class="line"><span class="attr">Type</span>=simple</span><br><span class="line"><span class="attr">Environment</span>=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">ExecStart</span>=/home/atlantis/atlantis server --config config.yml</span><br><span class="line"><span class="attr">WorkingDirectory</span>=/home/atlantis		</span><br><span class="line"></span><br><span class="line"><span class="attr">Restart</span>=always</span><br><span class="line"><span class="attr">RestartSec</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">StartLimitInterval</span>=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">StandardOutput</span>=syslog</span><br><span class="line"><span class="attr">StandardError</span>=syslog</span><br><span class="line"><span class="attr">SyslogIdentifier</span>=atlantis</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure>
<p>　　配置 logrotate 日志轮转：  <code>vim /etc/logrotate.d/atlantis</code>:  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/home/atlantis/*.<span class="built_in">log</span> &#123;</span><br><span class="line">	daily</span><br><span class="line">	</span><br><span class="line">	<span class="comment">#保留 7天</span></span><br><span class="line">	rotate 7</span><br><span class="line">	</span><br><span class="line">	<span class="comment"># 压缩</span></span><br><span class="line">	compress</span><br><span class="line">	</span><br><span class="line">	<span class="comment">#如果日志文件不存在，不报错</span></span><br><span class="line">    missingok</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#用日期来做轮转之后的文件的后缀名</span></span><br><span class="line">	dateext</span><br><span class="line"></span><br><span class="line">	delaycompress</span><br><span class="line">	create 0640 syslog adm</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置完成后我们先在命令行直接运行一下，看看是否正常： </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/home/atlantis/atlantis server --config config.yml</span><br></pre></td></tr></table></figure>
<p>之后重载 <code>systemd</code>，重启 <code>rsyslog</code> 服务，并启动 Atlantis：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload      </span><br><span class="line">systemctl restart rsyslogd      # 重启 rsyslogd 让配置生效</span><br><span class="line">systemctl enable --now atlantis # 启动 Atlantis 并配置开启自启</span><br></pre></td></tr></table></figure>
<p>通过浏览器能够访问前面配置的 atlantis-url，如 <a href="https://www.iots.vip,即可./">https://www.iots.vip，即可。</a>  </p>
<h5 id="配置仓库webhook"><a href="#配置仓库webhook" class="headerlink" title="配置仓库webhook"></a>配置仓库webhook</h5><p>　　打开需要配置 Atlantis 的仓库，Setting -&gt; Webhooks -&gt; Add webhook 添加 Webhook：<br>Payload URL： Atlantis 地址&#x2F;events，如 <a href="https://www.iots.vip/events">https://www.iots.vip/events</a> （&#x2F;events很重要，不要遗漏）  </p>
<p>Content type： application&#x2F;json  </p>
<p>Secret： 前面提到的 webhook 密钥  </p>
<p>Which events would you like to trigger this webhook? 选择 “Let me select individual events.”<br>勾选： “Issue comments”, “Pull requests”, “Pull request reviews”, “Pushes” 保存即可。 </p>
<p>之后测试提交一个 PR 即可见效果。  </p>
<h5 id="通过配置文件来定义-Atlantis-行为"><a href="#通过配置文件来定义-Atlantis-行为" class="headerlink" title="通过配置文件来定义 Atlantis 行为"></a>通过配置文件来定义 Atlantis 行为</h5><p>　　默认情况下，Atlantis 会监控仓库内所有代码路径的变更，有时候我们并非每个路径下的都需要执行 <code>terraform paln</code> 或 <code>terraform apply</code>，这个时候我们可以通过在仓库根路径下创建 <code>atlantis.yaml</code> 来配置 Atlantis 行为。<br><code>atlantis.yaml</code> 示例：  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="attr">delete_source_branch_on_merge:</span> <span class="literal">true</span>  <span class="comment"># merge后自动删除分支</span></span><br><span class="line"><span class="attr">projects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">terraform-aws-sg</span>             <span class="comment"># 项目名，这个可自定义，仅用来区分项目</span></span><br><span class="line">  <span class="attr">dir:</span> <span class="string">aws/sg</span>                        <span class="comment"># 仅 aws/sg 路径下的 terraform 会执行terraform plan </span></span><br><span class="line">  <span class="attr">terraform_version:</span> <span class="string">v1.2.1</span>          <span class="comment"># 指定该project的terraform版本</span></span><br><span class="line">  <span class="attr">autoplan:</span>                          <span class="comment"># 开启自动plan</span></span><br><span class="line">    <span class="attr">when_modified:</span> [<span class="string">&quot;*.tf&quot;</span>, <span class="string">&quot;../modules/**/*.tf&quot;</span>] <span class="comment"># 监控这些后缀文件的变更来决定是否plan  </span></span><br></pre></td></tr></table></figure>
<p>更多参数配置请查看官方文档：  <a href="https://www.runatlantis.io/docs/configuring-atlantis.html">https://www.runatlantis.io/docs/configuring-atlantis.html</a>  </p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>　　Atlantis 是一个看起来比较简单的工具，但它的魅力不仅如此，通过 Pre Workflow 或 Post Workflow 等钩子，能够组合其他工具链极大的提升 DevOps 效率，有机会 Alliot 后面还会继续与大家分享学习它的其他妙用。  </p>
]]></content>
      <tags>
        <tag>IaC</tag>
        <tag>Terraform</tag>
      </tags>
  </entry>
  <entry>
    <title>使用PyInstaller 将python程序 .py转为 .exe</title>
    <url>//post/python-pyinstaller.html</url>
    <content><![CDATA[<p>最近经常用到一个.py程序，但是每次在不同电脑上用，希望能把Python脚本发布为脱离Python平台运行的可执行程序，比如单个exe。PyInstalle满足要求。<span id="more"></span><br>PyInstaller本身并不属于Python包。在安装 pyinstaller之前需把python环境配置好。  </p>
<h2 id="安装pyinstaller"><a href="#安装pyinstaller" class="headerlink" title="安装pyinstaller"></a>安装pyinstaller</h2><h3 id="下载pyinstaller"><a href="#下载pyinstaller" class="headerlink" title="下载pyinstaller"></a>下载pyinstaller</h3><p>解压到F:\PyInstaller-2.1（自选）项目地址: <a href="https://github.com/pyinstaller/pyinstaller/releases">PyInstaller</a>  </p>
<h3 id="安装pywin32"><a href="#安装pywin32" class="headerlink" title="安装pywin32"></a>安装pywin32</h3><p> pywin32-217.win32-py2.7.exe：<a href="https://github.com/mhammond/pywin32/releases">点击下载</a>  </p>
<h3 id="安装pyinstaller-1"><a href="#安装pyinstaller-1" class="headerlink" title="安装pyinstaller"></a>安装pyinstaller</h3><p>　　1、进入cmd  </p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> F:\PyInstaller-<span class="number">2</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">python pyinstaller.py --console --onefile  test.py</span><br></pre></td></tr></table></figure>
<p>如果提示：  </p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">Usage: <span class="keyword">python</span> pyinstaller.<span class="keyword">py</span> [opts] <span class="symbol">&lt;scriptname&gt;</span> [ <span class="symbol">&lt;scriptname&gt;</span> ...] | <span class="symbol">&lt;specfile&gt;</span>   </span><br><span class="line">pyinstaller.<span class="keyword">py</span>: error: Requires at least one scriptname <span class="keyword">file</span> <span class="built_in">or</span> exactly one .spec-<span class="keyword">file</span>  </span><br></pre></td></tr></table></figure>

<p>则说明安装完成了。  </p>
<h2 id="测试打包"><a href="#测试打包" class="headerlink" title="测试打包"></a>测试打包</h2><p>　　1、文件放在当前目录的pyinstaller-2.1文件夹里面  </p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> F:\PyInstaller-<span class="number">2</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">python pyinstaller.py --console --onefile  test.py</span><br></pre></td></tr></table></figure>
<p>　　2、命令运行成功后会生成一个test文件夹。在这个文件夹下面会有一个名为dist的文件夹，此文件夹下面有转换好的test.exe<br>　　3、上面编译出来的exe能够正常运行了，但带一个黑色的console，以下重新编译，加入–windowed –icon，取消–console  </p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">python pyinstaller.py  -w  --onefile --icon=&quot;my.ico&quot; test.py</span><br></pre></td></tr></table></figure>
<p>其中my.ico是你要给他加的自定义图标文件。</p>
<p><del>2023-10-25更新:</del>  </p>
<h2 id="使用-Github-Actions-打包-Python-可执行文件到多个平台下"><a href="#使用-Github-Actions-打包-Python-可执行文件到多个平台下" class="headerlink" title="使用 Github Actions 打包 Python 可执行文件到多个平台下"></a>使用 Github Actions 打包 Python 可执行文件到多个平台下</h2><p>Github Actions pipeline 参考:<br><code>.github/workflows/build.yaml</code>: </p>
<figure class="highlight nestedtext"><table><tr><td class="code"><pre><span class="line"><span class="attribute">name</span><span class="punctuation">:</span> <span class="string">CI</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Controls when the workflow will run</span></span><br><span class="line"><span class="attribute">on</span><span class="punctuation">:</span></span><br><span class="line">  <span class="comment"># Triggers the workflow on push or pull request events but only for the &quot;main&quot; branch</span></span><br><span class="line">  <span class="attribute">push</span><span class="punctuation">:</span></span><br><span class="line">    <span class="attribute">branches</span><span class="punctuation">:</span> <span class="string">[ &quot;master&quot; ]</span></span><br><span class="line">    <span class="attribute">paths-ignore</span><span class="punctuation">:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;**.md&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;LICENSE&#x27;</span></span><br><span class="line">  <span class="attribute">pull_request</span><span class="punctuation">:</span></span><br><span class="line">    <span class="attribute">branches</span><span class="punctuation">:</span> <span class="string">[ &quot;master&quot; ]</span></span><br><span class="line">    <span class="attribute">paths-ignore</span><span class="punctuation">:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;**.md&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;LICENSE&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Allows you to run this workflow manually from the Actions tab</span></span><br><span class="line">  <span class="attribute">workflow_dispatch</span><span class="punctuation">:</span></span><br><span class="line"><span class="punctuation"></span></span><br><span class="line"><span class="attribute">jobs</span><span class="punctuation">:</span></span><br><span class="line">  <span class="attribute">CI</span><span class="punctuation">:</span></span><br><span class="line">    <span class="attribute">strategy</span><span class="punctuation">:</span></span><br><span class="line">      <span class="attribute">matrix</span><span class="punctuation">:</span></span><br><span class="line">        <span class="attribute">python-version</span><span class="punctuation">:</span> <span class="string">[ &quot;3.10&quot; ]</span></span><br><span class="line">        <span class="attribute">os-version</span><span class="punctuation">:</span> <span class="string">[ &quot;macos-latest&quot;, &quot;windows-latest&quot;, &quot;ubuntu-20.04&quot; ]</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">runs-on</span><span class="punctuation">:</span> <span class="string">$&#123;&#123; matrix.os-version &#125;&#125;</span></span><br><span class="line">    <span class="attribute">steps</span><span class="punctuation">:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">uses: actions/checkout@v3</span></span><br><span class="line">        <span class="attribute">with</span><span class="punctuation">:</span></span><br><span class="line">          <span class="attribute">submodules</span><span class="punctuation">:</span> <span class="string">recursive</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="string">uses: actions/setup-python@v4</span></span><br><span class="line">        <span class="attribute">with</span><span class="punctuation">:</span></span><br><span class="line">          <span class="attribute">python-version</span><span class="punctuation">:</span> <span class="string">$&#123;&#123; matrix.python-version &#125;&#125;</span></span><br><span class="line">          <span class="attribute">architecture</span><span class="punctuation">:</span> <span class="string">x64</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="string">name: Build</span></span><br><span class="line">        <span class="attribute">run</span><span class="punctuation">:</span> <span class="string">|</span></span><br><span class="line">          <span class="attribute">pip install -r requirements.txt</span></span><br><span class="line"><span class="attribute">          pip install pyinstaller</span></span><br><span class="line"><span class="attribute">          python -m PyInstaller -F -n jenkins-tools main.py </span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">      - name</span><span class="punctuation">:</span> <span class="string">upload</span></span><br><span class="line">        <span class="attribute">uses</span><span class="punctuation">:</span> <span class="string">actions/upload-artifact@v3</span></span><br><span class="line">        <span class="attribute">with</span><span class="punctuation">:</span></span><br><span class="line">          <span class="attribute">name</span><span class="punctuation">:</span> <span class="string">jenkins-tools-$&#123;&#123; matrix.os-version &#125;&#125;</span></span><br><span class="line">          <span class="attribute">path</span><span class="punctuation">:</span> <span class="string">dist</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>折腾</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>使用hexo+CI构建wiki知识管理系统</title>
    <url>//post/hexo-ci-wiki.html</url>
    <content><![CDATA[<p>　　使用 hexo+CI 快速构建一个 wiki 在线知识管理系统。<span id="more"></span></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>　　管理知识需要系统化，而不是像吸收知识时的碎片化。我对于知识管理的有如下要求:  </p>
<ul>
<li>多终端支持  </li>
<li>Markdown 写作  </li>
<li>目录树清晰 </li>
<li>检索快  </li>
<li>方便迁移  </li>
<li>最重要的是，数据在自己手上。</li>
</ul>
<p>　　之前用过有道云、印象笔记等云端笔记，不是空间不够就是广告多，想要迁移也是个问题，尝试过使用 mybase 本地文档管理，虽然有优秀的检索速度与目录树模式，但是不支持 Markdown，并且跨终端支持也是硬伤，发现了一个不错的 hexo 主题 <a href="https://github.com/zthxxx/hexo-theme-Wikitten">wikitten</a>，因此打算使用 hexo 来搭建一个在线 wiki。优点很明显，全静态，没有数据库，迁移的时候，就跟拷片一样方便，自带的 localSearch 检索速度超快。</p>
<p>效果: <a href="https://wiki.iots.vip/">Alliot’s Wiki</a><br>pages 仓库: <a href="https://github.com/AlliotTech/hexo-wiki-pages">https://github.com/AlliotTech/hexo-wiki-pages</a>   </p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>　　所需环境同 <a href="/post/hexo-build-to-optimize.html#%E5%AE%89%E8%A3%85-%E4%BB%A5windows%E4%B8%AD%E4%B8%BA%E4%BE%8B">hexo的搭建、设置与部分优化</a> 安装 Git、node.js、hexo 即可，不作过多赘述。需要知道 hexo 的基本使用，才可以继续。推荐  <a href="/post/hexo-build-to-optimize.html#%E5%AE%89%E8%A3%85-%E4%BB%A5windows%E4%B8%AD%E4%B8%BA%E4%BE%8B">hexo的搭建、设置与部分优化</a> 或者是 hexo.io 官方文档。<br>完成后，进入到 &#x2F;themes 目录下，右键 <code>git bash here</code> 执行:  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">克隆主题</span></span><br><span class="line">git clone git@github.com:AlliotTech/hexo-theme-Wikitten.git themes/Wikitten  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将站点目录的一些默认模板覆盖</span> </span><br><span class="line">mv themes/hexo-theme-Wikitten/ themes/Wikitten</span><br><span class="line">cp -rf themes/Wikitten/_source/* source/ </span><br><span class="line">cp -rf themes/Wikitten/_scaffolds/* scaffolds/</span><br></pre></td></tr></table></figure>

<h3 id="Git-pages"><a href="#Git-pages" class="headerlink" title="Git pages"></a>Git pages</h3><p>　　很多用 hexo 的朋友都选择使用两个分支来分别存放站点的 source 与 public，然后 public 的分支用来构建 gitpages。由于 GitHub 已经有免费的私有仓库了，我这里是将 source 与 public 分开各开一个 repository，source 仓库为私有。我在 GitHub 新建了两个仓库分别为: wiki-source(私有)、hexo-wiki-pages(公有)。在 hexo-wiki-pages 仓库的设置里打开 gitpages。<br>　　将 themes&#x2F;Wikitten&#x2F;hexo&#x2F; 下的所有文件复制到 hexo 的目录下。</p>
<ul>
<li>修改 hexo 目录下的 <code>_config.yml</code> 中的站点信息、域名以及末尾 deploy 字段的 repository 地址为你的 hexo-wiki-pages 公开仓库的 ssh 地址，如我的为：  <a href="mailto:&#x67;&#105;&#x74;&#x40;&#x67;&#105;&#x74;&#104;&#117;&#x62;&#x2e;&#x63;&#111;&#109;">&#x67;&#105;&#x74;&#x40;&#x67;&#105;&#x74;&#104;&#117;&#x62;&#x2e;&#x63;&#111;&#109;</a>:AlliotTech&#x2F;hexo-wiki-pages  </li>
<li>修改 <code>.travis.yml</code> branch 字段指定你要构建的分支，如我的 wiki-source 仓库需要构建的分支为: master   </li>
<li>修改 <code>travis_env_init.sh</code> 中 git 的配置信息（用户名与邮箱）。<br>之后就可以通过 <code>hexo s</code> 打开 <code>localhost:4000</code> 本地访问测试一下，成功则将 hexo 目录 push 到你的 source 仓库。</li>
</ul>
<h3 id="仓库加入到CI"><a href="#仓库加入到CI" class="headerlink" title="仓库加入到CI"></a>仓库加入到CI</h3><p>　　CI 其实不是什么高级的东西，只是在检测到你指定的 Git repository 有 <code>commit</code> 操作后，自动在云端创建一个临时容器环境，运行你 <code>.travis.yml</code> 中指定的命令，完成之后自动删除。<br>使用 Travis-CI 对 wiki-source 仓库执行 <code>hexo d</code> 部署到 hexo-wiki-pages 公有仓库的 gitpages，这样就做到了只公开了站点的静态文件而源文件不公开。<br>　　值得注意的是，<a href="https://travis-ci.org/">https://travis-ci.org</a> 是不支持私有仓库的，<a href="https://travis-ci.com/">https://travis-ci.com</a> 才支持选择私有仓库，登录后者，使用 GitHub 账号授权登录后，点击左边仓库标题 My Repositories 旁边的加号，选择 wiki-source 仓库，将其加入到 Travis-CI 中，在 <code>more options</code> 的 <code>setting</code> 中将 “Build pushed branches” 与 “Build pushed pull requests” 勾选即可，在底部的 SSH Key 中填入你 GitHub 的 ssh key，以便 CI 能对仓库进行操作。关于生成 SSH Key 可见 <a href="https://help.github.com/cn/articles/adding-a-new-ssh-key-to-your-github-account">GitHub 官方</a>  </p>
<h3 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h3><p>　　之后只需要使用 <code>git push -u origin master</code> 提交到 wiki-source 仓库，Travis-CI 就会在云端帮你自动执行 <code>hexo d</code> 的操作了。从此，本地不再需要 <code>hexo d</code>，写作只需要写完文章了 <code>push</code> 一下就能通过 gitpages 看到效果。<br>　　<br><del>2020年3月23日 更新：</del><br>　　由于 Travis-CI 有免费次数限制，新增：  <a href="/post/hexo-coding-ci-scp-server.html">hexo使用coding CI部署静态文件到服务器</a></p>
]]></content>
      <tags>
        <tag>折腾</tag>
        <tag>hexo</tag>
        <tag>CI</tag>
      </tags>
  </entry>
  <entry>
    <title>刷机成真砖成功救回的经历</title>
    <url>//post/shuaji-save.html</url>
    <content><![CDATA[<h3 id="刷机成真砖成功救回的经历"><a href="#刷机成真砖成功救回的经历" class="headerlink" title="刷机成真砖成功救回的经历"></a>刷机成真砖成功救回的经历</h3><blockquote>
<p>型号: vivo x3t （电池不可拆卸一体机）</p>
</blockquote>
<blockquote>
<p>cpu:联发科 MT6589T  </p>
</blockquote>
<blockquote>
<p>电脑系统:win 7 x64  </p>
</blockquote>
<p>由于手机太老（low），用了一阵子就会很卡，加上自己喜欢折腾，所以每个月总有那么几天要刷刷机。但是这次翻车了，折腾了近一整天，这里将这次经历记录一下，希望可以给需要的朋友们一点帮助。写的比较乱，见谅。<span id="more"></span>  </p>
<hr>
<p>上次刷的那个官方的线刷包刷完且在手机内升级到官方的最新版本后，死活也root不了。 于是趁这次机会继续线刷一波。<br>　　没想到这次线刷到一半悲剧发生了——笔记本蓝屏了。（笔者之前一直都是此本线刷，一直没出现过问题）。由于之前有线刷变死砖的经历，果断拆机将电源排线拔下后再装上后重新线刷，但是这次没上次旧砖那么顺利。MTK的FLASH TOOLS由于是在跑黄条的时候电脑蓝屏，估计手机的分区表之类的全出问题了。（这里补充一下线刷与卡刷的区别：）</p>
<blockquote>
<p>卡刷简单来说就是替换文件的过程（或者说是覆盖的过程：有则替换，无则添加）。它不会将分区表重新建立。安卓中通常通过recovery将.zip后缀的ROM包刷入。  </p>
</blockquote>
<blockquote>
<p>线刷则会重新将分区表刷新、重建。替换整个系统，包括recovery！</p>
</blockquote>
<p>具体线刷、卡刷的优缺点与区别可自行在网上搜索一下。</p>
<hr>
<p>由上面不难看出，此时的手机应该是彻底成砖了的，也不会有卡刷失败的那种卡死在开机logo的情况，而是一点反应都没有，recovery也无法进入。此时只有继续线刷或者是更换主板了。<br>  继续线刷，发现MTK FLSH TOOLS一直是各种报错：  </p>
<blockquote>
<p>can’t find COM port（这里基本是提示驱动问题，笔者是确认驱动装好了的，更换USB口可以解决） </p>
</blockquote>
<blockquote>
<p>各种数字系列报错通常分为驱动、线刷包与平台不符等几种情况，这些报错代码可自行搜索 “MTK 线刷报错代码”得到完整解释与解决办法。</p>
</blockquote>
<p>试过了各种方法过关斩将解决了一系列的数字代码报错（其中有一个报错是提示DROM FAIL 4032，这里需要一个破解了NAND检测的FLASH      TOOLS，会在文章后附上下载地址，在某海论坛以出售附件形式下载的。。），最后卡死在 “USB FULL SPEED”错误上。<br>这里比较尴尬，网上这类报错的解决方案太少，仅有的几种方案全部试过了，最后在早上想到换家里那台xp系统的台式试试，一试居然成功了（尽量用主板后的USB 2.0口，防止供电不足的情况）。FLASH TOOLS成功跑出了绿圈。</p>
<hr>
<h3 id="总结一下："><a href="#总结一下：" class="headerlink" title="总结一下："></a>总结一下：</h3><ul>
<li>遇到线刷时不出现红进度条的情况，在确认驱动与数据线没问题的情况下，检查手机是否开启了快速启动或是其他原因导致未完全关机的情况。在线刷异常导致变砖的时候，一体机需要拆机取下电源排线，同时长按电源键几秒钟放开待主板放电完全，插上排线，重新线刷。</li>
<li>出现线刷过程中突然中断报错的情况，一般是USB供电不足，尽量使用台式机的主板上插口。</li>
<li>目前的许多线刷还是在xp上出现问题的情况比较少，建议在xp上进行线刷，这样省去了解决驱动校验、兼容的麻烦。实在没有xp系统的电脑，在虚拟机中跑xp也是可行的（不要用ghost打包的系统，ghost通常精简了许多com口之类的配置文件，导致线刷过程中出现各种问题）</li>
<li>驱动解决不了或者嫌麻烦的话，市面上的许多刷机大师、精灵之类的软件会自动帮你装好，省去了解决签名校验之类的麻烦。</li>
</ul>
<h3 id="补充一下："><a href="#补充一下：" class="headerlink" title="补充一下："></a>补充一下：</h3><p>出现刷完后，无限重启的情况有可能是电池电量耗尽，试试在重启的时候按住音量上键，进入recovery模式，然后别动了，让它冲一会电，再开机。</p>
]]></content>
      <tags>
        <tag>折腾</tag>
      </tags>
  </entry>
  <entry>
    <title>入坑一只 Kindle</title>
    <url>//post/you-need-kindle.html</url>
    <content><![CDATA[<p>　　心血来潮，咸鱼入手了种草了很久的泡面伴侣 Kindle PaperWhite 3，总体来说体验很不错。<span id="more"></span></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>　　Kindle 更适合看那种不需要来回翻的纯文字的书，类似专业书籍等非常不推荐，对 PDF 支持也很差，所以，入坑前最好清楚一下自己的需求，有没有这个必要，否则，真的会是个泡面盖。   </p>
<h3 id="闲鱼"><a href="#闲鱼" class="headerlink" title="闲鱼"></a>闲鱼</h3><p>　　电子产品可能是闲鱼上最适合捡的东西了，尤其是像 Kindle 这种不是很看重性能与配置的。在我看来，目前最适合捡的版本就是 KPW 3 了，更低端更老的机型，一般都是屏幕的 PPi 不太够，而更新的 KPW 4、或是高端点的 Oasis 等，屏幕分辨率其实是与 KPW 3 一样，均为 300 PPi，但是价格却会贵上不少，所以说，可以，但…没必要。<br>　　Kindle 的产品更新迭代速度较其他电子产品慢，所以价格幅度一般也不会太大，KPW 4 推出后，闲鱼上 KPW 3 价格一般在 400 至 450 左右，性价比还是挺高的，总的来说，在闲鱼上捡 Kindle 需要注意的有以下几点：</p>
<ul>
<li>不要看那种专门卖的用户，最好选择个人用户，坑比较少  </li>
<li>注意分清是不是国行，是否越狱，能否登陆，是否在保，要问清楚，可以通过 Kindle 客服电话利用序列号询问保修等信息，越狱了的原版系统的话，个人觉得更好，可以更换屏保与安装插件，但是不推荐刷多看的</li>
</ul>
<p>　　Alliot 的是 420 面交的，卖家估计也是没看过几次，保护套什么的都很新，总体来说挺满意，上班挤地铁的路上能够少玩点手机多看几本书了。  </p>
<h3 id="部分资源"><a href="#部分资源" class="headerlink" title="部分资源"></a>部分资源</h3><h4 id="软件推荐"><a href="#软件推荐" class="headerlink" title="软件推荐"></a>软件推荐</h4><p>　　首推的是 calibre，图书管理、格式管理、书籍编辑、推送等功能，基本满足需求，其次，推荐用 KindleMate 来对看书时标注的笔记进行管理。<br>　　另外的，如果对 RSS 推送比较热衷且有优质 RSS 源的童鞋，可以尝试搭建一个 <a href="https://bookfere.com/post/19.html">KindleEar</a>。  </p>
<h4 id="网站推荐"><a href="#网站推荐" class="headerlink" title="网站推荐"></a>网站推荐</h4><p>　　<a href="http://bookfere.com/">书伴</a> 许多的技巧教程与资源。<br>　　<a href="https://my.clippings.io/#">Clipping</a> 管理标注的笔记，支持推送到印象笔记等。<br>其他的，还是那句话，可以… 但是没必要。Kindle 的主要优点还是因为它的功能单一，太多折腾就失去了它原本的意义。</p>
]]></content>
      <tags>
        <tag>硬件</tag>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Terraformer导出AWS上现有资源</title>
    <url>//post/terraformer-import-aws-resource.html</url>
    <content><![CDATA[<p>　　众所周知，通常情况下 Terraform 仅能编排通过它创建的资源， 那么怎样批量纳管现网非Terraform编排的资源呢？Terraformer 等工具就是来做这个事的。 <a href="https://github.com/GoogleCloudPlatform/terraformer">Terraformer</a> 是一个将现有的基础设施导出生成 Terraform file(.tf 以及 .tfstate) 的命令行工具，与 Terraform 刚好相反（Terraform: code -&gt; infra， Terraformer: infra -&gt; code）。 <span id="more"></span> </p>
<blockquote class="blockquote-center">
<p>注意： Terraformer 目前依旧存在许多问题，比如状态同步不一致、terraform版本支持不及时等，因此如要生产可用还需要做更多的测试评估。为避免对现网生产环境造成不可预估的后果，请在独立的测试环境账号下测试评估！</p>

</blockquote>

<h3 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h3><p>Terraform：   v1.2.1<br>Terraformer： v0.8.20<br>aws CLI : v2.5.8  </p>
<h3 id="配置AWS-profile"><a href="#配置AWS-profile" class="headerlink" title="配置AWS profile"></a>配置AWS profile</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">aws configure sso</span></span><br><span class="line"></span><br><span class="line">SSO start URL [None]: https://xxxxx.awsapps.com/start#/  # 这里输入SSO登录页地址</span><br><span class="line">SSO Region [None]: ap-southeast-1                  # 配置sso默认Region</span><br><span class="line">There are 8 AWS accounts available to you.         # 这里会让你选择要使用的sso账号，选定后回车即可  </span><br><span class="line">Using the account ID xxxxxx</span><br><span class="line">The only role available to you is: DveOps-Role    # 显示你拥有的role</span><br><span class="line">Using the role name &quot;DveOps-Role&quot;                 # 使用该role</span><br><span class="line">CLI default client Region [ap-southeast-1]:       # 配置默认Region</span><br><span class="line">CLI default output format [yaml]:                 # 输出格式，默认即可</span><br><span class="line">CLI profile name [DveOps-Role]: Alliot-DevOps     # 为profile创建别名 </span><br><span class="line"></span><br><span class="line">To use this profile, specify the profile name using --profile, as shown:</span><br><span class="line"></span><br><span class="line">aws s3 ls --profile Alliot-DevOps                 # 告诉你测试的方法 </span><br></pre></td></tr></table></figure>

<h3 id="初始化Terraform插件"><a href="#初始化Terraform插件" class="headerlink" title="初始化Terraform插件"></a>初始化Terraform插件</h3><p>　　根据<a href="https://learn.hashicorp.com/tutorials/terraform/aws-build?in=terraform/aws-get-started">官方文档</a> 需要初始化 AWS 插件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir aws_terraform</span><br><span class="line">cd !$</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编写provider配置</span></span><br><span class="line">cat &lt;&lt;EOF &gt;./main.tf</span><br><span class="line">terraform &#123;</span><br><span class="line">  required_providers &#123;</span><br><span class="line">    aws = &#123;</span><br><span class="line">      source  = &quot;hashicorp/aws&quot;</span><br><span class="line">      version = &quot;~&gt; 3.27&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  required_version = &quot;&gt;= 0.14.9&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">provider &quot;aws&quot; &#123;</span><br><span class="line">  profile = &quot;Alliot-DevOps&quot;</span><br><span class="line">  region  = &quot;ap-southeast-1&quot;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">terraform init  # 初始化</span><br></pre></td></tr></table></figure>
<p>　　初始化的过程中会去联网下载 aws Provider，成功后会返回类似如下的信息：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Initializing the backend...</span><br><span class="line"></span><br><span class="line">Initializing provider plugins...</span><br><span class="line">- Finding hashicorp/aws versions matching &quot;~&gt; 3.27&quot;...</span><br><span class="line">- Installing hashicorp/aws v3.75.1...</span><br><span class="line">- Installed hashicorp/aws v3.75.1 (signed by HashiCorp)</span><br><span class="line"></span><br><span class="line">Terraform has created a lock file .terraform.lock.hcl to record the provider</span><br><span class="line">selections it made above. Include this file in your version control repository</span><br><span class="line">so that Terraform can guarantee to make the same selections by default when</span><br><span class="line">you run &quot;terraform init&quot; in the future.</span><br><span class="line"></span><br><span class="line">Terraform has been successfully initialized!</span><br><span class="line"></span><br><span class="line">You may now begin working with Terraform. Try running &quot;terraform plan&quot; to see</span><br><span class="line">any changes that are required for your infrastructure. All Terraform commands</span><br><span class="line">should now work.</span><br><span class="line"></span><br><span class="line">If you ever set or change modules or backend configuration for Terraform,</span><br><span class="line">rerun this command to reinitialize your working directory. If you forget, other</span><br><span class="line">commands will detect it and remind you to do so if necessary.</span><br></pre></td></tr></table></figure>

<h3 id="导出资源"><a href="#导出资源" class="headerlink" title="导出资源"></a>导出资源</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">terraformer import aws --resources=vpc,subnet --profile Alliot-DevOps</span></span><br><span class="line"></span><br><span class="line">2022/05/06 17:24:36 aws importing default region</span><br><span class="line">2022/05/06 17:24:40 aws importing... vpc</span><br><span class="line">2022/05/06 17:24:41 aws done importing vpc</span><br><span class="line">2022/05/06 17:24:41 aws importing... subnet</span><br><span class="line">2022/05/06 17:24:41 aws done importing subnet</span><br><span class="line">2022/05/06 17:24:41 Number of resources for service vpc: 1</span><br><span class="line">2022/05/06 17:24:41 Number of resources for service subnet: 3</span><br><span class="line">2022/05/06 17:24:41 Refreshing state... aws_subnet.tfer--subnet-022fd4fb959d54a64</span><br><span class="line">2022/05/06 17:24:41 Refreshing state... aws_subnet.tfer--subnet-0508e858fa720baf6</span><br><span class="line">2022/05/06 17:24:41 Refreshing state... aws_subnet.tfer--subnet-0306845c89930a562</span><br><span class="line">2022/05/06 17:24:41 Refreshing state... aws_vpc.tfer--vpc-0bf213acc380519b2</span><br><span class="line">2022/05/06 17:24:43 Filtered number of resources for service vpc: 1</span><br><span class="line">2022/05/06 17:24:43 Filtered number of resources for service subnet: 3</span><br><span class="line">2022/05/06 17:24:43 aws Connecting....</span><br><span class="line">2022/05/06 17:24:43 aws save vpc</span><br><span class="line">2022/05/06 17:24:43 aws save tfstate for vpc</span><br><span class="line">2022/05/06 17:24:43 aws save subnet</span><br><span class="line">2022/05/06 17:24:43 aws save tfstate for subnet</span><br></pre></td></tr></table></figure>
<p>导出后的目录结构为：  </p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">|<span class="string">-- generated</span></span><br><span class="line"><span class="string"></span>|<span class="string">   `-- aws</span></span><br><span class="line"><span class="string"></span>|<span class="string">       </span>|<span class="string">-- subnet</span></span><br><span class="line"><span class="string"></span>|<span class="string">       </span>|<span class="string">   </span>|<span class="string">-- outputs.tf</span></span><br><span class="line"><span class="string"></span>|<span class="string">       </span>|<span class="string">   </span>|<span class="string">-- provider.tf</span></span><br><span class="line"><span class="string"></span>|<span class="string">       </span>|<span class="string">   </span>|<span class="string">-- subnet.tf</span></span><br><span class="line"><span class="string"></span>|<span class="string">       </span>|<span class="string">   </span>|<span class="string">-- terraform.tfstate</span></span><br><span class="line"><span class="string"></span>|<span class="string">       </span>|<span class="string">   `-- variables.tf</span></span><br><span class="line"><span class="string"></span>|<span class="string">       `-- vpc</span></span><br><span class="line"><span class="string"></span>|<span class="string">           </span>|<span class="string">-- outputs.tf</span></span><br><span class="line"><span class="string"></span>|<span class="string">           </span>|<span class="string">-- provider.tf</span></span><br><span class="line"><span class="string"></span>|<span class="string">           </span>|<span class="string">-- terraform.tfstate</span></span><br><span class="line"><span class="string"></span>|<span class="string">           `-- vpc.tf</span></span><br><span class="line"><span class="string">`-- main.tf</span></span><br></pre></td></tr></table></figure>
<p>　　我们进入 <code>./generated/aws/vpc</code> 路径下预览一下：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd generated/aws/vpc</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">需要先初始化</span> </span><br><span class="line">terraform init</span><br></pre></td></tr></table></figure>
<p>　　这个时候会出现如下报错：  </p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="comment"># terraform init</span></span><br><span class="line"></span><br><span class="line">Initializing <span class="keyword">the</span> backend...</span><br><span class="line">╷</span><br><span class="line">│ Error: Invalid legacy provider address</span><br><span class="line">│ </span><br><span class="line">│ This configuration <span class="keyword">or</span> its associated state refers <span class="built_in">to</span> <span class="keyword">the</span> unqualified provider <span class="string">&quot;aws&quot;</span>.</span><br><span class="line">│ </span><br><span class="line">│ You must complete <span class="keyword">the</span> Terraform <span class="number">0.13</span> upgrade <span class="built_in">process</span> <span class="keyword">before</span> upgrading <span class="built_in">to</span> later versions.</span><br><span class="line">╵</span><br></pre></td></tr></table></figure>
<p>通过 <a href="https://stackoverflow.com/questions/65396812/invalid-legacy-provider-address-error-on-terraform">“Invalid legacy provider address” error on Terraform - stackoverflow</a> 中找到解决办法：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">terraform state replace-provider -- -/aws hashicorp/aws</span><br></pre></td></tr></table></figure>
<p>输入 “yes” 完成 provider 的替换后重新初始化：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">terraform init</span><br></pre></td></tr></table></figure>
<p>初始化完成后，再执行 <code>terraform plan</code> 进行配置预览，这时候又出现：  </p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">terraform plan</span><br><span class="line">provider.aws.region</span><br><span class="line">  The region <span class="keyword">where</span> AWS operations will take place. Examples</span><br><span class="line">  are us-east<span class="number">-1</span>, us-west<span class="number">-2</span>, etc.</span><br><span class="line"></span><br><span class="line">  Enter a <span class="keyword">value</span>: ap-southeast<span class="number">-1</span></span><br><span class="line"></span><br><span class="line">╷</span><br><span class="line">│ Error: error configuring Terraform AWS Provider: <span class="keyword">no</span> <span class="keyword">valid</span> credential sources <span class="keyword">for</span> Terraform AWS Provider <span class="built_in">found</span>.</span><br><span class="line">│ </span><br><span class="line">│ Please see https://registry.terraform.io/providers/hashicorp/aws</span><br><span class="line">│ <span class="keyword">for</span> more information about providing credentials.</span><br><span class="line">│ </span><br><span class="line">│ Error: NoCredentialProviders: <span class="keyword">no</span> <span class="keyword">valid</span> providers <span class="keyword">in</span> chain</span><br><span class="line">│ caused <span class="keyword">by</span>: EnvAccessKeyNotFound: failed <span class="keyword">to</span> find credentials <span class="keyword">in</span> the environment.</span><br><span class="line">│ SharedCredsLoad: failed <span class="keyword">to</span> <span class="keyword">load</span> profile, .</span><br><span class="line">│ EC2RoleRequestError: <span class="keyword">no</span> EC2 instance <span class="keyword">role</span> <span class="built_in">found</span></span><br><span class="line">│ caused <span class="keyword">by</span>: RequestError: send request failed</span><br><span class="line">│ caused <span class="keyword">by</span>: <span class="keyword">Get</span> &quot;http://x.x.x.x/latest/meta-data/iam/security-credentials/&quot;: dial tcp x.x.x.x:<span class="number">80</span>: i/o timeout (Client.Timeout exceeded <span class="keyword">while</span> awaiting headers)</span><br><span class="line">│ </span><br><span class="line">│ </span><br><span class="line">│   <span class="keyword">with</span> provider[&quot;registry.terraform.io/hashicorp/aws&quot;],</span><br><span class="line">│   <span class="keyword">on</span> &lt;<span class="keyword">input</span>-prompt&gt; <span class="type">line</span> <span class="number">1</span>:</span><br><span class="line">│   (source code <span class="keyword">not</span> available)</span><br><span class="line">│ </span><br><span class="line">╵</span><br></pre></td></tr></table></figure>
<p>　　这是鉴权的问题，未知原因，通过配置环境变量（即<code>export AWS_PROFILE=Alliot-DevOps</code>）指定 profile 并不可靠，有时候不生效。因此，在执行 <code>terraformer</code> 的时候可以通过参数 <code>--profile=Alliot-DevOps</code> 或修改 provider 代码块来指定 profile。 ，参考： <a href="https://serverfault.com/questions/973933/how-to-fix-nocredentialproviders-no-valid-providers-in-chain-deprecated">How to fix “NoCredentialProviders: no valid providers in chain. Deprecated.”? - serverfault</a><br>类似上面提到的 “<br><a href="#%E5%88%9D%E5%A7%8B%E5%8C%96Terraform%E6%8F%92%E4%BB%B6">初始化Terraform插件</a><br>”，编辑 <code>provider.tf</code> 中的 <code>provider</code> 块：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">provider &quot;aws&quot; &#123;</span><br><span class="line"># 这里指定 profile 与 region</span><br><span class="line">  profile = &quot;Alliot-DevOps&quot;</span><br><span class="line">  region  = &quot;ap-southeast-1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重新 <code>terraform plan</code> 即可。</p>
<h3 id="报错提示"><a href="#报错提示" class="headerlink" title="报错提示"></a>报错提示</h3><h4 id="未初始化-terraform-init"><a href="#未初始化-terraform-init" class="headerlink" title="未初始化(terraform init)"></a>未初始化(terraform init)</h4><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment"># terraformer import aws --resources=vpc,subnet  --regions=ap-southeast-1 --profile Alliot-DevOps</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">2022</span>/<span class="number">05</span>/<span class="number">06</span> <span class="number">16</span>:<span class="number">33</span>:<span class="number">42</span> aws importing region ap-southeast-<span class="number">1</span></span><br><span class="line"><span class="attribute">2022</span>/<span class="number">05</span>/<span class="number">06</span> <span class="number">16</span>:<span class="number">33</span>:<span class="number">42</span> open /home/alliot/.terraform.d/plugins/linux_amd64: no such file or directory</span><br></pre></td></tr></table></figure>

<h4 id="profile-配置错误："><a href="#profile-配置错误：" class="headerlink" title="profile 配置错误："></a>profile 配置错误：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># terraformer import aws --resources=vpc,subnet  --regions=ap-southeast-1 --profile Alliot-DevOps</span><br><span class="line"></span><br><span class="line">2022/05/06 17:24:11 aws importing default region</span><br><span class="line">2022/05/06 17:24:17 aws importing... vpc</span><br><span class="line">2022/05/06 17:24:22 aws error initializing resources in service vpc, err: no EC2 IMDS role found, operation error ec2imds: GetMetadata, request canceled, context deadline exceeded</span><br><span class="line">2022/05/06 17:24:22 aws importing... subnet</span><br><span class="line">2022/05/06 17:24:27 aws error initializing resources in service subnet, err: no EC2 IMDS role found, operation error ec2imds: GetMetadata, request canceled, context deadline exceeded</span><br><span class="line">2022/05/06 17:24:27 aws Connecting....</span><br></pre></td></tr></table></figure>

<h3 id="20240331更新"><a href="#20240331更新" class="headerlink" title="20240331更新"></a>20240331更新</h3><p>从 Terraform v1.5.0 开始，我们可以直接使用 <code>import block</code> 来导入资源，同时生成资源代码块。<br><a href="https://developer.hashicorp.com/terraform/language/import">Import</a><br>如需要导入指定的 EC2 instance， 仅需要在 tf 文件中加入 <code>import block</code>：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123;</span><br><span class="line">  to = aws_instance.example</span><br><span class="line">  id = &quot;i-abcd1234&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行： </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">terraform plan -generate-config-out=generated.tf</span><br></pre></td></tr></table></figure>
<p>将会自动生成资源代码片断到 <code>generated.tf</code> 文件中。  </p>
]]></content>
      <tags>
        <tag>IaC</tag>
        <tag>Terraform</tag>
        <tag>AWS</tag>
      </tags>
  </entry>
  <entry>
    <title>其实可以做一个不那么“浑蛋”的人</title>
    <url>//post/mind/be-a-less-ass-person.html</url>
    <content><![CDATA[<p>　　一直有对看的书、看的剧做记录的习惯，翻看自己的豆瓣，在工作后浮躁、忙碌的状态下，已经很长一段时间没有更新了。这几年经历了很多，一直没能停下来好好的总结与反思，恰好再一次遇到了《非暴力沟通》<span id="more"></span><br>　　对我不是特别熟悉的人，对我的映像大多都是： 和善，好说话，带点幽默且好脾气的人。但是跟我有过比较多的接触或者说亲近的人，在某些时候会觉得我是个有点难相处，甚至是言语尖酸刻薄的人。我依然清晰的记得很久之前那个至亲至爱的人十分伤心的，哭着对我骂的那句： “xxx，你个浑蛋！”。<br>　　在某一刻，我才突然开始回顾起我自己，意识到我给那么多我在意的，同时也在意我的人带去了那么大的伤害。</p>
<h3 id="很少有人喜欢被说教"><a href="#很少有人喜欢被说教" class="headerlink" title="很少有人喜欢被说教"></a>很少有人喜欢被说教</h3><blockquote class="blockquote-center">
<p>如果有人倾听你，不对你评头论足，不替你担惊受怕，也不想改变你，这多美好啊……每当我得到人们的倾听和理解，我就可以用新的眼光看世界，并继续前进……这真神奇啊！一旦有人倾听，看起来无法解决的问题就有了解决办法，千头万绪的思路也会变得清晰起来。——卡尔罗杰斯 </p>

</blockquote>   

<p>　　当我审视自己之前与自己很在乎的人的沟通过程中，我发现，自己容易陷入一个将自己内心的想法一股脑甩给对方的误区，并带有用让人听起来就反感的说教口吻。<br>　　<br><strong>场景一</strong>：<br>对方： “最近这个事情好烦，我好难受，我都不知道要怎么办”<br>我： “这个XXX， 你应该XXX， 我帮你调研了XXX， 我觉得这个怎么怎么怎么，你要是怎么怎么怎么会更好。”<br>　　是的，我很多时候确实是在背后为对方的事情做了很多调研，查阅了很多资料，花了挺多心思，在实际的操作中可能也确实能帮上忙。但仔细去想会发现，甩出的结果完全是出于我自己的看法没有充分的考虑到对方的感受。事后还会觉得对方为啥对自己的付出还表现出了反感，甚至甩出一句： 不知人好坏。多么愚蠢的令人生厌的行为。  </p>
<p><strong>场景二</strong>：<br>对方：“这个东西好难啊，搞得我都烦了，你帮我搞一下”<br>我： “这个这么简单的东西，这你都搞不明白。你先这样这样，再这样这样，最后这样不就好了？没弄明白？ 算了算了，我来帮你搞，你别动”。<br>　　这也是出现频率很高的一个场景，熟悉我的朋友知道，我是一个 “热心” 的人，朋友寻求我的帮助，我一般都会比较上心的去做，遇到嘴巴解释不清楚的，甚至还会直接抢过来自己帮忙干了。<br><img data-src="https://static.iots.vip/be-a-less-ass-person-01.jpg" alt="be-a-less-ass-person-01"><br><img data-src="https://static.iots.vip/be-a-less-ass-person-02.jpg" alt="be-a-less-ass-person-02"><br>　　对方在寻求自己的帮助时，并非这个领域所擅长的，我下意识的会使用这种语言格式。尽管讲心里话，自己没有其他的意思，但是从对方与旁人的角度来看，这种语言模式充满了傲慢、不屑、鄙夷，趾高气扬。  </p>
<p><strong>场景三</strong>：<br>对方： “唉，这个东西我又搞砸了”<br>我： “我早就跟你说了，这个得这样这样，再这样，你就是不听，看吧，现在搞砸了。”<br>　　是不是很熟悉，且血压一下子就上来了？ 尽管绝大多数时候在这种对话之后，自己都会花费精力帮忙去收拾对方留下的 “烂摊子”，但这种语言格式，听起来充满了指责，说教，在对方原本就搞砸了事情伤心难过的情况下，这种语言很大程度的加大了对方的内疚感。倘若是把这种语言格式换成 “不要紧， 我们下次注意就好啦”，再不动声色的去帮助去解决，那效果将会大不相同。  </p>
<p>　　很少，或者说几乎没有人会喜欢被说教。自己本身就是一个反感被说教的人，但是自己却不经意的用上了这种语言格式。这是病，得治。<br>　　其实好好表达的话，也可以成为一个不那么 “浑蛋” 的人。   </p>
<h3 id="不要再用-“我只是心直口快”-来为自己开脱"><a href="#不要再用-“我只是心直口快”-来为自己开脱" class="headerlink" title="不要再用 “我只是心直口快” 来为自己开脱"></a>不要再用 “我只是心直口快” 来为自己开脱</h3><p>　　发自内心的觉得自己没有什么坏心思，所以在这以前，我也经常用 “我只是心直口快” 来为自己某些时候脱口而出的语言暴力做辩解与开脱。<br>　　但后来才意识到其实这是一种实质上懦弱不负责的行为，因为不管你的内心里究竟是怎样的心思，你的语言上给到对方的伤害是真实的，这无法开脱。<br>　　作为成年人，理应为自己的行为买单，心直口快在很多时候不是一个纯粹的褒义词，豪爽也并非口无遮拦的嘴贱。 </p>
<h3 id="言语是误会的源泉"><a href="#言语是误会的源泉" class="headerlink" title="言语是误会的源泉"></a>言语是误会的源泉</h3><p>　　语言上的尊重是非常必要的，它也是尊重里最基本的一环。<br>　　因为自己曾经某些时候 “暴力” 的语言沟通方式，伤害了很多人，亦或者是与一些朋友结下了不小的误会， 甚至导致了从前至亲的人伤心与离开，承受了难以挽回后果。<br>　　感谢一直还在我身边，甚至还能直言不讳的指出这些坏毛病的人，真诚的谢谢你们。<br>　　对于因此而离开的人，我也感谢曾经给过的包容，同时再次为之前的行为与带来的伤害抱歉，但请相信，我真真切切的是希望你过得好。<br>　　我想，我其实也可以做一个不那么“浑蛋”的人吧。  </p>
]]></content>
      <tags>
        <tag>心思随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>向samba服务器写入文件，提示“空间不足”</title>
    <url>//post/samba1.html</url>
    <content><![CDATA[<p>今天群里一位运维姐姐samba服务器出现了“空间不足”的情况，而在df -h中，空间是足够的。这里做一些记录。<span id="more"></span>  </p>
<blockquote class="blockquote-center">
<p>我们公司的centos7，用df —h看空间还有146g空间。可是用winows访问samb上传文件却提示空间不足。 </p>

</blockquote>  
<p><img data-src="https://static.iots.vip/2016/12/201612104618_9277.jpg"><br>看了看她的smb.conf如下：  </p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line"><span class="attribute">workgroup</span>=SDYTKFQDD</span><br><span class="line">netbios <span class="attribute">name</span>=YTKFQDJJ<span class="built_in"></span></span><br><span class="line"><span class="built_in">server </span><span class="attribute">string</span>=Samba<span class="built_in"> Server</span></span><br><span class="line"><span class="built_in"></span><span class="comment">#security=share</span></span><br><span class="line"><span class="attribute">security</span>=user</span><br><span class="line">map <span class="keyword">to</span> <span class="attribute">guest</span>=Bad<span class="built_in"> User</span></span><br><span class="line"><span class="built_in"></span><span class="comment">#配置共享目录share，用户是ncaiwuwen</span></span><br><span class="line">[share]</span><br><span class="line"><span class="attribute">path</span>=/home/share/</span><br><span class="line"><span class="attribute">public</span>=<span class="literal">no</span></span><br><span class="line"><span class="attribute">writable</span>=<span class="literal">yes</span></span><br><span class="line">write <span class="attribute">list</span>=@ncaiwuwen</span><br><span class="line"><span class="comment">#配置共享目录renshi，用户是renshi</span></span><br><span class="line">[renshi]</span><br><span class="line"><span class="attribute">path</span>=/home/renshi/</span><br><span class="line"><span class="attribute">public</span>=<span class="literal">no</span></span><br><span class="line"><span class="attribute">writable</span>=<span class="literal">yes</span></span><br><span class="line">write <span class="attribute">list</span>=@renshi</span><br><span class="line"><span class="comment">#配置共享目录caiwu，用户是caiwu</span></span><br><span class="line">[caiwu]</span><br><span class="line"><span class="attribute">path</span>=/home/caiwu/</span><br><span class="line"><span class="attribute">public</span>=<span class="literal">no</span></span><br><span class="line"><span class="attribute">writable</span>=<span class="literal">yes</span></span><br><span class="line">write <span class="attribute">list</span>=@caiwu</span><br></pre></td></tr></table></figure>
<p>而看了一下报错的提示如下<br><img data-src="https://static.iots.vip/2016/12/201612109791_8175.png"><br>从上面可以看出[share]的path路径为&#x2F;home&#x2F;share，而实际上传的路径为&#x2F;home&#x2F;share&#x2F;500g路径（他的服务器为2块独立的硬盘，独立挂载在此路径下）<br>修改path为&#x2F;home&#x2F;share&#x2F;500g后，问题解决了。<br>那么另外一块硬盘怎么办？<br>同样在smb.conf下添加  </p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">[share]</span><br><span class="line"><span class="attribute">path</span>=/home/share/</span><br><span class="line"><span class="attribute">public</span>=<span class="literal">no</span></span><br><span class="line"><span class="attribute">writable</span>=<span class="literal">yes</span></span><br><span class="line">write <span class="attribute">list</span>=@ncaiwuwen</span><br></pre></td></tr></table></figure>
<p>然后service smb restart就行了。<br>ps：由于自己对samba也不是很了解，不知道用LVM能不能解决这个问题。还望多多指教。  </p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Samba</tag>
      </tags>
  </entry>
  <entry>
    <title>小白笔记本购机验机指南</title>
    <url>//post/buy-check-computer.html</url>
    <content><![CDATA[<p>　　最近笔记本在我的折腾之下，炸了主板，作为几百块捡垃圾来的笔记本让我再换个主板我是不愿意的，所以这次找了富婆，准备换一波笔记本。本文讲讲小白级别的购买笔记本要做的功课以及基本验机流程与工具。  <span id="more"></span></p>
<h2 id="选择合适的型号"><a href="#选择合适的型号" class="headerlink" title="选择合适的型号"></a>选择合适的型号</h2><h3 id="功能分类"><a href="#功能分类" class="headerlink" title="功能分类"></a>功能分类</h3><p>　　笔记本不比台式，一般来说笔记本在便携性与性能两方面很难兼顾到，所以挑选笔记本要从自己的实际需求出发。一般来说分为游戏本、轻薄本、全能本三种：  </p>
<h4 id="游戏本"><a href="#游戏本" class="headerlink" title="游戏本"></a>游戏本</h4><p>　　游戏本的特点是配置在同等价位的笔记本中是最高的，但是便携性不是很好，轻则四五斤，重则上十斤(比如蓝天某模具的准系统…)，一般CPU型号都是标压(如 H、HQ 等)并带有独立显卡。    适合对性能要求比较高的童鞋，比如单机游戏爱好者，三维图形渲染或者科学计算类的工科专业童鞋，重度游戏患者建议大一就直接上台式，等要毕业了直接出掉再加钱换个轻薄本工作。  </p>
<h4 id="轻薄本"><a href="#轻薄本" class="headerlink" title="轻薄本"></a>轻薄本</h4><p>　　性能在同等价位下是最低的，但是在外观设计与重量方面有很大的优势，一般 CPU 都是低压(U 后缀)，适合办公或者文科类不需要用到大型软件的童鞋。一般 CPU 都是低压(U 后缀)    </p>
<h4 id="全能本"><a href="#全能本" class="headerlink" title="全能本"></a>全能本</h4><p>　　中庸者，即上述两者的综合折中方案，大多数人会选择它，但是我个人不太喜欢这种，因为我觉得工具的分工就应该明确，两方面都兼顾说明两方面都做的不出色。  </p>
<p>  学弟学妹最好根据自己的专业与腰包里的钱来判断一下自己需要哪种类型的。  </p>
<h3 id="细节分类"><a href="#细节分类" class="headerlink" title="细节分类"></a>细节分类</h3><h4 id="屏幕"><a href="#屏幕" class="headerlink" title="屏幕"></a>屏幕</h4><p>　　笔记本的屏幕一定是排在第一位的，虽然说大部分笔记本的屏幕是可以自行更换，但是对于小白来说还是有些难度的。所以建议一步到位。<br>　　分辨率来说，1080分辨率的屏幕是最基本的了，别在这个年代还买个1366*768的了，真的看瞎眼。<br>　　屏幕材质 IPS 比较合适。IPS 相对于 TN 屏幕，校色更准，可视角度更广。学设计、绘图等要求屏幕素质较高的童鞋，推荐72%色域的IPS屏幕。  </p>
<h4 id="散热"><a href="#散热" class="headerlink" title="散热"></a>散热</h4><p>　　笔记本除去屏幕外，就是散热了，这个可以去网上看测评，一般来说有很多同层次的笔记本的测评视频(比如 bilibili 上)，看看他们的测试对比数据。  </p>
<h4 id="品牌"><a href="#品牌" class="headerlink" title="品牌"></a>品牌</h4><p>　　笔记本这种东西，最好还是选一线品牌(联想 戴尔 惠普 华硕 苹果等)，先不说售后更好，就是做工也是其他二三线品牌比不得的。如果不是对笔记本很了解的话，尽量不要选择二三线品牌。(很了解也不会来看我这入门级的文章了)  </p>
<h4 id="可拓展性"><a href="#可拓展性" class="headerlink" title="可拓展性"></a>可拓展性</h4><p>　　一般来说，轻薄本最好一步到位，游戏本则建议 CPU、显卡一步到位，内存、固态到手再升级拓展，因为现在的轻薄本已经开始流行板载内存、固态，无法升级配置。     </p>
<h2 id="比价"><a href="#比价" class="headerlink" title="比价"></a>比价</h2><p>　　在已经挑好型号的情况下，比对各个电商的价格，一般来说笔记本同一个型号会有低中高几个不同配置的版本，价格也是不同的。<br>拿y7000来说，有如下配置：  </p>
<table>
<thead>
<tr>
<th align="center">CPU</th>
<th align="center">GPU</th>
<th align="center">内存</th>
<th align="center">硬盘</th>
</tr>
</thead>
<tbody><tr>
<td align="center">i5-8300HQ</td>
<td align="center">GTX 1050 2G</td>
<td align="center">8G</td>
<td align="center">128+2T</td>
</tr>
<tr>
<td align="center">i5-8300HQ</td>
<td align="center">GTX 1050 4G</td>
<td align="center">8G</td>
<td align="center">128+2T</td>
</tr>
<tr>
<td align="center">i5-8300HQ</td>
<td align="center">GTX 1050TI 4G</td>
<td align="center">8G</td>
<td align="center">128+2T</td>
</tr>
<tr>
<td align="center">i7-8750HQ</td>
<td align="center">GTX 1050TI 4G</td>
<td align="center">8G</td>
<td align="center">128+2T</td>
</tr>
</tbody></table>
<p>　　然后统计一下京东&#x2F;苏宁&#x2F;天猫&#x2F;官网各个版本的价格，对比一下比价网站或者软件里的最低价格(安卓有款软件“慢慢买”可以直观的看到产品的价格走势)。 一般来说，618双11的价格是去实体店压价的参考，我这次入的是联想拯救者 y7000，由于狗东目前没有活动，于是打算去实体店试试水。不过不建议对电脑完全不熟悉的童鞋去实体店试水，实体店的坑多的无法想象。小白尽量在京东自营与官网购买。   
　　</p>
<h2 id="验机"><a href="#验机" class="headerlink" title="验机"></a>验机</h2><p>　　这里需要用到几个工具，请准备一个1G 的 U 盘。下载地址： 链接：<a href="https://pan.baidu.com/s/1DPLThD6l9abjScJamQ3jMA">https://pan.baidu.com/s/1DPLThD6l9abjScJamQ3jMA</a> 密码：1d5n</p>
<h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>　　检查包装是否完整，有无压伤等。开箱(尽量保证包装的完整)，检查电源、电源线、机身、说明书、保修单是否齐全、完整。  </p>
<h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>　　不插电源，按开机键，是否能开机，如果能开机请联系客服退货，因为你拿到了二手机器(一般出厂新机是需要插电才能开机的)。  </p>
<h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>　　插电源，开机。是否能直接进入桌面，如果能直接进入桌面，请联系客服退货，因为你拿到了二手机器(一般出厂新机的系统是需要激活的)  </p>
<h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><p>　　如果第三步是出现的娜娜(开机向导)，请按照提示进行设置，这里注意，在选择 WiFi 的时候请选择跳过，不要联网。因为联网会激活系统影响退货。  </p>
<h3 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h3><p>　　插上 U 盘，将下载的工具复制到桌面，我们开始检查硬件配置。  </p>
<h4 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h4><p>　　打开 CPU-Z x64 检查CPU型号是否与所购配置一致。<br><img data-src="https://static.iots.vip/CPU-Z.png" alt="CPU-Z">  </p>
<h4 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h4><p>　　打开 RAMExpert 汉化版检查内存大小、型号是否与所购配置一致。  </p>
<h4 id="GPU"><a href="#GPU" class="headerlink" title="GPU"></a>GPU</h4><p>　　打开 GPU-Z 检查显卡型号以及显存大小，这里注意如果是带有独立显卡的在此选择独立显卡检查。<br><img data-src="https://static.iots.vip/GPU-Z1.png" alt="GPU-Z1"><br><img data-src="https://static.iots.vip/GPU-Z2.png" alt="GPU-Z2">  </p>
<h4 id="屏幕-1"><a href="#屏幕-1" class="headerlink" title="屏幕"></a>屏幕</h4><p>　　打开DisplayX，选择”常规完全测试”，会进入测试模式，屏幕上会有提示字样根据提示来观察。<br>这里注意几个概念，坏点与漏光。<br>　　所谓坏点就是屏幕某一点出现亮点，一旦出现坏点，则不管显示屏所显示出来的图像如何，显示屏上的某一点永远是显示同一种颜色。这种“坏点”是无法维修的，只有更换整个显示屏才能解决问题。在软件的纯色部分仔细观察有无坏点。<br>　　所谓漏光就是漏光就是液晶屏幕跟框架吻合不紧密导致灯管光直接透射出来，如图所示。<br><img data-src="https://static.iots.vip/%E5%B1%8F%E5%B9%95%E6%BC%8F%E5%85%89.png" alt="屏幕漏光"><br>漏光说是模具的问题，一般换机也会有这种情况，没办法。  </p>
<h4 id="硬盘"><a href="#硬盘" class="headerlink" title="硬盘"></a>硬盘</h4><p>　　打开HDTune，点击健康，查看通电时间，在10以内表示正常。否则就是到手二手机。<br><img data-src="https://static.iots.vip/HDTune.png" alt="HDTune"><br>　　打开CrystalDiskInfo，选择固态硬盘(图中箭头可以切换固态硬盘与机械硬盘)查看通电时间，在10以内表示正常。否则就是到手二手机。<br><img data-src="https://static.iots.vip/diskinfo.png" alt="DiskInfo">  </p>
<h4 id="键盘测试"><a href="#键盘测试" class="headerlink" title="键盘测试"></a>键盘测试</h4><p>　　打开KeyboardTest键盘上每个按键都按一下就行。  </p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>　　基本来说笔记本的购机验机就这么一些了，总体过程在心细。祝大家买到满意的机器~ 欢迎打赏~</p>
]]></content>
      <tags>
        <tag>硬件</tag>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>带参数的主函数——C语言</title>
    <url>//post/linux-c1.html</url>
    <content><![CDATA[<p>今天在看《操作系统基础》的时候见到了一段带参数的主函数，之前一直没有了解过带参数的主函数，于是查了点资料。<span id="more"></span><br>代码如下：  </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ECHO:%s\n&quot;</span>,argv[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是一段输出功能的程序，若将此编译为output<br>在shell下，输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./output aaa</span><br></pre></td></tr></table></figure>
<p>则输出ECHO:aaa  </p>
<hr>
<blockquote>
<p>ARGc和ARGv中的ARG指的是”参数”（外语：ARGuments, argument counter 和 argument vector ） （<a href="http://baike.baidu.com/link?url=iyYoLgFps8nORLS00DaLkYgbCwAn01qWCtoooi2ZOortcOAXaU45acTgfZVTlmN5bLNGuXurXcmSTk4NhqLqHEAwQjP1A6VwTcU5aWRJ8Gy">百度百科</a>）  </p>
</blockquote>
<h2 id="部分编译器允许将main-函数返回类型声明为void，这已不是合法的C-搜集了一下C和C-中常见的形式如下："><a href="#部分编译器允许将main-函数返回类型声明为void，这已不是合法的C-搜集了一下C和C-中常见的形式如下：" class="headerlink" title="部分编译器允许将main()函数返回类型声明为void，这已不是合法的C++搜集了一下C和C++中常见的形式如下："></a>部分编译器允许将main()函数返回类型声明为void，这已不是合法的C++<br>搜集了一下C和C++中常见的形式如下：<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>) main()   </span><br><span class="line">(<span class="number">2</span>) <span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>   </span><br><span class="line"><span class="params">(<span class="number">3</span>)</span> <span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>   </span><br><span class="line"><span class="params">(<span class="number">4</span>)</span> <span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span>,cha r**)</span>   </span><br><span class="line"><span class="params">(<span class="number">5</span>)</span> <span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span>,<span class="type">char</span> *[])</span>   </span><br><span class="line"><span class="params">(<span class="number">6</span>)</span> <span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> **argv)</span>   </span><br><span class="line"><span class="params">(<span class="number">7</span>)</span> <span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span>   </span><br><span class="line"><span class="params">(<span class="number">8</span>)</span> <span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[],<span class="type">char</span> *envp[])</span>  </span><br><span class="line"><span class="params">(<span class="number">9</span>)</span> <span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>  </span><br></pre></td></tr></table></figure></h2><p>(1)是(3)的简写。不推荐使用。<br>(2)是(3)的简写。在C++中是正确的形式。<br>(3)在C和C++中都是正确的形式。推荐使用。（还有缺省int的main(void)形式）。<br>(4)和(5)是不用参数时的一种写法。编译器级别高时会警告。不推荐使用。<br>(6)是(7)的另外写法。两种都可以，凭个人爱好。<br>(7)是带参数的正确的形式。推荐使用。<br>(8)是一种很少用的写法，且受系统限制。<br>(9)一般不认为是正确的写法。但是在嵌入式系统中有使用（包括void main()形式）  </p>
<hr>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">main(<span class="keyword">int</span> <span class="built_in">argc</span>, char *<span class="built_in">argv</span>[ ], char **env)才是UNIX和Linux中的标准写法。 </span><br><span class="line"><span class="built_in">argc</span>: 整数,用来统计你运行程序时送给main函数的命令行参数的个数  </span><br><span class="line">* <span class="built_in">argv</span>[ ]: 字符串数组，用来存放指向你的字符串参数的指针数组，每一个元素指向一个参数  </span><br><span class="line"><span class="built_in">argv</span>[<span class="number">0</span>] 指向程序运行的全路径名  </span><br><span class="line"><span class="built_in">argv</span>[<span class="number">1</span>] 指向在DOS命令行中执行程序名后的第一个字符串  </span><br><span class="line"><span class="built_in">argv</span>[<span class="number">2</span>] 指向执行程序名后的第二个字符串  </span><br><span class="line">...  </span><br><span class="line"><span class="built_in">argv</span>[<span class="built_in">argc</span>]为NULL。</span><br></pre></td></tr></table></figure>
<p>**env:字符串数组。env[ ]的每一个元素都包含ENVVAR&#x3D;value形式的字符串。其中ENVVAR为环境变量，value 为ENVVAR的对应值。<br>argc, argv,env是在main( )函数之前被赋值的，编译器生成的可执行文件，main( )不是真正的入口点，而是一个标准的函数,这个函数名与具体的操作系统有关。  ​</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>恢复Chrome的https与www显示</title>
    <url>//post/show-chrome-www-https.html</url>
    <content><![CDATA[<p>　　新版的 Chrome 取消了 https 小锁与 www 的显示，可以通过如下方式暂时打开。<span id="more"></span><br>　　在 Chrome 中打开地址:  chrome:&#x2F;&#x2F;flags&#x2F;#omnibox-ui-hide-steady-state-url-trivial-subdomains 将选项改为 <code>disable</code> 重启 Chrome 即可。<br>　　三个选项代表： </p>
<ul>
<li>default：不显示 https:&#x2F;&#x2F; 及 www. </li>
<li>disable：显示 https:&#x2F;&#x2F; 及 www. </li>
<li>enable：显示 https:&#x2F;&#x2F; 但不显示 www.<br>来自@<a href="https://twitter.com/qiushuiyibing">秋水逸冰</a> 的推文。</li>
</ul>
]]></content>
      <tags>
        <tag>折腾</tag>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>内存四区模型浅析——C语言</title>
    <url>//post/c2.html</url>
    <content><![CDATA[<p>　　在C语言中，我们将程序在运行时所占用的内存资源分为四个区域(堆区、栈区、全局区、代码区)，今天在温习C语言时查漏补缺，做一下记录。<span id="more"></span><br>　　需要注意，文中所谈及的堆栈等指的是内存中的堆区与栈区，与数据结构中所谈的堆栈(数据结构中”堆栈”即”栈”)没有必然的联系，是两个完全不同的概念。前者指明数据存储在哪种内存区之上，后者是组织数据的一种手段。  </p>
<h3 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h3><h4 id="堆区"><a href="#堆区" class="headerlink" title="堆区"></a>堆区</h4><p>　  堆区(heap) 主要用于动态内存分配，如 <code>malloc</code>,<del><code>new</code></del>(这里有错误，在文后补充了，感谢@下里巴人 指出来)，申请时需要指定大小。堆上动态分配的内存在使用完毕后，需要通过程序主动释放内存(如 <code>free</code> 或 <code>delete</code>)，否则程序将在最后才释放掉动态内存，易出现内存泄漏。一般来说，良好的编程习惯是：如果某动态内存不再使用，需要将其释放掉，并立即将指针置位  <code>NULL</code>，防止产生野指针。@<a href="https://blog.csdn.net/u010977122/article/details/53099425">Captain–Jack</a>     </p>
<h4 id="栈区"><a href="#栈区" class="headerlink" title="栈区"></a>栈区</h4><p>　　栈区(stack) 主要用于存储函数内部局部变量(如 <code>char a;</code>)，与堆不同，栈上空间的开辟与释放一般由操作系统自己控制。  </p>
<h4 id="全局区"><a href="#全局区" class="headerlink" title="全局区"></a>全局区</h4><p>　　全局区(global) 也称作静态区，主要用于存储常量和全局变量，细分有一个常量区, 字符串常量和其他常量。该区域在程序运行完毕后由操作系统进行释放。　　  </p>
<h4 id="代码区"><a href="#代码区" class="headerlink" title="代码区"></a>代码区</h4><p>　　代码区(code) 存放函数体的二进制代码，也是由操作系统进行管理。这里不深入探讨，了解有这个区即可。  </p>
<h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//栈区</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">stackArea</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;-----------------------栈区---------------------------\n&quot;</span>);</span><br><span class="line">	<span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;子函数中a的地址 %d\n&quot;</span>, &amp;a);</span><br><span class="line">	<span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//堆区</span></span><br><span class="line"><span class="type">int</span>* <span class="title function_">heapArea</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;-----------------------堆区-----------------------------\n&quot;</span>);</span><br><span class="line">	<span class="type">int</span> *chs = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	chs = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * <span class="number">10</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		*(chs + i) = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;子函数中chs的地址是: %d\n&quot;</span>, chs);</span><br><span class="line">	<span class="keyword">return</span> chs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局区</span></span><br><span class="line"><span class="type">char</span>* <span class="title function_">globalArea</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;----------------------全局区---------------------------\n&quot;</span>);</span><br><span class="line">	<span class="type">char</span> *str = <span class="string">&quot;abcde&quot;</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;子函数中str的地址是: %d\n&quot;</span>, str);</span><br><span class="line">	<span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> a_main = stackArea();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;main函数中 a_main的地址是:  %d\n&quot;</span>, &amp;a_main);</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span>* chs_main = heapArea();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;main函数中 chs_main的地址是: %d\n&quot;</span>, chs_main);</span><br><span class="line">	<span class="built_in">free</span>(chs_main);</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span>* str_main = globalArea();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;main函数中 str_main的地址是: %d\n&quot;</span>, str_main);</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行所得结果为:  </p>
<figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="literal">-----------------------</span><span class="comment">栈区</span><span class="literal">---------------------------</span></span><br><span class="line"><span class="comment">子函数中a的地址 15726708</span></span><br><span class="line"><span class="comment">main函数中 a_main的地址是:  15726960</span></span><br><span class="line"><span class="literal">-----------------------</span><span class="comment">堆区</span><span class="literal">-----------------------------</span></span><br><span class="line"><span class="comment">子函数中chs的地址是: 17560528</span></span><br><span class="line"><span class="comment">main函数中 chs_main的地址是: 17560528</span></span><br><span class="line"><span class="literal">----------------------</span><span class="comment">全局区</span><span class="literal">---------------------------</span></span><br><span class="line"><span class="comment">子函数中str的地址是: 8616960</span></span><br><span class="line"><span class="comment">main函数中 str_main的地址是: 8616960</span></span><br><span class="line"><span class="comment">请按任意键继续</span><span class="string">.</span> <span class="string">.</span> <span class="string">.</span></span><br></pre></td></tr></table></figure>
<h3 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h3><ul>
<li>stackArea() 函数内 a 的地址为 15726708 ，在 main 中调用该函数得到的 a_main 的地址为 7339248，这是因为栈区变量的生命周期短，短到当 main 调用 stackArea() 结束后，15726708 地址便立即被释放，在main函数中，重新分配地址来储存 a_main。  </li>
<li>heapArea() 函数内 chs 的地址为动态分配的地址 17560528，堆区变量生命周期长，需要主动释放或者程序运行完毕后才释放。 因此，在 main 函数调用 heapArea() 结束后，chs 地址空间不变，直到 free(chs_main) 才释放。  </li>
<li>globalArea() 函数内 str 的地址为 8616960，因其为字符串，储存于全局区，所以地址不变，生命周期为整个程序的运行期间。当程序退出后由操作系统进行释放处理。</li>
</ul>
<h3 id="堆栈区别"><a href="#堆栈区别" class="headerlink" title="堆栈区别"></a>堆栈区别</h3><p>　　转载于<a href="https://blog.csdn.net/u010977122/article/details/53099425">@Captain–Jack</a><br>堆和栈的主要区别由以下几点：<br>　　1、管理方式不同；<br>　　2、空间大小不同；<br>　　3、能否产生碎片不同；<br>　　4、生长方向不同；<br>　　5、分配方式不同；<br>　　6、分配效率不同； </p>
<h4 id="管理方式"><a href="#管理方式" class="headerlink" title="管理方式"></a>管理方式</h4><p>　　对于栈来讲，是由编译器自动管理，无需我们手工控制；对于堆来说，释放工作由程序员控制，容易产生memory leak。   </p>
<h4 id="空间大小"><a href="#空间大小" class="headerlink" title="空间大小"></a>空间大小</h4><p>　　一般来讲在32位系统下，堆内存可以达到4G的空间，从这个角度来看堆内存几乎是没有什么限制的。但是对于栈来讲，一般都是有一定的空间大小的，例如，在VC6下面，默认的栈空间大小是1M（好像是，记不清楚了）。当然，我们可以修改： 打开工程，依次操作菜单如下：Project-&gt;Setting-&gt;Link，在 <code>Category</code> 中选中 <code>Output</code>，然后在 <code>Reserve</code> 中设定堆栈的最大值和 <code>commit</code>。 注意：<code>reserve</code> 最小值为 4Byte；<code>commit</code> 是保留在虚拟内存的页文件里面，它设置的较大会使栈开辟较大的值，可能增加内存的开销和启动时间。 </p>
<h4 id="碎片问题"><a href="#碎片问题" class="headerlink" title="碎片问题"></a>碎片问题</h4><p>　　对于堆来讲，频繁的 <code>new/delete</code> 势必会造成内存空间的不连续，从而造成大量的碎片，使程序效率降低。对于栈来讲，则不会存在这个问题，因为栈是先进后出的队列，他们是如此的一一对应，以至于永远都不可能有一个内存块从栈中间弹出，在他弹出之前，在他上面的后进的栈内容已经被弹出，详细的可以参考数据结构，这里我们就不再一一讨论了。  </p>
<h4 id="生长方向"><a href="#生长方向" class="headerlink" title="生长方向"></a>生长方向</h4><p>栈：  </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;	</span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	<span class="type">int</span> b;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;&amp;a = %d\n&amp;b = %d\n&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：  </p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="meta">&amp;a = 7339584</span></span><br><span class="line"><span class="meta">&amp;b = 7339572</span></span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure>
<p>可以看出栈的生长方向是向下的，向着内存地址减小的方向增长。   </p>
<p>再看 堆:  </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;	</span><br><span class="line">	<span class="type">int</span> buf[<span class="number">10</span>];</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;buf = %d\nbuf + 1 = %d\n&quot;</span>, buf, buf + <span class="number">1</span>);</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果:  </p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">buf = <span class="number">7338088</span></span><br><span class="line">buf + <span class="number">1</span> = <span class="number">7338092</span></span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure>
<p>可以看出堆的生长方向是向上的，向着内存地址增加的方向增长。</p>
<h4 id="分配方式"><a href="#分配方式" class="headerlink" title="分配方式"></a>分配方式</h4><h2 id="堆都是动态分配的，没有静态分配的堆。栈有2种分配方式：静态分配和动态分配。静态分配是编译器完成的，比如局部变量的分配。动态分配由-alloca-函数进行分配，但是栈的动态分配和堆是不同的，它的动态分配是由编译器进行释放，无需我们手工实现。-分配效率-栈是机器系统提供的数据结构，计算机会在底层对栈提供支持：分配专门的寄存器存放栈的地址，压栈出栈都有专门的指令执行，这就决定了栈的效率比较高。堆则是-C-C-函数库提供的，它的机制是很复杂的，例如为了分配一块内存，库函数会按照一定的算法（具体的算法可以参考数据结构-操作系统）在堆内存中搜索可用的足够大小的空间，如果没有足够大小的空间（可能是由于内存碎片太多），就有可能调用系统功能去增加程序数据段的内存空间，这样就有机会分到足够大小的内存，然后进行返回。显然，堆的效率比栈要低得多。"><a href="#堆都是动态分配的，没有静态分配的堆。栈有2种分配方式：静态分配和动态分配。静态分配是编译器完成的，比如局部变量的分配。动态分配由-alloca-函数进行分配，但是栈的动态分配和堆是不同的，它的动态分配是由编译器进行释放，无需我们手工实现。-分配效率-栈是机器系统提供的数据结构，计算机会在底层对栈提供支持：分配专门的寄存器存放栈的地址，压栈出栈都有专门的指令执行，这就决定了栈的效率比较高。堆则是-C-C-函数库提供的，它的机制是很复杂的，例如为了分配一块内存，库函数会按照一定的算法（具体的算法可以参考数据结构-操作系统）在堆内存中搜索可用的足够大小的空间，如果没有足够大小的空间（可能是由于内存碎片太多），就有可能调用系统功能去增加程序数据段的内存空间，这样就有机会分到足够大小的内存，然后进行返回。显然，堆的效率比栈要低得多。" class="headerlink" title="　　堆都是动态分配的，没有静态分配的堆。栈有2种分配方式：静态分配和动态分配。静态分配是编译器完成的，比如局部变量的分配。动态分配由 alloca 函数进行分配，但是栈的动态分配和堆是不同的，它的动态分配是由编译器进行释放，无需我们手工实现。#### 分配效率　　栈是机器系统提供的数据结构，计算机会在底层对栈提供支持：分配专门的寄存器存放栈的地址，压栈出栈都有专门的指令执行，这就决定了栈的效率比较高。堆则是 C/C++ 函数库提供的，它的机制是很复杂的，例如为了分配一块内存，库函数会按照一定的算法（具体的算法可以参考数据结构&#x2F;操作系统）在堆内存中搜索可用的足够大小的空间，如果没有足够大小的空间（可能是由于内存碎片太多），就有可能调用系统功能去增加程序数据段的内存空间，这样就有机会分到足够大小的内存，然后进行返回。显然，堆的效率比栈要低得多。  
  "></a>　　堆都是动态分配的，没有静态分配的堆。栈有2种分配方式：静态分配和动态分配。静态分配是编译器完成的，比如局部变量的分配。动态分配由 <code>alloca</code> 函数进行分配，但是栈的动态分配和堆是不同的，它的动态分配是由编译器进行释放，无需我们手工实现。<br>#### 分配效率<br>　　栈是机器系统提供的数据结构，计算机会在底层对栈提供支持：分配专门的寄存器存放栈的地址，压栈出栈都有专门的指令执行，这就决定了栈的效率比较高。堆则是 <code>C/C++</code> 函数库提供的，它的机制是很复杂的，例如为了分配一块内存，库函数会按照一定的算法（具体的算法可以参考数据结构&#x2F;操作系统）在堆内存中搜索可用的足够大小的空间，如果没有足够大小的空间（可能是由于内存碎片太多），就有可能调用系统功能去增加程序数据段的内存空间，这样就有机会分到足够大小的内存，然后进行返回。显然，堆的效率比栈要低得多。  
  </h2><p>　　从这里我们可以看到，堆和栈相比，由于大量 <code>new/delete</code> 的使用，容易造成大量的内存碎片；由于没有专门的系统支持，效率很低；由于可能引发用户态和核心态的切换，内存的申请，代价变得更加昂贵。所以栈在程序中是应用最广泛的，就算是函数的调用也利用栈去完成，函数调用过程中的参数，返回地址，EBP 和局部变量都采用栈的方式存放。所以，我们推荐大家尽量用栈，而不是用堆。 虽然栈有如此众多的好处，但是由于和堆相比不是那么灵活，有时候分配大量的内存空间，还是用堆好一些。 　　<br>　　无论是堆还是栈，都要防止越界现象的发生（除非你是故意使其越界），因为越界的结果要么是程序崩溃，要么是摧毁程序的堆、栈结构，产生意想不到的结果,就算是在你的程序运行过程中，没有发生上面的问题，你还是要小心，说不定什么时候就崩掉，那时候debug可是相当困难的）　　</p>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p><a href="https://www.cnblogs.com/QG-whz/p/5060894.html">C++ 自由存储区是否等价于堆？</a><br><code>new</code> 是 C++ 中的函数，在 C 语言中 我们必须使用 <code>malloc</code> 函数,因为 C 语言没有 <code>new</code> 这个操作符,但是如果编译器是 C++ 的话,可以使用 <code>new</code> . 其次，<code>new</code> 所分配的内存并非在堆区(heap) ，而是在 C++ 概念中的自由存储区。  </p>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>关于开启CDN时的一些问题</title>
    <url>//post/open-cnd-problem.html</url>
    <content><![CDATA[<p>虽说换回国内服务器了，延时低了很多，但是放着免费的CDN不用干嘛。。于是开启了CDN，其中在做cname域名解析的时候，发现cname与mx不能共存。<span id="more"></span></p>
<p><img data-src="https://static.iots.vip/2016/12/201612253395_1078.jpg">  </p>
<blockquote>
<p>RFC 1034（<a href="http://tools.ietf.org/pdf/rfc1034%EF%BC%89">http://tools.ietf.org/pdf/rfc1034）</a> 章节3.6.2中指出<br>If aCNAME RR is present at a node, no other data should be present; this ensuresthat the data for a canonical name and its aliases cannot be different.<br>大意就是说如果CNAME资源记录出现在一个域名节点，为了确保不会出现不同的解析结果，这个域名节点将不再接受其他记录值。  </p>
</blockquote>
<p>看了好多网上的文档说301是最简单的办法了。<br>　　然后一般来说mx记录都是@的主机记录。。  这就意味着cname只能添加www记录，所以我觉得还是把主域名301到www比较好~这样就能同时兼顾mx与cname  而所有内容都通过cdn了。</p>
]]></content>
      <tags>
        <tag>SEO</tag>
      </tags>
  </entry>
  <entry>
    <title>副作用与序列点——C语言</title>
    <url>//post/c3.html</url>
    <content><![CDATA[<p>　　由于在复习 C 语言，众所周知，大学的老师热衷于类似 <code>++i + ++i + ++i</code>、<code>a = b++ + (c=3) + d++</code> 这样的问题，这里暂且不去批判这种行为，将《C Primer Plus》中谈到的术语：副作用(side effects)与序列点(sequence point)记录一下。<span id="more"></span>  </p>
<h3 id="副作用"><a href="#副作用" class="headerlink" title="副作用"></a>副作用</h3><p>　　书中的解释是： 副作用(side effects)是对数据对象或文件的修改。如：<br>语句:  </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">state = <span class="number">50</span>;</span><br></pre></td></tr></table></figure>
<p>它的副作用是将变量的值设置为 50。副作用？这似乎更像是主要目的，但是从 C 语言的角度看，主要目的是对表达式求值。给出表达式4 + 6，C会对其求值得10；给出表达式 <code>states = 50</code>，C 会对其求值得 50。对该表达式求值的副作用是把变量 <code>states</code> 的值改为50。跟赋值运算符一样，递增和递减运算符也有副作用，使用它们的主要目的就是使用其副作用。  </p>
<h3 id="序列点"><a href="#序列点" class="headerlink" title="序列点"></a>序列点</h3><p>　　书中的解释是： 序列点(sequence point)是程序执行的点，在该点上，所有的副作用都在进入下一步之前发生。在 C语言中，语句中的分号标记了一个序列点。意思是，在一个语句中，赋值运算符、递增运算符和递减运算符对运算对象做的改变必须在程序执行下一条语句之前完成。后面我们要讨论的一些运算符也有序列点。另外，任何一个完整表达式的结束也是一个序列点。<br>　　所谓完整表达式(full expression)就是指这个表达式不是另一个更大表达式的子表达式。例如，表达式语句中的表达式和 <code>while</code> 循环中的作为测试条件的表达式，都是完整表达式。<br>　　序列点概念的存在有利于分析后缀递增何时发生，如:  </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(guest++ &lt; <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d \n&quot;</span>,guest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>　　对于上面的代码，许多人都会认为“先使用值后递增”的意思是，在 <code>printf()</code> 中先使用 <code>guest</code>，再递增它。事实上，表达式 <code>guest++ &lt; 10</code> 是一个完整的表达式，因为它是 <code>while()</code> 的测试条件，是属于完整表达式范畴，所以在该语句的结束就是一个序列点，因此 C 保证了在程序执行到 <code>printf()</code> 之前发生副作用(即递增 guest)，同时，由于是后缀形式，所以保证了 <code>guest</code> 在完成与 10 比较后才进行递增。<br>　　现在来看这句：  </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">y = (<span class="number">4</span> + x++) + (<span class="number">6</span> + x++);</span><br></pre></td></tr></table></figure>
<p>　　表达式 <code>(4 + x++)</code> 不是一个完整的表达式，所以在子表达式 <code>(4 + x++)</code> 执行完后不会立刻对 <code>x</code> 进行递增操作，<code>(6 + x++)</code> 同理。这里，完整表达式是整个赋值语句，分号标记了序列点，所以，C 只是保证在该赋值语句完成后对 <code>x</code> 进行两次递增操作，并未指明是在对子表达式求值以后递增 <code>x</code>，还是对所有表达式求值后再递增 <code>x</code>。因此，要尽量避免编写类似的语句。  </p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>　　C语言标准对副作用和序列点的定义如下：  </p>
<blockquote>
<p>Accessing a volatile object, modifying an object, modifying a file, or calling a function that does any of those operations are all side effects, which are changes in the state of the execution environment. Evaluation of an expression may produce side effects. At certain specified points in the execution sequence called sequence points, all side effects of previous evaluations shall be complete and no side effects of subsequent evaluations shall have taken place.  </p>
</blockquote>
<p>翻译： 访问易变对象，修改对象或文件，或者调用包含这些操作的函数都是副作用，它们都会改变执行环境的状态。计算表达式也会引起副作用。执行序列中某些特定的点被称为序列点。在序列点上，该点之前所有运算的副作用都应该结束，并且后继运算的副作用还没发生。  </p>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器性能测试系列（一）：UnixBench工具跑分测试</title>
    <url>//post/vps-assessment1.html</url>
    <content><![CDATA[<p>UnixBench是一款开源的测试 unix 系统基本性能的工具,是比较通用的测试VPS性能的工具。<br>UnixBench会执行一系列的测试,包括2D和3D图形系统的性能衡量,测试的结果不仅仅只是CPU,内存,或者磁盘为基准,还取决于硬件,操作系统版本,编译器。<br>测试系统各个方面一系列的性能,然后将每个测试结果和一个基准值进行比较,得到一个索引值,所有测试项目的索引值结合在一起形成一个测试分数值。 <span id="more"></span><br>UnixBench一键执行脚本,脚本会自动下载unixbench最新版本,并自动运行.根据机器性能,测试执行完大约需要10-30分钟。 </p>
<h2 id="下载并安装"><a href="#下载并安装" class="headerlink" title="下载并安装"></a>下载并安装</h2><p>运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://static.iots.vip/UnixBench5.1.3.tgz</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xf UnixBench5.1.3.tgz</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> UnixBench5.1.3</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure>

<h2 id="开始测试"><a href="#开始测试" class="headerlink" title="开始测试"></a>开始测试</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./Run</span><br></pre></td></tr></table></figure>
<h2 id="出现以下界面：耐心等待，测试时间在半小时左右。-查看结果最后结果类似如下："><a href="#出现以下界面：耐心等待，测试时间在半小时左右。-查看结果最后结果类似如下：" class="headerlink" title="出现以下界面：耐心等待，测试时间在半小时左右。## 查看结果最后结果类似如下：  "></a>出现以下界面：<br><img data-src="https://static.iots.vip/2016/11/201611015087_7208.png" alt="UnixBench"><br>耐心等待，测试时间在半小时左右。<br>## 查看结果<br>最后结果类似如下：<br><img data-src="https://static.iots.vip/2016/11/201611013539_8000.png" alt="测试结果1"><br><img data-src="https://static.iots.vip/2016/11/201611011598_5155.png" alt="测试结果2"><br><img data-src="https://static.iots.vip/2016/11/201611011524_9154.png" alt="测试结果3">  </h2><h2 id="常见问题解决方法"><a href="#常见问题解决方法" class="headerlink" title="常见问题解决方法"></a>常见问题解决方法</h2><p>来自@<a href="http://www.laozuo.org/">老左博客</a><br>1、make的时候出现以下报错：  </p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="built_in">make</span>: gcc: Command <span class="keyword">not</span> found</span><br><span class="line"><span class="built_in">make</span>: *** [pgms/arithoh] <span class="built_in">Error</span> <span class="number">127</span></span><br></pre></td></tr></table></figure>
<p>这是由于没有安装gcc导致的，执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install gcc</span><br></pre></td></tr></table></figure>
<p>再执行make即可。<br>2、提示：  </p>
<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">Can&#x27;<span class="built_in">t</span> locate <span class="built_in">Time</span>/HiRes.pm</span><br></pre></td></tr></table></figure>
<p>有的时候在运行.&#x2F;Run时候会出现这样的错误  </p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Can</span>&#x27;t locate <span class="type">Time</span><span class="regexp">/HiRes.pm in @INC (@INC contains: /</span>usr<span class="regexp">/local/</span>lib64<span class="regexp">/perl5 /</span>usr<span class="regexp">/local/</span>share<span class="regexp">/perl5 /</span>usr<span class="regexp">/lib64/</span>perl5<span class="regexp">/vendor_perl /</span>usr<span class="regexp">/share/</span>perl5<span class="regexp">/vendor_perl /</span>usr<span class="regexp">/lib64/</span>perl5 <span class="regexp">/usr/</span>share<span class="regexp">/perl5 .) at ./</span><span class="type">Run</span> line <span class="number">6</span>.</span><br><span class="line"><span class="type">BEGIN</span> failed<span class="operator">--</span>compilation aborted at <span class="operator">./</span><span class="type">Run</span> line <span class="number">6</span>.</span><br></pre></td></tr></table></figure>
<p>执行：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install perl-Time-HiRes</span><br></pre></td></tr></table></figure>
<p>4、提示 </p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">bash: <span class="keyword">make</span>: <span class="keyword">command</span> not found</span><br></pre></td></tr></table></figure>
<p>执行：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install gcc automake autoconf libtool make</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>服务器性能测试系列</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>系列</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Terraform在AWS ECS中构建Jenkins持续集成体系</title>
    <url>//post/terraform-aws-ecs-jenkins.html</url>
    <content><![CDATA[<p>　　之前我们旧的 Jenkins 集群跑在 AWS EC2 上，近期由于大量新增 Job 以及大量构建任务的并行，导致集群资源吃紧，不得不新增更多的 Slave 来应对。为了降低成本，同时获得更好的资源弹性，Alliot 打算基于 Terraform 在 AWS ECS 中构建新的 Jenkins 持续集成体系。容器提供了更细的资源粒度，拥有更好的资源弹性和资源利用率。 <span id="more"></span></p>
<h3 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h3><p>　　新建 ECS 集群，并在 ECS(Amazon Elastic Container Service) 集群中部署 Jenkins master，使用 ECS fargate 作为 Slave Executor 执行任务。   </p>
<h3 id="需求构思"><a href="#需求构思" class="headerlink" title="需求构思"></a>需求构思</h3><blockquote>
<p>本文尽可能的使用 Terraform 来实现资源的管理，尽可能的 Infrastructure As Code。在平时的学习过程中，通过 Terraform 与 AWS Console 以及 AWS CLI 的配合使用，也能更快的熟悉 AWS 的细节。    </p>
</blockquote>
<p>　　计划使用 AWS ECS fargate 运行 Jenkins master 节点，通过 AWS EFS(Amazon Elastic File System) 作为共享存储，实现配置持久化。<br>　　Jenkins master 通过 <a href="https://plugins.jenkins.io/amazon-ecs/">Amazon Elastic Container Service (ECS) &#x2F; Fargate</a> 插件，调度 ECS 资源动态的完成 slave 的管理(master 常驻，而 slave 是动态创建与销毁的，这个过程由 master 来控制)。<br>　　ECS 负载与 EFS 实例均部署在 Private  subnet，通过统一的 NAT Gateway 作为出口。  ECS Service 通过 ALB 向公网暴露 WebUI 提供服务（当然，生产环境搭配安全组白名单食用）。Jenkins master 与 Jenkins slave 之间，利用 AWS service-discovery 走 VPC 内部通信。<br>　　架构大致如下图所示：<br><img data-src="https://static.iots.vip/terraform-aws-ecs-jenkins-01.png" alt="terraform-aws-ecs-jenkins-01">  </p>
<p>　　综上， 我们需要的资源有：<br><strong>网络资源</strong>： VPC（1 个），VPC 启用三个可用区，每个可用区包含 Privcate、Public subnet 各一个。<br><strong>计算资源</strong>： ECS Cluster 一个，Networing 指定上述 VPC 的三个 Private subnet。ALB 一个（由于需要暴露在公网，所以可用区应位于 Public subnet），用于暴露 Jenkins WebUI。<br><strong>存储资源</strong>： EFS 实例一个，Networking 同上；CloudWatch LogGroup 一个；ECR 一个。<br><strong>IAM role</strong>： 供 ECS service 与 task 来访问 EFS 以及向 CloudWatch 输出日志。<br><strong>其他</strong>： ECS task 实例之间走 Private subnet 进行通讯，但 ECS 不能像 kubernetes 那样能够直接<a href="https://kubernetes.io/zh-cn/docs/concepts/services-networking/dns-pod-service/">通过内部 DNS 进行通讯</a>，要想达到同样的目的，需要依赖 <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html">Service Discovery</a> 来创建内部 DNS 记录，通过内部 DNS 来进行 task 实例间调用 。  </p>
<blockquote class="blockquote-center">
<p>  本文代码已开源，仓库地址：<br><a href="https://github.com/AlliotTech/terraform-aws-ecs-jenkins">https://github.com/AlliotTech/terraform-aws-ecs-jenkins</a><br>注意： 由于每个人的现网环境现网资源不一定相同，因此 Alliot 在代码中尽可能的不依赖现网的资源，所以代码不一定能够完整的契合每个人的需求，各位同学也可以考虑分模块按需取用。</p>

</blockquote>  

<p>下面是各资源模块的讲解。  </p>
<h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><p>AWS 账号一个（废话）<br>域名一个<br>AWS Certificate Manager 托管的该域名的 SSL 证书一个  </p>
<h3 id="IAM-配置"><a href="#IAM-配置" class="headerlink" title="IAM 配置"></a>IAM 配置</h3><p>　　AWS 拥有非常完整细致的权限管控模式，IAM 规则可以细分到每个资源每个操作。这里我们只能是尽量遵循 “权限最小化” 的原则，但可能依旧存在权限给的稍大的情况，各位依据自己的场景来调整权限松紧。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">resource &quot;aws_iam_policy&quot; &quot;jenkins_ecs_policy&quot; &#123;</span><br><span class="line">  name        = var.jenkins_ecs_policy_name</span><br><span class="line">  description = &quot;Policy for jenkins ecs task&quot;</span><br><span class="line"></span><br><span class="line">  policy = &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">    &quot;Version&quot;: &quot;2012-10-17&quot;,</span><br><span class="line">    &quot;Statement&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Effect&quot;: &quot;Allow&quot;,</span><br><span class="line">            &quot;Action&quot;: &quot;elasticfilesystem:*&quot;,</span><br><span class="line">            &quot;Resource&quot;: &quot;*&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Effect&quot;: &quot;Allow&quot;,</span><br><span class="line">            &quot;Action&quot;: [</span><br><span class="line">                &quot;cloudwatch:*&quot;,</span><br><span class="line">                &quot;logs:*&quot;,</span><br><span class="line">                &quot;ecr:*&quot;,</span><br><span class="line">                &quot;iam:PassRole&quot;,</span><br><span class="line">                &quot;ecs:*&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Resource&quot;: &quot;*&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Effect&quot;: &quot;Allow&quot;,</span><br><span class="line">            &quot;Action&quot;: [</span><br><span class="line">                &quot;ssmmessages:CreateControlChannel&quot;,</span><br><span class="line">                &quot;ssmmessages:CreateDataChannel&quot;,</span><br><span class="line">                &quot;ssmmessages:OpenControlChannel&quot;,</span><br><span class="line">                &quot;ssmmessages:OpenDataChannel&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Resource&quot;: &quot;*&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Effect&quot;: &quot;Allow&quot;,</span><br><span class="line">            &quot;Action&quot;: [</span><br><span class="line">                &quot;ecs:RegisterTaskDefinition&quot;,</span><br><span class="line">                &quot;ecs:ListClusters&quot;,</span><br><span class="line">                &quot;ecs:DescribeContainerInstances&quot;,</span><br><span class="line">                &quot;ecs:ListTaskDefinitions&quot;,</span><br><span class="line">                &quot;ecs:DescribeTaskDefinition&quot;,</span><br><span class="line">                &quot;ecs:DeregisterTaskDefinition&quot;,</span><br><span class="line">                &quot;ecs:ListContainerInstances&quot;,</span><br><span class="line">                &quot;ecs:DescribeClusters&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Resource&quot;: &quot;*&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">  tags = merge(</span><br><span class="line">    var.tags</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource &quot;aws_iam_role&quot; &quot;jenkins_ecs_role&quot; &#123;</span><br><span class="line">  name        = var.jenkins_ecs_role_name</span><br><span class="line">  description = &quot;iam role for ecs jenkins task&quot;</span><br><span class="line"></span><br><span class="line">  assume_role_policy = &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">    &quot;Version&quot;: &quot;2008-10-17&quot;,</span><br><span class="line">    &quot;Statement&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Sid&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Effect&quot;: &quot;Allow&quot;,</span><br><span class="line">            &quot;Principal&quot;: &#123;</span><br><span class="line">                &quot;Service&quot;: &quot;ecs-tasks.amazonaws.com&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Action&quot;: &quot;sts:AssumeRole&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">  depends_on = [</span><br><span class="line">    aws_iam_policy.jenkins_ecs_policy</span><br><span class="line">  ]</span><br><span class="line">  tags = merge(</span><br><span class="line">    var.tags</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource &quot;aws_iam_role_policy_attachment&quot; &quot;jenkins_ecs_policy_attachment&quot; &#123;</span><br><span class="line">  role       = aws_iam_role.jenkins_ecs_role.name</span><br><span class="line">  policy_arn = aws_iam_policy.jenkins_ecs_policy.arn</span><br><span class="line"></span><br><span class="line">  depends_on = [</span><br><span class="line">    aws_iam_policy.jenkins_ecs_policy,</span><br><span class="line">    aws_iam_role.jenkins_ecs_role</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="VPC"><a href="#VPC" class="headerlink" title="VPC"></a>VPC</h3><p>　　为了方便起见，我们直接为其单独起了一个 VPC，并启用了 Internet-gateway，这里直接使用 aws 官方的 module 来实现：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">locals &#123;</span><br><span class="line">  name_prefix = &quot;$&#123;var.vpc_name&#125;-$&#123;var.environment&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># https://github.com/terraform-aws-modules/terraform-aws-vpc</span><br><span class="line">module &quot;vpc&quot; &#123;</span><br><span class="line">  source = &quot;terraform-aws-modules/vpc/aws&quot;</span><br><span class="line"></span><br><span class="line">  name = local.name_prefix</span><br><span class="line">  cidr = var.vpc_cidr</span><br><span class="line"></span><br><span class="line">  azs             = [&quot;$&#123;var.region&#125;a&quot;, &quot;$&#123;var.region&#125;b&quot;, &quot;$&#123;var.region&#125;c&quot;]</span><br><span class="line">  public_subnets  = [&quot;$&#123;var.public_subnet_1_cidr&#125;&quot;, &quot;$&#123;var.public_subnet_2_cidr&#125;&quot;, &quot;$&#123;var.public_subnet_3_cidr&#125;&quot;]</span><br><span class="line">  private_subnets = [&quot;$&#123;var.private_subnet_1_cidr&#125;&quot;, &quot;$&#123;var.private_subnet_2_cidr&#125;&quot;, &quot;$&#123;var.private_subnet_3_cidr&#125;&quot;]</span><br><span class="line"></span><br><span class="line">  public_subnet_tags = &#123;</span><br><span class="line">    Name                     = &quot;$&#123;local.name_prefix&#125;-public-subnets&quot;</span><br><span class="line">    &quot;kubernetes.io/role/elb&quot; = &quot;1&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  private_subnet_tags = &#123;</span><br><span class="line">    Name = &quot;$&#123;local.name_prefix&#125;-private-subnets&quot;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  enable_dns_hostnames         = true</span><br><span class="line">  enable_dns_support           = true</span><br><span class="line">  enable_nat_gateway           = true</span><br><span class="line">  single_nat_gateway           = true</span><br><span class="line">  one_nat_gateway_per_az       = false</span><br><span class="line">  create_database_subnet_group = false</span><br><span class="line"></span><br><span class="line">  tags = merge(</span><br><span class="line">    var.tags,</span><br><span class="line">    &#123; Name = local.name_prefix &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="安全组规则"><a href="#安全组规则" class="headerlink" title="安全组规则"></a>安全组规则</h3><p>　　这里可以根据自己的环境需求来修改，此处对内网环境规则比较开放：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 内网安全组直接全部放开了，生产环境请根据实际情况进行修改  </span><br><span class="line">resource &quot;aws_security_group&quot; &quot;ecs_jenkins_service_sg&quot; &#123;</span><br><span class="line">  name        = &quot;$&#123;var.ecs_service_name&#125;_sg&quot;</span><br><span class="line">  description = &quot;Allow ALL traffic in private subnet for ECS internal service&quot;</span><br><span class="line">  vpc_id      = module.vpc.vpc_id</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  ingress = [</span><br><span class="line">    &#123;</span><br><span class="line">      description      = &quot;Allow all private network inbound&quot;</span><br><span class="line">      from_port        = 0</span><br><span class="line">      to_port          = 0</span><br><span class="line">      protocol         = &quot;-1&quot;</span><br><span class="line">      cidr_blocks      = [&quot;0.0.0.0/0&quot;]</span><br><span class="line">      ipv6_cidr_blocks = []</span><br><span class="line">      self             = false</span><br><span class="line">      security_groups  = []</span><br><span class="line">      prefix_list_ids  = []</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">  egress &#123;</span><br><span class="line">    cidr_blocks = [&quot;0.0.0.0/0&quot;]</span><br><span class="line">    description = &quot;Allow all outbound&quot;</span><br><span class="line">    from_port   = 0</span><br><span class="line">    protocol    = &quot;-1&quot;</span><br><span class="line">    to_port     = 0</span><br><span class="line">  &#125;</span><br><span class="line">  tags = merge(</span><br><span class="line">    var.tags</span><br><span class="line">  )</span><br><span class="line">  depends_on = [</span><br><span class="line">    module.vpc</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 为公网 ALB 流量入口白名单，这里也是0.0.0.0/0 全开的，强烈建议生产环境限制来源IP或直接使用内网 ALB ！！！！  </span><br><span class="line">resource &quot;aws_security_group&quot; &quot;jenkins_master_public_lb_sg&quot; &#123;</span><br><span class="line">  name        = &quot;public_$&#123;var.public_load_balancer_name&#125;_sg&quot;</span><br><span class="line">  description = &quot;Whitelist for Jenkins master WebUI in public network alb&quot;</span><br><span class="line">  vpc_id      = module.vpc.vpc_id</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  ingress &#123;</span><br><span class="line">    description      = &quot;Allow 443&quot;</span><br><span class="line">    from_port        = 443</span><br><span class="line">    to_port          = 443</span><br><span class="line">    protocol         = &quot;TCP&quot;</span><br><span class="line">    cidr_blocks      = [&quot;0.0.0.0/0&quot;]</span><br><span class="line">    ipv6_cidr_blocks = []</span><br><span class="line">    self             = false</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ingress &#123;</span><br><span class="line">    description      = &quot;Allow 80&quot;</span><br><span class="line">    from_port        = 80</span><br><span class="line">    to_port          = 80</span><br><span class="line">    protocol         = &quot;TCP&quot;</span><br><span class="line">    cidr_blocks      = [&quot;0.0.0.0/0&quot;]</span><br><span class="line">    ipv6_cidr_blocks = []</span><br><span class="line">    self             = false</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  egress &#123;</span><br><span class="line">    cidr_blocks = [&quot;0.0.0.0/0&quot;]</span><br><span class="line">    description = &quot;Allow all outbound&quot;</span><br><span class="line">    from_port   = 0</span><br><span class="line">    protocol    = &quot;-1&quot;</span><br><span class="line">    to_port     = 0</span><br><span class="line">  &#125;</span><br><span class="line">  tags = merge(</span><br><span class="line">    var.tags</span><br><span class="line">  )</span><br><span class="line">  depends_on = [</span><br><span class="line">    module.vpc</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="EFS"><a href="#EFS" class="headerlink" title="EFS"></a>EFS</h3><p>　　EFS 即 AWS 托管的 NFS 服务，AWS 相比国内常用的 NFS NAS 服务，拥有更细致的权限管控机制，动手实操的过程中，会发现直接将 EFS 作为 NFS Volume 挂给 Jenkins container 后，会出现挂载的Volume 无法读写的情况。这是由于 Jenkins 官方的 docker 镜像采用 jenkins 用户(non-root) 作为run user，而我们在 task-definition 中配置的 EFS  Volume 默认采用 root 身份挂载，所以 jenkins 用户无法向挂载的目录中读写文件。 解决这个问题有两种方式：<br><strong>第一种：</strong> 重新打包官方的 docker 镜像，改用 root 身份来运行容器（或者直接在 task-difinition 中指定使用特权模式启动容器）</p>
<p><strong>第二种（推荐）：</strong> 使用 AWS EFS 的 <a href="https://docs.amazonaws.cn/efs/latest/ug/efs-access-points.html">Access Point</a> 来提供挂载 Volume。 Access Point 可以为文件请求指定用户、权限以及根目录。  </p>
<h4 id="创建资源"><a href="#创建资源" class="headerlink" title="创建资源"></a>创建资源</h4><p>　　可用区选择： 由于此 EFS 实例仅用于 ECS，所以选择三个私有 subnet 可用区。  </p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"># 创建 EFS</span><br><span class="line">resource &quot;aws_efs_file_system&quot; &quot;jenkins_ecs&quot; &#123;</span><br><span class="line"></span><br><span class="line">  performance_mode = &quot;maxIO&quot;</span><br><span class="line">  <span class="keyword">encrypted</span>        = <span class="keyword">false</span></span><br><span class="line">  throughput_mode  = &quot;bursting&quot;</span><br><span class="line"></span><br><span class="line">  tags = merge(</span><br><span class="line">    &#123; <span class="type">Name</span> = var.efs_name &#125;,</span><br><span class="line">    var.tags</span><br><span class="line">  )</span><br><span class="line">  depends_on = [</span><br><span class="line">    module.vpc</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># mount target 类似可用区性质  </span><br><span class="line">resource &quot;aws_efs_mount_target&quot; &quot;efs_mount&quot; &#123;</span><br><span class="line">  count           = length(module.vpc.private_subnets)</span><br><span class="line">  file_system_id  = aws_efs_file_system.jenkins_ecs.id</span><br><span class="line">  subnet_id       = module.vpc.private_subnets[count.<span class="keyword">index</span>]</span><br><span class="line">  security_groups = [aws_security_group.ecs_jenkins_service_sg.id]</span><br><span class="line">  depends_on = [</span><br><span class="line">    aws_efs_file_system.jenkins_ecs</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 创建 <span class="keyword">access</span> <span class="type">point</span>，指定根路径，由于我们jenkins容器默认使用jenkins用户启动，uid gid 均为 <span class="number">1000</span>,因此需要在此指定，否则容器将无法正常写入这个Volume </span><br><span class="line">resource &quot;aws_efs_access_point&quot; &quot;jenkins_master&quot; &#123;</span><br><span class="line">  file_system_id = aws_efs_file_system.jenkins_ecs.id</span><br><span class="line"></span><br><span class="line">  posix_user &#123;</span><br><span class="line">    gid = <span class="number">1000</span></span><br><span class="line">    uid = <span class="number">1000</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  root_directory &#123;</span><br><span class="line">    <span class="type">path</span> = &quot;/var/jenkins_home&quot;</span><br><span class="line">    creation_info &#123;</span><br><span class="line">      owner_gid   = <span class="number">1000</span></span><br><span class="line">      owner_uid   = <span class="number">1000</span></span><br><span class="line">      permissions = &quot;0777&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  depends_on = [</span><br><span class="line">    aws_efs_file_system.jenkins_ecs</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Cloudwatch"><a href="#Cloudwatch" class="headerlink" title="Cloudwatch"></a>Cloudwatch</h4><p>　　CloudWatch 提供了各项 AWS 计算服务的集成，包括像 lambda 等。这里我们需要先创建 log group 再为其创建 log steam 供 ECS 写入日志。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">resource &quot;aws_cloudwatch_log_group&quot; &quot;jenkins_ecs_log_group&quot; &#123;</span><br><span class="line">  name              = &quot;/aws/ecs/$&#123;var.ecs_cluster_name&#125;/$&#123;var.ecs_service_name&#125;&quot;</span><br><span class="line">  retention_in_days = 7</span><br><span class="line">  tags = merge(</span><br><span class="line">    var.tags</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource &quot;aws_cloudwatch_log_stream&quot; &quot;jenkins_ecs_log_stream&quot; &#123;</span><br><span class="line">  name           = var.ecs_service_name</span><br><span class="line">  log_group_name = aws_cloudwatch_log_group.jenkins_ecs_log_group.name</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="创建-ALB"><a href="#创建-ALB" class="headerlink" title="创建 ALB"></a>创建 ALB</h4><p>　　由于我们 ECS 部署在内网 VPC， 又要提供对外的访问入口，因此必须使用 ALB（application loadblancer）作为入口。（NLB 作为四层负载均衡器，无法设置安全组规则，而 ALB 可以，因此我们也能对流量入口的 inbound 流量做一定的白名单限制）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">resource &quot;aws_lb&quot; &quot;jenkins_master&quot; &#123;</span><br><span class="line">  name               = var.public_load_balancer_name</span><br><span class="line">  internal           = false</span><br><span class="line">  load_balancer_type = &quot;application&quot;</span><br><span class="line">  security_groups    = [aws_security_group.jenkins_master_public_lb_sg.id]</span><br><span class="line">  subnets            = [module.vpc.public_subnets[0], module.vpc.public_subnets[1], module.vpc.public_subnets[2]]</span><br><span class="line"></span><br><span class="line"># 这里为了后面 destroy 方便，把删除保护关闭了， 生产可以打开。  </span><br><span class="line">  # enable_deletion_protection = true</span><br><span class="line">  enable_deletion_protection = false</span><br><span class="line"></span><br><span class="line">  tags = merge(</span><br><span class="line">    var.tags</span><br><span class="line">  )</span><br><span class="line">  depends_on = [</span><br><span class="line">    module.vpc</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 创建target group，此处的健康检查必须配置，否则后面的 ECS task 会因为 loadbalancer 健康检查不通过而被 kill，出现不断重启的情况。  </span><br><span class="line">resource &quot;aws_lb_target_group&quot; &quot;ecs_jenkins_master&quot; &#123;</span><br><span class="line">  name        = var.lb_target_group_name</span><br><span class="line">  port        = 80</span><br><span class="line">  protocol    = &quot;HTTP&quot;</span><br><span class="line">  target_type = &quot;ip&quot;</span><br><span class="line">  vpc_id      = module.vpc.vpc_id</span><br><span class="line">  health_check &#123;</span><br><span class="line">    interval            = 60</span><br><span class="line">    path                = &quot;/login&quot;</span><br><span class="line">    port                = 8080</span><br><span class="line">    protocol            = &quot;HTTP&quot;</span><br><span class="line">    timeout             = 10</span><br><span class="line">    unhealthy_threshold = 5</span><br><span class="line">    healthy_threshold   = 5</span><br><span class="line">    matcher             = &quot;200&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  tags = merge(</span><br><span class="line">    var.tags</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  depends_on = [</span><br><span class="line">    aws_lb.jenkins_master</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ALB 的 443 入口直接转发到上面的 target group. 这里必须为其指定域名证书  </span><br><span class="line">resource &quot;aws_lb_listener&quot; &quot;jenkins_master&quot; &#123;</span><br><span class="line">  load_balancer_arn = aws_lb.jenkins_master.arn</span><br><span class="line">  port              = 443</span><br><span class="line">  protocol          = &quot;HTTPS&quot;</span><br><span class="line">  certificate_arn   = data.aws_acm_certificate.jenkins.arn</span><br><span class="line">  default_action &#123;</span><br><span class="line">    target_group_arn = aws_lb_target_group.ecs_jenkins_master.arn</span><br><span class="line">    type             = &quot;forward&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  tags = merge(</span><br><span class="line">    var.tags</span><br><span class="line">  )</span><br><span class="line">  depends_on = [</span><br><span class="line">    aws_lb.jenkins_master</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 80 301 重定向到 443 端口</span><br><span class="line">resource &quot;aws_lb_listener&quot; &quot;redirect_to_443&quot; &#123;</span><br><span class="line">  load_balancer_arn = aws_lb.jenkins_master.arn</span><br><span class="line">  port              = &quot;80&quot;</span><br><span class="line">  protocol          = &quot;HTTP&quot;</span><br><span class="line"></span><br><span class="line">  default_action &#123;</span><br><span class="line">    type = &quot;redirect&quot;</span><br><span class="line"></span><br><span class="line">    redirect &#123;</span><br><span class="line">      port        = &quot;443&quot;</span><br><span class="line">      protocol    = &quot;HTTPS&quot;</span><br><span class="line">      status_code = &quot;HTTP_301&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  tags = merge(</span><br><span class="line">    var.tags</span><br><span class="line">  )</span><br><span class="line">  depends_on = [</span><br><span class="line">    aws_lb.jenkins_master</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 如果不需要https，那可以不配置域名证书，将上面两个 listener 注释掉，启用下面这个 80 listener（不推荐）</span><br><span class="line"># if you don&#x27;t need to use HTTPS as the ingress: </span><br><span class="line">/* resource &quot;aws_lb_listener&quot; &quot;jenkins_master&quot; &#123;</span><br><span class="line">  load_balancer_arn = aws_lb.jenkins_master.arn</span><br><span class="line">  port              = 80</span><br><span class="line">  protocol          = &quot;HTTP&quot;</span><br><span class="line">  default_action &#123;</span><br><span class="line">    target_group_arn = aws_lb_target_group.ecs_jenkins_master.arn</span><br><span class="line">    type             = &quot;forward&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  tags = merge(</span><br><span class="line">    var.tags</span><br><span class="line">  )</span><br><span class="line">  depends_on = [</span><br><span class="line">    aws_lb.jenkins_master</span><br><span class="line">  ]</span><br><span class="line">&#125; */</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="ECS"><a href="#ECS" class="headerlink" title="ECS"></a>ECS</h3><p>　　一切前置要求的资源已经准备就绪，现在我们来到主角，创建 jenkins master。  </p>
<h4 id="创建-ECS-cluster"><a href="#创建-ECS-cluster" class="headerlink" title="创建 ECS cluster"></a>创建 ECS cluster</h4><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">resource <span class="string">&quot;aws_ecs_cluster&quot;</span> <span class="string">&quot;jenkins&quot;</span> &#123;</span><br><span class="line">  name = <span class="selector-tag">var</span><span class="selector-class">.ecs_cluster_name</span></span><br><span class="line">  tags = <span class="built_in">merge</span>(</span><br><span class="line">    <span class="selector-tag">var</span><span class="selector-class">.tags</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="创建-task-definition"><a href="#创建-task-definition" class="headerlink" title="创建 task-definition"></a>创建 task-definition</h4><p>　　这个可以类比理解为 k8s 中的 deployment 资源，编排容器。可以看到，我们在此为容器指定了 NFS volume， 容器端口以及健康检查等：   </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">resource &quot;aws_ecs_task_definition&quot; &quot;jenkins_master&quot; &#123;</span><br><span class="line">  family             = var.ecs_task_definitions_name</span><br><span class="line">  task_role_arn      = aws_iam_role.jenkins_ecs_role.arn</span><br><span class="line">  execution_role_arn = aws_iam_role.jenkins_ecs_role.arn</span><br><span class="line">  network_mode       = &quot;awsvpc&quot;</span><br><span class="line">  requires_compatibilities = [</span><br><span class="line">    &quot;FARGATE&quot;</span><br><span class="line">  ]</span><br><span class="line">  cpu    = var.jenkins_master_cpu_size</span><br><span class="line">  memory = var.jenkins_master_memory_size</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  volume &#123;</span><br><span class="line">    name = &quot;jenkins_home&quot;</span><br><span class="line"></span><br><span class="line">    # use efs directly, this way must be run container as root user. </span><br><span class="line">    # ref: https://stackoverflow.com/questions/61967965/how-to-run-nonroot-user-in-ecs  </span><br><span class="line">    /* efs_volume_configuration &#123;</span><br><span class="line">      file_system_id = var.efs_id</span><br><span class="line">      root_directory = &quot;/&quot;</span><br><span class="line">    &#125; */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # use efs access point.</span><br><span class="line">    efs_volume_configuration &#123;</span><br><span class="line">      file_system_id          = aws_efs_file_system.jenkins_ecs.id</span><br><span class="line">      transit_encryption      = &quot;ENABLED&quot;</span><br><span class="line">      transit_encryption_port = 2999</span><br><span class="line">      root_directory          = &quot;/&quot;</span><br><span class="line">      authorization_config &#123;</span><br><span class="line">        access_point_id = aws_efs_access_point.jenkins_master.id</span><br><span class="line">        iam             = &quot;ENABLED&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  container_definitions = jsonencode(</span><br><span class="line">    [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;name&quot; : &quot;jenkins-master&quot;,</span><br><span class="line">        &quot;image&quot; : var.jenkins_master_image,</span><br><span class="line">        &quot;cpu&quot; : var.jenkins_master_cpu_size,</span><br><span class="line">        &quot;memory&quot; : var.jenkins_master_memory_size,</span><br><span class="line">        &quot;portMappings&quot; : [</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;containerPort&quot; : 8080,</span><br><span class="line">            &quot;hostPort&quot; : 8080,</span><br><span class="line">            &quot;protocol&quot; : &quot;tcp&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;containerPort&quot; : 50000,</span><br><span class="line">            &quot;hostPort&quot; : 50000,</span><br><span class="line">            &quot;protocol&quot; : &quot;tcp&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;essential&quot; : true,</span><br><span class="line">        &quot;environment&quot; : [],</span><br><span class="line">        &quot;mountPoints&quot; : [</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;sourceVolume&quot; : &quot;jenkins_home&quot;,</span><br><span class="line">            &quot;containerPath&quot; : &quot;/var/jenkins_home&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;logConfiguration&quot; : &#123;</span><br><span class="line">          &quot;logDriver&quot; : &quot;awslogs&quot;,</span><br><span class="line">          &quot;options&quot; : &#123;</span><br><span class="line">            &quot;awslogs-group&quot; : &quot;/aws/ecs/$&#123;var.ecs_cluster_name&#125;/$&#123;var.ecs_service_name&#125;&quot;</span><br><span class="line">            &quot;awslogs-region&quot; : var.region,</span><br><span class="line">            &quot;awslogs-stream-prefix&quot; : var.ecs_service_name</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;healthCheck&quot; : &#123;</span><br><span class="line">          &quot;command&quot; : [</span><br><span class="line">            &quot;CMD-SHELL&quot;,</span><br><span class="line">            &quot;curl -f http://localhost:8080/login || exit 1&quot;</span><br><span class="line">          ],</span><br><span class="line">          &quot;interval&quot; : 30,</span><br><span class="line">          &quot;timeout&quot; : 5,</span><br><span class="line">          &quot;retries&quot; : 3,</span><br><span class="line">          &quot;startPeriod&quot; : 120</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  )</span><br><span class="line">  tags = merge(</span><br><span class="line">    var.tags</span><br><span class="line">  )</span><br><span class="line">  depends_on = [</span><br><span class="line">    aws_ecs_cluster.jenkins</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="创建服务发现"><a href="#创建服务发现" class="headerlink" title="创建服务发现"></a>创建服务发现</h4><p>　　ECS 服务间的调用不能像 k8s 内部一样直接使用 FQDN 来访问，那当我们需要相互调用的时候总不能一直走公网吧。为此，AWS 为我们提供了服务发现，每个 service discovery namespace 可以创建一个私有的 DNS 服务，并通过指定 service discovery service 指定为哪些 ECS service 自动创建 DNS 解析。<br>　　这个服务发现自动注册的过程大致为： ECS service（类比为 k8s 的 deployment 资源）会根据 task-definition 拉起 ECS task（类比为 k8s 的 pod 资源），ECS service 中指定 service discovery service 可以类似在 k8s 中创建 service。 service discovery 会为 ecs task 的 IP 自动创建 DNS 记录，这样我们就能通过固定的 FQDN 来访问 ECS service 了。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 这里会为我们创建一个 private host zoom，域为 ecs.local  </span><br><span class="line">resource &quot;aws_service_discovery_private_dns_namespace&quot; &quot;ecs&quot; &#123;</span><br><span class="line">  name        = &quot;ecs.local&quot;</span><br><span class="line">  description = &quot;ecs service discovery dns ns&quot;</span><br><span class="line">  vpc         = module.vpc.vpc_id</span><br><span class="line">  tags = merge(</span><br><span class="line">    var.tags</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 这里创建 service discovery service 供后面的 ecs service 注册</span><br><span class="line">resource &quot;aws_service_discovery_service&quot; &quot;jenkins_master&quot; &#123;</span><br><span class="line">  name = &quot;jenkins-master&quot;</span><br><span class="line"></span><br><span class="line">  dns_config &#123;</span><br><span class="line">    namespace_id = aws_service_discovery_private_dns_namespace.ecs.id</span><br><span class="line"></span><br><span class="line">    dns_records &#123;</span><br><span class="line">      ttl  = 10</span><br><span class="line">      type = &quot;A&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    routing_policy = &quot;MULTIVALUE&quot;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  health_check_custom_config &#123;</span><br><span class="line">    failure_threshold = 1</span><br><span class="line">  &#125;</span><br><span class="line">  tags = merge(</span><br><span class="line">    var.tags</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  depends_on = [</span><br><span class="line">    aws_service_discovery_private_dns_namespace.ecs</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="创建-ECS-service"><a href="#创建-ECS-service" class="headerlink" title="创建 ECS service"></a>创建 ECS service</h4><p>　　ECS 可以看作把 k8s 的 deployment 与 service 资源做了封装。 ECS service 会根据指定的 task-definition 创建容器，并这些容器定义网络资源。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">resource &quot;aws_ecs_service&quot; &quot;jenkins_master&quot; &#123;</span><br><span class="line">  name                               = var.ecs_service_name</span><br><span class="line">  cluster                            = aws_ecs_cluster.jenkins.id</span><br><span class="line">  desired_count                      = 1</span><br><span class="line">  enable_execute_command             = true</span><br><span class="line">  platform_version                   = &quot;LATEST&quot;</span><br><span class="line">  task_definition                    = aws_ecs_task_definition.jenkins_master.arn</span><br><span class="line">  deployment_maximum_percent         = 200</span><br><span class="line">  deployment_minimum_healthy_percent = 100</span><br><span class="line">  launch_type                        = &quot;FARGATE&quot;</span><br><span class="line">  # iam_role                           = var.ecs_task_role_arn </span><br><span class="line">  network_configuration &#123;</span><br><span class="line">    assign_public_ip = false</span><br><span class="line">    security_groups = [</span><br><span class="line">      aws_security_group.ecs_jenkins_service_sg.id</span><br><span class="line">    ]</span><br><span class="line">    subnets = tolist(module.vpc.private_subnets)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"># 指定负载均衡器，该 service 的容器会自动注册到负载均衡器的指定 target group 中，因此前面 ALB 部分的健康检查至关重要。  </span><br><span class="line">  load_balancer &#123;</span><br><span class="line">    target_group_arn = aws_lb_target_group.ecs_jenkins_master.arn</span><br><span class="line">    container_name   = &quot;jenkins-master&quot;</span><br><span class="line">    container_port   = 8080</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"># 服务注册，此 ECS service 会自动注册到该 service discovery service，自动在 private host zoom 中为这些容器创建 A 记录。    </span><br><span class="line">  service_registries &#123;</span><br><span class="line">    registry_arn = aws_service_discovery_service.jenkins_master.arn</span><br><span class="line">  &#125;</span><br><span class="line">  scheduling_strategy = &quot;REPLICA&quot;</span><br><span class="line"></span><br><span class="line">  tags = merge(</span><br><span class="line">    var.tags</span><br><span class="line">  )</span><br><span class="line">  depends_on = [</span><br><span class="line">    aws_ecs_task_definition.jenkins_master,</span><br><span class="line">    aws_lb_target_group.ecs_jenkins_master,</span><br><span class="line">    aws_efs_file_system.jenkins_ecs</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="使用-Terraform-创建资源"><a href="#使用-Terraform-创建资源" class="headerlink" title="使用 Terraform 创建资源"></a>使用 Terraform 创建资源</h3><p>　　如何为终端配置 terraform 所需的  aws 凭据这里不在赘述，请移步： <a href="/post/terraformer-import-aws-resource.html#%E9%85%8D%E7%BD%AEAWS-profile">配置AWS profile
</a>  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/AlliotTech/terraform-aws-ecs-jenkins  </span><br><span class="line">cd terraform-aws-ecs-jenkins </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数调整： 修改 variables/prod.tfvars</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建资源</span></span><br><span class="line">terraform apply -var-file=variables/prod.tfvars</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">等待plan结束后输入 <span class="built_in">yes</span> 回车确认创建资源，这将花费大约两三分钟</span>  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">销毁资源，此操作会销毁本次terraform创建的所有资源</span>    </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">terraform destroy -var-file=variables/prod.tfvars</span></span><br></pre></td></tr></table></figure>

<h3 id="配置-jenkins"><a href="#配置-jenkins" class="headerlink" title="配置 jenkins"></a>配置 jenkins</h3><p>　　在一切就绪后，我们可以从 cloudwatch 中找到 jenkins 初始化所需要的密码，访问前面 <code>terraform appy</code> 后输出的 <code>alb_dns_name</code> 来初始化 Jenkins，这里不再多赘述。  </p>
<p>　　我们想要使用 ECS fargate 作为我们的构建节点，需要用到 Jenkins 的 <a href="https://plugins.jenkins.io/amazon-ecs">Amazon Elastic Container Service (ECS) &#x2F; Fargate</a> 插件。在 Jenkins 的插件中心安装完成后，我们进入到 Jenkins 的 “节点管理”，在左侧选择 ”Configure cloud“<br>具体配置如图：<br><img data-src="https://static.iots.vip/terraform-aws-ecs-jenkins-02.png" alt="terraform-aws-ecs-jenkins-02"><br><img data-src="https://static.iots.vip/terraform-aws-ecs-jenkins-03.png" alt="terraform-aws-ecs-jenkins-03"><br><img data-src="https://static.iots.vip/terraform-aws-ecs-jenkins-04.png" alt="terraform-aws-ecs-jenkins-04"><br><img data-src="https://static.iots.vip/terraform-aws-ecs-jenkins-05.png" alt="terraform-aws-ecs-jenkins-05"><br><img data-src="https://static.iots.vip/terraform-aws-ecs-jenkins-06.png" alt="terraform-aws-ecs-jenkins-06"><br><img data-src="https://static.iots.vip/terraform-aws-ecs-jenkins-07.png" alt="terraform-aws-ecs-jenkins-07">  </p>
<h3 id="测试流水线任务"><a href="#测试流水线任务" class="headerlink" title="测试流水线任务"></a>测试流水线任务</h3><p>　　我们创建一个 job， 其 pipline 为：  </p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent &#123;</span><br><span class="line">        label  <span class="string">&#x27;ecs-fargate&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&#x27;Hello&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">&#x27;Hello World in agent&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>　　执行构建该 Job 后，我们去到 AWS ECS console，可以看到 Jenkins 自动为我们创建了 Jenkins agent 的 task-definition，并且根据 task-definition 创建了 task 来执行我们的构建任务，当构建任务完成后，便会自动销毁该 task。至此，我们的 Jenkins 体系就搭建完成了。  </p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-exec.html">https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-exec.html</a><br><a href="https://docs.aws.amazon.com/zh_tw/AmazonECS/latest/developerguide/ecs-exec.html">https://docs.aws.amazon.com/zh_tw/AmazonECS/latest/developerguide/ecs-exec.html</a><br><a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_HealthCheck.html">https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_HealthCheck.html</a><br><a href="https://hands-on.cloud/managing-amazon-ecs-using-terraform">https://hands-on.cloud/managing-amazon-ecs-using-terraform</a><br><a href="https://faun.pub/accessing-efs-as-a-non-root-user-inside-ecs-container-using-efs-access-point-74bcd9eff04f">https://faun.pub/accessing-efs-as-a-non-root-user-inside-ecs-container-using-efs-access-point-74bcd9eff04f</a><br><a href="https://stackoverflow.com/questions/69488032/terraform-how-to-mount-efs-access-point-to-ec2">https://stackoverflow.com/questions/69488032/terraform-how-to-mount-efs-access-point-to-ec2</a><br><a href="https://tomgregory.com/jenkins-jobs-in-aws-ecs-with-slave-agents/">https://tomgregory.com/jenkins-jobs-in-aws-ecs-with-slave-agents/</a><br><a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_HealthCheck.html">https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_HealthCheck.html</a>  </p>
]]></content>
      <tags>
        <tag>IaC</tag>
        <tag>Terraform</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器性能测试系列（三）：fio磁盘性能测试</title>
    <url>//post/vps-assessment3.html</url>
    <content><![CDATA[<p>fio是一个非常灵活的I&#x2F;O测试工具,FIO是测试IOPS的非常好的工具，用来对硬件进行压力测试和验证，支持13种不同的I&#x2F;O引擎，支持多线程或进程模拟等I&#x2F;O操作来进行压力测试。<br>包括:sync,mmap, libaio, posixaio, SG v3, splice, null, network, syslet, guasi, solarisaio 等等。  <span id="more"></span>  </p>
<p>官网：<a href="http://freecode.com/projects/fio">http://freecode.com/projects/fio</a>    </p>
<h3 id="IO性能测试指标"><a href="#IO性能测试指标" class="headerlink" title="IO性能测试指标"></a>IO性能测试指标</h3><p>顺序读写（吞吐量，常用单位为MB&#x2F;s）：文件在硬盘上存储位置是连续的，吞吐量高，适用于大文件拷贝。<br>4K随机读写（IOPS，常用单位为次）：在硬盘上随机位置读写数据，每次4KB，适用于OS、软件运行以及数据库等IO密集度较高的应用。  </p>
<h3 id="常用命令行参数及说明"><a href="#常用命令行参数及说明" class="headerlink" title="常用命令行参数及说明"></a>常用命令行参数及说明</h3><p><img data-src="https://static.iots.vip/2016/11/201611029993_269.png" alt="参数及说明">  </p>
<h3 id="开始测试"><a href="#开始测试" class="headerlink" title="开始测试"></a>开始测试</h3><h4 id="安装fio"><a href="#安装fio" class="headerlink" title="安装fio"></a>安装fio</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install fio</span><br></pre></td></tr></table></figure>
<h4 id="挂载数据盘"><a href="#挂载数据盘" class="headerlink" title="挂载数据盘"></a>挂载数据盘</h4><p>挂载数据盘&#x2F;dev&#x2F;vdc1到&#x2F;data&#x2F;test（视服务器数据盘标识而定，本文以比格云为例）<br>（注：这里均以数据盘裸设备(&#x2F;dev&#x2F;vdc1)进行测试，测试值更为准确和稳定，但 <strong>裸设备测试会造成数据盘文件系统损坏!!!切记切记!!!</strong> ⚠️，请谨慎操作并注意备份数据，同时注释&#x2F;etc&#x2F;fstab 文件中&#x2F;dev&#x2F;vdc1挂载点，防止由于数据盘文件系统损坏无法挂载导致OS无法重启动，也可以使用文件进行测试，即指定-filename&#x3D;&#x2F;data&#x2F;test，如以文件进行测试，会受文件系统的影响，测试结果会有偏差和抖动，请知悉。）来自@<a href="http://www.biggeryun.com/help-27-97.html">比格云官方文档</a>（官方文档有部分错误已在此文修改）  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切记，使用裸设备测试会造成数据盘文件系统损坏！！！  下面的命令中/dev/vdc1等，请保证这些设备中不存在数据，数据无价！</span></span><br><span class="line"><span class="comment">#测试顺序写吞吐量：</span></span><br><span class="line">fio -direct=1 -iodepth=128 -filename=/dev/vdc1 -rw=write -ioengine=libaio -bs=512k -size=10G -numjobs=64 -runtime=1000 -group_reporting -name=write.throughput -output=write.throughput</span><br><span class="line"></span><br><span class="line"><span class="comment">#测试顺序读吞吐量：</span></span><br><span class="line">fio -direct=1 -iodepth=128 -filename=/dev/vdc1 -rw=<span class="built_in">read</span> -ioengine=libaio -bs=512k -size=10G -numjobs=64 -runtime=1000 -group_reporting -name=read.throughput -output=read.throughput</span><br><span class="line"></span><br><span class="line"><span class="comment">#测试随机读IOPS：</span></span><br><span class="line">fio -direct=1 -iodepth=128 -filename=/dev/vdc1 -rw=randread -ioengine=libaio -bs=4k -size=10G -numjobs=64 -runtime=1000 -group_reporting -name=randread.iops -output=randread.iops</span><br><span class="line"></span><br><span class="line"><span class="comment">#测试随机写IOPS：</span></span><br><span class="line">fio -direct=1 -iodepth=128 -filename=/dev/vdc1 -rw=randwrite -ioengine=libaio -bs=4k -size=10G -numjobs=64 -runtime=1000 -group_reporting -name=randwrite.iops -output=randwrite.iops</span><br></pre></td></tr></table></figure>
<p><img data-src="https://static.iots.vip/2016/11/201611021421_4915.png" alt="测试完成截图">  </p>
<h4 id="生成报表"><a href="#生成报表" class="headerlink" title="生成报表"></a>生成报表</h4><p>在当前目录下的：<br>write.throughput<br>read.throughput<br>randread.iops<br>randwrite.iops  </p>
]]></content>
      <categories>
        <category>服务器性能测试系列</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>系列</tag>
      </tags>
  </entry>
  <entry>
    <title>本地模拟CNAME解析</title>
    <url>//post/cname-record-simulate.html</url>
    <content><![CDATA[<p>　　众所周知，我们可以通过修改本地 hosts 文件来定义一个域名的指向，这个过程我们可以简单的理解为在本机创建了一个优先级很高的 DNS A 记录，实现了某种程度上的域名劫持， 利用这种特性我们可以实现诸如广告屏蔽、本地测试、别名等需求，但 hosts 机制仅仅能定义域名与 IP 对应关系， 并不能模拟其他的 Record 类型， 比如 CNAME 记录。  <span id="more"></span>  </p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>　　由于近期某个应用在某些地区的连通性较差，于是考虑临时对其使用 CDN， 在上线之前，我们需要测试并调整 CDN 回源、缓存策略等各项配置，由于不是新上线的域名，这个域名是有用户在使用的，所以我们不能简单粗暴的将 DNS 记录直接切到 CDN 的 CNAME 域名， 因此我们只能考虑在本地搭建一个 DNS 服务，用于模拟 CNAME。</p>
<h3 id="安装-DNS-服务"><a href="#安装-DNS-服务" class="headerlink" title="安装 DNS 服务"></a>安装 DNS 服务</h3><p>　　本机为 macOS，使用 homebrew 来安装 dnsmasq 搭建 DNS 服务器， 其他系统配置文件路径会有所不同。  </p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 dnsmasq </span></span><br><span class="line">brew install dnsmasq  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份默认配置文件</span></span><br><span class="line">cp <span class="regexp">/opt/</span>homebrew<span class="regexp">/etc/</span>dnsmasq.conf <span class="regexp">/opt/</span>homebrew<span class="regexp">/etc/</span>dnsmasq.conf.bak</span><br></pre></td></tr></table></figure>

<p>默认的 dnsmasq 配置文件很长，不过大多数配置都注释掉了，可以根据注释来配置我们需要的，这里仅配置一下我们需要关注的地方:  </p>
<p><code>vim /opt/homebrew/etc/dnsmasq.conf</code>: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 定义一下上游的 DNS 服务地址</span><br><span class="line">resolv-file=/Users/alliot/dns.conf</span><br><span class="line"># 按照 resolv-file 中列出的顺序查询上游 DNS 服务器</span><br><span class="line">strict-order</span><br><span class="line"></span><br><span class="line">user=root</span><br><span class="line">listen-address=127.0.0.1</span><br><span class="line"></span><br><span class="line"># 从指定的文件读取额外的主机名映射，也就是 hosts </span><br><span class="line">addn-hosts=/etc/banner_add_hosts</span><br><span class="line"></span><br><span class="line"># 创建一条CNAME记录，www.iots.vip会CNAME到alliot.blog.net，多条记录可以在配置文件中写多条配置  </span><br><span class="line">cname=www.iots.vip,alliot.blog.net</span><br></pre></td></tr></table></figure>
<p>创建一下 dns.conf 指定上游的 DNS:<br><code>vim /Users/alliot/dns.conf</code>  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nameserver 114.114.114.114</span><br><span class="line">nameserver 223.5.5.5</span><br></pre></td></tr></table></figure>
<p>之后重启服务:  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里由于我们上面启动dnsmasq的用户是root，所以必须加sudo</span>  </span><br><span class="line">sudo brew services restart  dnsmasq</span><br></pre></td></tr></table></figure>


<h3 id="配置本机DNS"><a href="#配置本机DNS" class="headerlink" title="配置本机DNS"></a>配置本机DNS</h3><p>假设我们 macOS 当前使用的 Wi-Fi 网络，我们可以直接使用命令行配置 Wi-Fi 网卡的 DNS 服务器:  </p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取当前的 DNS 配置</span></span><br><span class="line"><span class="attribute">networksetup</span> -getdnsservers Wi-Fi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改DNS为127.0.0.1，即我们的dnsmasq服务</span></span><br><span class="line">networksetup -setdnsservers Wi-Fi <span class="number">127.0.0.1</span></span><br><span class="line"></span><br><span class="line">networksetup -getdnsservers Wi-Fi</span><br></pre></td></tr></table></figure>
<p>当然你也可以通过界面来配置：<br>依次点击 “系统偏好设置 &gt; 网络 &gt; 高级 &gt; DNS”，选中 “DNS” 配置，删除现有的公共 DNS，填入 <code>127.0.0.1</code> 保存即可。  </p>
<p>至此我们便可以完成了在本地模拟 CNAME 解析了，当我们访问 <code>www.iots.vip</code> 时，便 CNAME 到了 <code>alliot.blog.net</code>。  </p>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>我们可以使用 <code>dig</code> 来指定 DNS 服务器来验证一下：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先使用114的DNS解析来看一下现网的DNS记录:</span> </span><br><span class="line">dig +short www.iots.vip @114.114.114.114  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里会返回我们现网的DNS记录</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再使用本地我们的dnsmasq来解析一下：</span> </span><br><span class="line">dig +short www.iots.vip @127.0.0.1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再直接使用当前系统配置的DNS服务看看是否生效:</span> </span><br><span class="line">dig +short www.iots.vip </span><br></pre></td></tr></table></figure>


<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>原理是 DNS 的工作方式是分层的，就像一个有许多层次的目录或者电话簿。<br>我们这里将本机 DNS 指定为了我们启动的 dnsmasq， dnsmasq 指定了 114.114.114.114 为上游 DNS， 那么当我们访问一个网站时，DNS 解析路径就为 hosts -&gt; dnsmasq -&gt; 114DNS.<br><code>www.iots.vip</code> 在 dnsmasq 时找到了一个 CNAME 记录，便不会再往 114DNS 去查询，达到了自定义 CNAME 记录的目的。  </p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器性能测试系列（二）：Netperf网络性能测试</title>
    <url>//post/vps-assessment2.html</url>
    <content><![CDATA[<p>Netperf是一种网络性能的测量工具，主要针对基于TCP或UDP的传输。Netperf根据应用的不同，可以进行不同模式的网络性能测试，即批量数据传输（bulk data transfer）模式和请求&#x2F;应答（request&#x2F;reponse）模式。Netperf测试结果所反映的是一个系统能够以多快的速度向另外一个系统发送数据，以及另外一个系统能够以多块的速度接收数据。Netperf工具以client&#x2F;server方式工作。server端是netserver，用来侦听来自client端的连接，client端是netperf，用来向server发起网络测试。在client与server之间，首先建立一个控制连接，传递有关测试配置的信息，以及测试的结果；在控制连接建立并传递了测试配置信息以后，client与server之间会再建立一个测试连接，用来来回传递着特殊的流量模式，以测试网络的性能。<span id="more"></span><br>安装与测试分服务端与客户端，均安装Netperf：  </p>
<h2 id="获取源码"><a href="#获取源码" class="headerlink" title="获取源码"></a>获取源码</h2><p>执行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget ftp://ftp.netperf.org/netperf/netperf-2.7.0.tar.gz</span><br></pre></td></tr></table></figure>
<h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><p>执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> netperf-2.7.0</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure>
<h2 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h2><p>运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netserver</span><br></pre></td></tr></table></figure>
<p><img data-src="https://static.iots.vip/2016/11/201611025554_9024.png" alt="netsever">  </p>
<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netperf -H host -l 60 -t TCP_STREAM</span><br></pre></td></tr></table></figure>
<p><img data-src="https://static.iots.vip/2016/11/201611027665_3776.png" alt="netperf"></p>
<h2 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h2><p>如下:<br><img data-src="https://static.iots.vip/2016/11/201611021801_6549.png" alt="结果分析"> </p>
<hr>
<h2 id="命令参数拓展："><a href="#命令参数拓展：" class="headerlink" title="命令参数拓展："></a>命令参数拓展：</h2><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-H host:  指定远端运行netserver的server ip地址</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-l testlen: 指定测试的时间长度（秒）</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-t testname: 指定进行的测试类型，包括TCP_STREAM, UDP_STREAM, TCP_RR,UDP_RR, TCP_CRR</span></span><br></pre></td></tr></table></figure>
<p>测试类型：  </p>
<h3 id="TCP-STREAM"><a href="#TCP-STREAM" class="headerlink" title="TCP_STREAM"></a>TCP_STREAM</h3><p>测试TCP流式通讯时的网络带宽，这是netperf的default测试类型。<br>测试结果表明，TCP带宽  </p>
<h3 id="UDP-STREAM"><a href="#UDP-STREAM" class="headerlink" title="UDP_STREAM"></a>UDP_STREAM</h3><p>测试UDP流式通讯时的网络带宽。值得注意的是，UDP测试时，需要确保发送端数据缓冲区不能大于接收端缓冲区，否则肯定会出现数据包丢失，造成测试结果不准确。-m参数用来指定发送端缓冲区大小，-M参数用来指定接收端缓冲区大小。<br>第一行结果是本地的发送统计，也就是本地发送UDP的吞吐量，第二行是server端的接收统计。  </p>
<h3 id="TCP-RR"><a href="#TCP-RR" class="headerlink" title="TCP_RR"></a>TCP_RR</h3><p>在一次TCP连接中，client端和server端的transaction次数。<br>测试结果中，第一行是本地统计结果，第二行是远端统计结果。  </p>
<h3 id="UDP-RR"><a href="#UDP-RR" class="headerlink" title="UDP_RR"></a>UDP_RR</h3><p>在基于UDP的连接中，client端和server端的transaction次数。<br>同样地，测试结果中，第一二行分别是本地和远端统计结果。  </p>
<hr>
<h2 id="常见问题解决方法"><a href="#常见问题解决方法" class="headerlink" title="常见问题解决方法"></a>常见问题解决方法</h2><p>1、提示：  </p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">establish</span> control: are you sure there is a netserver listening <span class="literal">on</span> *.*.*.* at port <span class="number">12865</span>?</span><br><span class="line"><span class="attribute">establish_control</span> could not establish the control connection from <span class="number">0.0.0.0</span> port <span class="number">0</span> address</span><br></pre></td></tr></table></figure>
<p>这是由于服务器端防火墙未放行导致的，临时禁用一下防火墙即可，执行:  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service iptables stop</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>服务器性能测试系列</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>网络</tag>
        <tag>系列</tag>
      </tags>
  </entry>
  <entry>
    <title>在线重建MySQL主从同步</title>
    <url>//post/rebuild-mysql-master-slave-replication.html</url>
    <content><![CDATA[<p>&emsp;&emsp;一套内部业务系统的主从同步库出现了同步异常，需要在不锁表的情况下，完成在线重建主从同步，本文简单记录一下操作过程。<span id="more"></span></p>
<h3 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h3><p>&emsp;&emsp;监控报从库 IO 线程异常，进入从库后查看从库状态：  </p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">sql&gt; <span class="built_in">show</span> slave <span class="built_in">status</span>\G</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>看到 <code>Slave_SQL_Running</code> 状态为 No，错误信息为如下类似：<br><code>Could not execute Update_rows event on table livedb.xxl_job_info; Unknown error 1032, Error_code</code><br>这种情况一般是从库与主库的这张表不一致导致的。采取在从库导入主库数据后重建主从同步来解决。  </p>
<h3 id="同步数据"><a href="#同步数据" class="headerlink" title="同步数据"></a>同步数据</h3><p>&emsp;&emsp;全新的主从同步请参考先前的文章： <a href="/post/mysql-master-slave-replication.html">MySQL 主从同步配置 | Alliot’s blog</a><br>&emsp;&emsp;主从同步开始前，需要将现有的主库数据导入到从库中，之后再启用主从同步线程。<br>&emsp;&emsp;这里通过 <code>mysqldump</code> 来导出主库数据，在主库执行：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导出所有库</span></span><br><span class="line">mysqldump -uroot -p  --single-transaction --no-autocommit --master-data=2 -A &gt; master.sql</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">仅导出 livedb 库，在前面的现象里可以看出，我们只有livedb这个库有同步错误，因此为了节省时间，仅导出该库</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里注意 mysqldump 后面带的几个参数不要漏。--master-data=2 配合 --single-transaction 可以避免锁表</span></span><br><span class="line">mysqldump -uroot -p  --single-transaction --no-autocommit --master-data=2  livedb &gt; livedb.sql</span><br></pre></td></tr></table></figure>

<p>将 sql 文件导入到从库中之前需要先停止同步，在从库中执行：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sql</span><span class="operator">&gt;</span> reset master;</span><br><span class="line"><span class="keyword">sql</span><span class="operator">&gt;</span> STOP SLAVE;</span><br></pre></td></tr></table></figure>
<p>之后导入前面的 sql 到从库中：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p livedb&lt; livedb.sql</span><br></pre></td></tr></table></figure>

<h3 id="重建主从"><a href="#重建主从" class="headerlink" title="重建主从"></a>重建主从</h3><p>&emsp;&emsp;启动主从同步需要用到<code>master_log_file</code> 与 <code>master_log_pos</code> 两个参数的值，这里我们可以直接通过前面的 sql 文件来得到：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">less livedb.sql</span><br></pre></td></tr></table></figure>
<p>可以看到如下：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- MySQL dump 10.13  Distrib 5.7.35, for Linux (x86_64)</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- Host: localhost    Database: livedb</span></span><br><span class="line"><span class="comment">-- ------------------------------------------------------</span></span><br><span class="line"><span class="comment">-- Server version       5.7.35-log</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET NAMES utf8 */</span>;</span><br><span class="line"><span class="comment">/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */</span>;</span><br><span class="line"><span class="comment">/*!40103 SET TIME_ZONE=&#x27;+00:00&#x27; */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=&#x27;NO_AUTO_VALUE_ON_ZERO&#x27; */</span>;</span><br><span class="line"><span class="comment">/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- Position to start replication or point-in-time recovery from</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- CHANGE MASTER TO MASTER_LOG_FILE=&#x27;mysql-bin.000003&#x27;, MASTER_LOG_POS=319017483;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--</span></span><br></pre></td></tr></table></figure>
<p>这样我们就得到了 <code>MASTER_LOG_FILE=&#39;mysql-bin.000003&#39;, MASTER_LOG_POS=319017483;</code><br>之后就可以在从库重新启动主从同步了：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sql</span><span class="operator">&gt;</span> reset slave <span class="keyword">all</span>;</span><br><span class="line"><span class="keyword">sql</span><span class="operator">&gt;</span> change master <span class="keyword">to</span>  master_host<span class="operator">=</span><span class="string">&#x27;172.18.0.4&#x27;</span>, master_user<span class="operator">=</span><span class="string">&#x27;copy&#x27;</span>, master_password<span class="operator">=</span><span class="string">&#x27;123456&#x27;</span>, master_port<span class="operator">=</span><span class="number">3306</span>,master_log_file<span class="operator">=</span><span class="string">&#x27;mysql-bin.000003&#x27;</span>,master_log_pos<span class="operator">=</span><span class="number">319017483</span>;</span><br><span class="line"><span class="keyword">sql</span><span class="operator">&gt;</span> <span class="keyword">start</span> slave;</span><br></pre></td></tr></table></figure>
<p>再查看从库的状态就已经正常了：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sql</span><span class="operator">&gt;</span> <span class="keyword">show</span> slave status\G</span><br><span class="line"><span class="keyword">show</span> slave status\G</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">               Slave_IO_State: Waiting <span class="keyword">for</span> master <span class="keyword">to</span> send event</span><br><span class="line">                  Master_Host: <span class="number">172.18</span><span class="number">.0</span><span class="number">.4</span></span><br><span class="line">                  Master_User: <span class="keyword">copy</span></span><br><span class="line">                  Master_Port: <span class="number">3306</span></span><br><span class="line">                Connect_Retry: <span class="number">60</span></span><br><span class="line">              Master_Log_File: mysql<span class="operator">-</span>bin<span class="number">.000003</span></span><br><span class="line">          Read_Master_Log_Pos: <span class="number">319074481</span></span><br><span class="line">               Relay_Log_File: db02<span class="operator">-</span>relay<span class="operator">-</span>bin<span class="number">.000002</span></span><br><span class="line">                Relay_Log_Pos: <span class="number">57318</span></span><br><span class="line">        Relay_Master_Log_File: mysql<span class="operator">-</span>bin<span class="number">.000003</span></span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB: livedb</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>浅浅的调教一下国产智障电视</title>
    <url>//post/fxxk-android-tv.html</url>
    <content><![CDATA[<p>　　双十一给家里买了台电视——酷开M85（创维的子品牌），作为典型的国产品牌“智能电视”，本土特色自然少不了，包括但不限于各种广告满天飞、无法安装第三方应用、后台自动热更新越更越卡等。恰好年前回家早，浅浅的调教折腾一下它。<span id="more"></span>  </p>
<h3 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h3><p>设备型号： 酷开 M85，代码 7T873-P31<br>系统版本： 酷开系统 9.0.30626-306260  </p>
<h3 id="关闭开机广告"><a href="#关闭开机广告" class="headerlink" title="关闭开机广告"></a>关闭开机广告</h3><p>　　很多人都想着通过各种技术手段去去掉这个广告，殊不知大道至简，直接拨打售后电话 95105555，选择人工服务，告诉客服需要关闭广告，然后提供电视的序列号即可。  </p>
<h3 id="禁止热更新"><a href="#禁止热更新" class="headerlink" title="禁止热更新"></a>禁止热更新</h3><p>　　某些国产厂家为了保(qiang)护(jian)用户，都会贴(wu)心(chi)的通过远控来下发一些任务，比如热更新等。这里可以在路由器端利用 <code>hosts</code> 来屏蔽一些域名。由于各型号的路由器配置方式不同，所以仅提供 <code>hosts</code> 列表：   </p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0.0.1</span> update01.skyworth-cloud.com</span><br><span class="line"><span class="number">127.0.0.1</span> sky.fs.skysrt.com</span><br><span class="line"><span class="number">127.0.0.1</span> res.hoisin.coocaatv.com</span><br><span class="line"><span class="number">127.0.0.1</span> log.skysrt.com</span><br><span class="line"><span class="number">127.0.0.1</span> hoisin.coocaatv.com</span><br><span class="line"><span class="number">127.0.0.1</span> api.device.skysrt.com</span><br><span class="line"><span class="number">127.0.0.1</span> tvos.skysrt.com</span><br><span class="line"><span class="number">127.0.0.1</span> tc.skysrt.com</span><br><span class="line"><span class="number">127.0.0.1</span> status2.tvos.skysrt.com</span><br><span class="line"><span class="number">127.0.0.1</span> status.tvos.skysrt.com</span><br><span class="line"><span class="number">127.0.0.1</span> sky.tvos.skysrt.com</span><br><span class="line"><span class="number">127.0.0.1</span> push.tc.skysrt.com</span><br><span class="line"><span class="number">127.0.0.1</span> push.tvos.skysrt.com</span><br><span class="line"><span class="number">127.0.0.1</span> img.sky.fs.skysrt.com</span><br><span class="line"><span class="number">127.0.0.1</span> api.device.skysrt.com</span><br><span class="line"><span class="number">127.0.0.1</span> update01.skyworth-cloud.com</span><br><span class="line"><span class="number">127.0.0.1</span> sky.fs.skysrt.com</span><br><span class="line"><span class="number">127.0.0.1</span> res.hoisin.coocaatv.com</span><br><span class="line"><span class="number">127.0.0.1</span> log.skysrt.com</span><br><span class="line"><span class="number">127.0.0.1</span> hoisin.coocaatv.com</span><br><span class="line"><span class="number">127.0.0.1</span> api.device.skysrt.com</span><br><span class="line"></span><br><span class="line"><span class="number">127.0.0.1</span> tvos.skysrt.com</span><br><span class="line"><span class="number">127.0.0.1</span> tc.skysrt.com</span><br><span class="line"><span class="number">127.0.0.1</span> status2.tvos.skysrt.com</span><br><span class="line"><span class="number">127.0.0.1</span> status.tvos.skysrt.com</span><br><span class="line"><span class="number">127.0.0.1</span> sky.tvos.skysrt.com</span><br><span class="line"><span class="number">127.0.0.1</span> push.tc.skysrt.com</span><br><span class="line"><span class="number">127.0.0.1</span> push.tvos.skysrt.com</span><br><span class="line"><span class="number">127.0.0.1</span> img.sky.fs.skysrt.com</span><br><span class="line"></span><br><span class="line"><span class="number">127.0.0.1</span> api.device.skysrt.com</span><br></pre></td></tr></table></figure>


<h3 id="卸载不需要的软件"><a href="#卸载不需要的软件" class="headerlink" title="卸载不需要的软件"></a>卸载不需要的软件</h3><p>　　按照习惯，安卓设备到手的第一步就是解 Bootloader，刷 Recovery， patch boot 芭啦芭啦，不过电视不比玩机佬手中的手机那么多资源，翻了一下网上，并没有找到这型号电视的相关资源，于是回到了 <code>adb</code> 的怀抱，虽然不够彻底，但胜在简单够用。  </p>
<h4 id="打开-ADB"><a href="#打开-ADB" class="headerlink" title="打开 ADB"></a>打开 ADB</h4><p>　　酷开的系统打开 ADB 的方法：<br>　　打开 “设置” —— “基本设置” —— “设备信息” 进入 “更多信息” 后，依次按遥控器的 “上上下下左右左右”， 进入工厂模式（可能需要几秒钟）。<br>之后进入“基本设置”，选择开启 ADB 即可。  </p>
<h4 id="禁用-删除不需要的软件"><a href="#禁用-删除不需要的软件" class="headerlink" title="禁用&#x2F;删除不需要的软件"></a>禁用&#x2F;删除不需要的软件</h4><p>　　以下操作需要电脑在同一局域网，同时安装了 ADB 环境，操作随意搜索网上就有，这里不再赘述。  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb connect [电视IP]:5555  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出包名</span></span><br><span class="line">adb shell pm list packages </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">禁用APP</span> </span><br><span class="line">adb pm disable-user [包名]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载APP，某些APP只能禁用不能卸载</span></span><br><span class="line">adb shell pm uninstall -k [包名]</span><br></pre></td></tr></table></figure>

<p>这里提供一下 Alliot 测试通过后的列表：  </p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"># 可以删除/禁用， 如果无法删除，直接禁用也可以  </span><br><span class="line">com.tianci.autoinstaller   </span><br><span class="line">com.tianci.ad</span><br><span class="line">com.tianci.de</span><br><span class="line">com.tianci.push</span><br><span class="line">com.tianci.user</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">com.coocaa.teampresent</span><br><span class="line">com.coocaa.aimanager       # 未知</span><br><span class="line">com.coocaa.teenmode        # 青少年模式</span><br><span class="line">com.coocaa.messageprovider # 消息推送</span><br><span class="line">com.coocaa.sky.ccap</span><br><span class="line"></span><br><span class="line">com.coocaa.sysreport       # 系统报告</span><br><span class="line">com.coocaa.playtvskill     # 玩机技巧</span><br><span class="line">com.coocaa.lifeassistant   # 生活助手 </span><br><span class="line">com.coocaa.educate         </span><br><span class="line">com.coocaa.emergencywarning # 应急广播  </span><br><span class="line">com.skyworthdigital.stb.dataprovider </span><br><span class="line">com.coocaa.os.customerservice  # 远程售后</span><br><span class="line">com.coocaa.guide        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##### 不要禁用  #########</span><br><span class="line">com.skyworth.tv.provider   # 侧边栏  </span><br><span class="line">com.coocaa.os.ccosservice  # 侧边栏 </span><br><span class="line">com.skyworth.tv            # 禁用后，无法打开工厂模式 无法打开设置里的图像设置 辅助与关怀 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#####  按需  ######</span><br><span class="line">com.tianci.<span class="keyword">system</span>   # 保修激活信息等  </span><br><span class="line">com.skyworth.skymarket # 自带的应用市场  </span><br><span class="line">com.tianci.appstore</span><br><span class="line"></span><br><span class="line"># 小维远场语音助手  </span><br><span class="line">com.skyworth.aimanager</span><br><span class="line">com.skyworth.angel.voice</span><br></pre></td></tr></table></figure>
<p>　　比较恶心的是，创维&#x2F;酷开的启动器包名写在了系统里，如果强行 ADB 禁用或删除会导致卡开机屏，想替换默认启动器需要改包刷机，有些太折腾，可以参考 <a href="https://www.right.com.cn/FORUM/thread-8274149-1-1.html">恩山的大佬</a>。  </p>
<h3 id="第三方APP"><a href="#第三方APP" class="headerlink" title="第三方APP"></a>第三方APP</h3><p>下文部分 APP 可以从 Alliot 的<a href="https://pan.iots.vip/2/AndroidTVAPP">临时文件服务</a>里下载。</p>
<h4 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h4><ul>
<li>启动器: 推荐 ATV launcher 清爽，单纯的一个启动器。  </li>
<li>应用市场： 酷开的系统不允许安装第三方的软件，这里有个例外： <a href="https://www.dangbei.com/chuangwei.html">当贝市场——创维版</a>  </li>
<li>甲壳虫ADB助手： 这个适合安装在手机上，提供了比较多的 ADB 相关功能。</li>
</ul>
<h4 id="资源类"><a href="#资源类" class="headerlink" title="资源类"></a>资源类</h4><ul>
<li>Emby： 找一些公益服， 客户端可以去这里找找： <a href="https://github.com/rartv/EmbyPublic/releases">rartv&#x2F;EmbyPublic</a>  </li>
<li>当贝播放器： 在当贝市场直接安装，可以直接播放类似阿里云网盘的资源，也支持 Samba、NFS 等协议，清爽无广告。  </li>
<li>小白云盘： 阿里云盘的第三方，支持播放原盘。  </li>
<li>MyTV: 很良心的、适合给家里老人家看电视的一个 APP，打开就播放，摇控上下即可换台： <a href="https://github.com/lizongying/my-tv/releases">Github Release</a></li>
</ul>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>　　至此，你的国产电视才勉强算像个电视而不是一块巨型电子广告屏。 前一阵子电视家凉了之后，看个 IPTV 都需要动动手，老人家看个电视都不容易了 <del>，真希望某些厂某些部门能做点人事</del>。 </p>
]]></content>
      <tags>
        <tag>折腾</tag>
        <tag>硬件</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈微服务k8s情景下的日志采集</title>
    <url>//post/kubernetes-log-collecting.html</url>
    <content><![CDATA[<p>&emsp;&emsp;传统虚拟机、物理机环境下，日志文件通常存放于固定的路径下，当应用重启或出现异常退出的情况，日志也会留存下来，不受影响。而 Kubernetes 环境下，提供了相比前者更为细粒度的资源调度，容器（或 Pod）的生命周期是十分短暂的，当主进程退出，容器（或 Pod）便会被销毁，随之而来的是其关联资源也会被释放。因此，在日志采集的这个点上，Kubernetes 场景相比传统环境而言，会更为复杂，需要考虑的点更多。<span id="more"></span><br>&emsp;&emsp;普遍来说，Kubernetes 环境下的日志采集有如下几种模式：  </p>
<table>
<thead>
<tr>
<th></th>
<th>DockerEngine</th>
<th>业务直写</th>
<th>DaemonSet</th>
<th>Sidecar</th>
</tr>
</thead>
<tbody><tr>
<td>采集日志类型</td>
<td>标准输出</td>
<td>业务日志</td>
<td>标准输出+部分文件</td>
<td>文件</td>
</tr>
<tr>
<td>部署运维难度</td>
<td>低</td>
<td>低</td>
<td>一般，维护daemonSet即可</td>
<td>高，每个需采集日志的Pod均需部署Sidecar容器</td>
</tr>
<tr>
<td>隔离程度</td>
<td>弱</td>
<td>弱</td>
<td>一般，只能通过配置间隔离</td>
<td>强，通过容器隔离，单独分配资源</td>
</tr>
<tr>
<td>适用场景</td>
<td>测试环境</td>
<td>对性能要求极高的业务</td>
<td>日志分类明确、功能较单一的集群</td>
<td>大型集群、PaaS型集群</td>
</tr>
</tbody></table>
<ul>
<li>DockerEngine 直写一般不推荐，也很少会用到；</li>
<li>业务直写推荐在日志量极大的场景中使用；</li>
<li>DaemonSet 一般在节点不超过1000的中小型集群中使用；</li>
<li>Sidecar 推荐在超大型的集群或是日志需求比较复杂的情况中使用。<br>因为我司有日志处理分析等需求，所以同时应用了 DaemonSet 与 Sidecar 两种模式。业务直写方案也有少部分复杂场景会用到，因此，本文主要介绍前面两种日志采集模式。</li>
</ul>
<h3 id="DaemonSet-模式采集日志"><a href="#DaemonSet-模式采集日志" class="headerlink" title="DaemonSet 模式采集日志"></a>DaemonSet 模式采集日志</h3><p>&emsp;&emsp;由于我们不会在  Kubernetes 下直接运行容器（Kubernetes 的最小资源调度管理单位为 Pod），Kubernetes 会将日志软链至 <code>/var/log/pods/</code> 与 <code>/var/log/containers</code> 路径下，以帮助我们更好的管理日志。<br>&emsp;&emsp;我们登陆任意一个 k8s 节点：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@ali-k8s-test-002 ~]# cd /var/log/pods/</span><br><span class="line">[root@ali-k8s-test-002 pods]# ls</span><br><span class="line">comp-tools_skywalking-oap-ff949d984-kqnkx_51faece4-3b59-429d-99bf-a8fea9726555</span><br><span class="line">comp-tools_skywalking-ui-95bd55c59-5x2qf_1422b8bd-988a-4739-bc96-53ccd9e164e6</span><br><span class="line">kubesphere-controls-system_kubectl-zhangminghao-6c654bc9c8-m46sj_5eae93cb-fbf4-46a6-ba5c-c728ccb73d1b</span><br><span class="line">kubesphere-devops-system_ks-jenkins-645b997d5f-tvlrs_a0d2ab73-d440-4d85-aa7c-612c3415341e</span><br><span class="line">kubesphere-logging-system_elasticsearch-logging-data-1_6baa822d-f877-4f5f-ba5f-3e0e98a7d617</span><br><span class="line">kubesphere-logging-system_elasticsearch-logging-discovery-0_0611bdb7-1989-4a06-a333-06ff045a4b1d</span><br><span class="line"></span><br><span class="line">[root@ali-k8s-test-002 pods]# cd /var/log/containers</span><br><span class="line">[root@ali-k8s-test-002 containers]# ll</span><br><span class="line">总用量 180</span><br><span class="line">lrwxrwxrwx 1 root root 136 4月  12 2021 ack-node-problem-detector-daemonset-vb4wm_kube-system_ack-node-problem-detector-3a8538726f9943d78e81395f29a4c39f3a831042b6264b34bc76068810272b78.log -&gt; /var/log/pods/kube-system_ack-node-problem-detector-daemonset-vb4wm_3d088618-4af7-4def-913a-b85a74b06911/ack-node-problem-detector/0.log</span><br><span class="line">lrwxrwxrwx 1 root root 136 5月  11 2021 ack-node-problem-detector-daemonset-vb4wm_kube-system_ack-node-problem-detector-6b6d7ef089f0fc352afcf3f04aa2a189e92483580e4797fab9298ed7e7eae43f.log -&gt; /var/log/pods/kube-system_ack-node-problem-detector-daemonset-vb4wm_3d088618-4af7-4def-913a-b85a74b06911/ack-node-problem-detector/1.log</span><br></pre></td></tr></table></figure>
<p>可以大致的看出其命名结构为： <code>/var/log/pods/&lt;namespace&gt;_&lt;pod_name&gt;_&lt;pod_id&gt;/&lt;container_name&gt;/</code>，<code>/var/log/containers/&lt;pod_name&gt;_&lt;namespace&gt;_&lt;container_id&gt;</code>。（扩展阅读： <a href="https://stackoverflow.com/a/58921955/7679643">Where are Kubernetes’ pods logfiles? – StackOverflow</a>  ）<br>&emsp;&emsp;因此我们只需要在每个节点上都部署采集器，通过 filebeat 等采集器对该路径下的日志进行采集即可。<br>&emsp;&emsp;那么，我们如何方便做到在 k8s 的每个节点上都部署一个采集器呢？这时候我们需要用到 k8s 中 daemonSet 这样的一种资源类型：  </p>
<blockquote>
<p>DaemonSet 确保全部（或者某些）节点上运行一个 Pod 的副本。 当有节点加入集群时， 也会为他们新增一个 Pod 。 当有节点从集群移除时，这些 Pod 也会被回收。删除 DaemonSet 将会删除它创建的所有 Pod。 <a href="https://kubernetes.io/zh/docs/concepts/workloads/controllers/daemonset/">daemonSet | Kubernetes</a>  </p>
</blockquote>
<p>架构示意如下：<br><img data-src="https://static.iots.vip/k8s%E6%97%A5%E5%BF%97%E9%87%87%E9%9B%86-daemonSet%E6%A8%A1%E5%BC%8F.png" alt="k8s日志采集-daemonSet模式-EFLK架构图"><br>&emsp;&emsp;值得注意的是，这种模式下，需要统一应用的日志输出模式为标准输出错误输出，这样才会被日志引擎正确捕捉写入日志文件。同时，目前主流的云服务提供商的 serverless 虚拟 k8s 节点均不支持 daemonSet 模式，有此应用场景的需要使用其他方式来采集日志。  </p>
<p>我们大概看一下这种模式的 filebeat 部署文件与配置文件：  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">filebeat</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">filebeat</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">filebeat</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">filebeat</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">filebeat</span></span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">30</span></span><br><span class="line">      <span class="attr">hostNetwork:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">dnsPolicy:</span> <span class="string">ClusterFirstWithHostNet</span></span><br><span class="line">      </span><br><span class="line">      <span class="attr">hostAliases:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">ip:</span> <span class="string">&quot;192.168.201.126&quot;</span></span><br><span class="line">        <span class="attr">hostnames:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;kafka01&quot;</span></span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">filebeat</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">docker.elastic.co/beats/filebeat:7.14.2</span></span><br><span class="line">        <span class="attr">args:</span> [</span><br><span class="line">          <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;/etc/filebeat.yml&quot;</span>,</span><br><span class="line">          <span class="string">&quot;-e&quot;</span>,</span><br><span class="line">        ]</span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NODE_NAME</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">spec.nodeName</span></span><br><span class="line">        <span class="attr">securityContext:</span></span><br><span class="line">          <span class="attr">runAsUser:</span> <span class="number">0</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">800Mi</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">400m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">200Mi</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/etc/filebeat.yml</span></span><br><span class="line">          <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">subPath:</span> <span class="string">filebeat.yml</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">data</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/usr/share/filebeat/data</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">varlog</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/var/log</span></span><br><span class="line">          <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">varlibdockercontainers</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/var/lib/docker/containers</span></span><br><span class="line">          <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">dockersock</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/var/run/docker.sock</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config</span></span><br><span class="line">        <span class="attr">configMap:</span></span><br><span class="line">          <span class="attr">defaultMode:</span> <span class="number">0640</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">filebeat-config</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">varlibdockercontainers</span></span><br><span class="line">        <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/var/lib/docker/containers</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">dockersock</span></span><br><span class="line">        <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/var/run/docker.sock</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">varlog</span></span><br><span class="line">        <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/var/log</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">data</span></span><br><span class="line">        <span class="attr">hostPath:</span></span><br><span class="line">          <span class="comment"># When filebeat runs as non-root user, this directory needs to be writable by group (g+w).</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/var/lib/filebeat-data</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">DirectoryOrCreate</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="comment"># 权限配置  </span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">filebeat</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">filebeat</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">filebeat</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">filebeat</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">filebeat</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">filebeat</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">filebeat-kubeadm-config</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">filebeat</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">filebeat-kubeadm-config</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">filebeat</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">filebeat</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>] <span class="comment"># &quot;&quot; indicates the core API group</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">namespaces</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pods</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nodes</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;apps&quot;</span>]</span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">replicasets</span></span><br><span class="line">  <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]</span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">filebeat</span></span><br><span class="line">  <span class="comment"># should be the namespace where filebeat is running</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">filebeat</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">coordination.k8s.io</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">leases</span></span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;create&quot;</span>, <span class="string">&quot;update&quot;</span>]</span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">filebeat-kubeadm-config</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">filebeat</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">configmaps</span></span><br><span class="line">    <span class="attr">resourceNames:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">kubeadm-config</span></span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>]</span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">filebeat</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">filebeat</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<p>filebeat 配置：  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">filebeat-config</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">filebeat</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">filebeat.yml:</span> <span class="string">|-</span></span><br><span class="line"><span class="string">    filebeat.autodiscover:</span></span><br><span class="line"><span class="string">      providers:</span></span><br><span class="line"><span class="string">        - type: kubernetes</span></span><br><span class="line"><span class="string">          node: $&#123;NODE_NAME&#125;</span></span><br><span class="line"><span class="string">          templates:</span></span><br><span class="line"><span class="string">            - condition:</span></span><br><span class="line"><span class="string">                equals:</span></span><br><span class="line"><span class="string">                  kubernetes.labels.filebeat_harvest: &quot;true&quot;</span></span><br><span class="line"><span class="string">              config:</span></span><br><span class="line"><span class="string">                - type: container</span></span><br><span class="line"><span class="string">                  encoding: utf-8</span></span><br><span class="line"><span class="string">                  paths: </span></span><br><span class="line"><span class="string">                    - /var/log/containers/*$&#123;data.kubernetes.container.id&#125;.log</span></span><br><span class="line"><span class="string">                  # exclude_lines: [&quot;^\\s+[\\-`(&#x27;.|_]&quot;]</span></span><br><span class="line"><span class="string">                  # multiline:</span></span><br><span class="line"><span class="string">                  #   max_lines: 10000</span></span><br><span class="line"><span class="string">                  #   pattern: &#x27;^[0-9]&#123;4&#125;-[0-9]&#123;2&#125;-[0-9]&#123;2&#125;&#x27;</span></span><br><span class="line"><span class="string">                  #   negate: true</span></span><br><span class="line"><span class="string">                  #   match: after</span></span><br><span class="line"><span class="string">                  # symlinks: true</span></span><br><span class="line"><span class="string">      # 过滤边车模式的filebeat日志</span></span><br><span class="line"><span class="string">    processors:</span></span><br><span class="line"><span class="string">      - drop_event.when:</span></span><br><span class="line"><span class="string">          contains:</span></span><br><span class="line"><span class="string">            - kubernetes.container.name: &quot;filebeat&quot;</span></span><br><span class="line"><span class="string">    processors:</span></span><br><span class="line"><span class="string">      - drop_fields:</span></span><br><span class="line"><span class="string">          fields:</span></span><br><span class="line"><span class="string">            - &quot;@metadata&quot;</span></span><br><span class="line"><span class="string">            - &quot;beat&quot;</span></span><br><span class="line"><span class="string">            - &quot;kubernetes.labels&quot;</span></span><br><span class="line"><span class="string">            - &quot;kubernetes.container&quot;</span></span><br><span class="line"><span class="string">            - &quot;kubernetes.annotations&quot;</span></span><br><span class="line"><span class="string">            - &quot;host&quot;</span></span><br><span class="line"><span class="string">            - &quot;prospector&quot;</span></span><br><span class="line"><span class="string">            - &quot;input&quot;</span></span><br><span class="line"><span class="string">            - &quot;offset&quot;</span></span><br><span class="line"><span class="string">            - &quot;stream&quot;</span></span><br><span class="line"><span class="string">            - &quot;source&quot;</span></span><br><span class="line"><span class="string">            - &quot;agent.ephemeral_id&quot;</span></span><br><span class="line"><span class="string">            - &quot;agent.hostname&quot;</span></span><br><span class="line"><span class="string">            - &quot;agent.id&quot;</span></span><br><span class="line"><span class="string">            - &quot;agent.name&quot;</span></span><br><span class="line"><span class="string">            - &quot;agent.type&quot;</span></span><br><span class="line"><span class="string">            - &quot;agent.version&quot;</span></span><br><span class="line"><span class="string">            - &quot;host.name&quot;</span></span><br><span class="line"><span class="string">            - &quot;input.type&quot;</span></span><br><span class="line"><span class="string">            - &quot;ecs.version&quot;</span></span><br><span class="line"><span class="string">            - &quot;input.type&quot;</span></span><br><span class="line"><span class="string">            - &quot;log.offset&quot;</span></span><br><span class="line"><span class="string">            - &quot;log.flags&quot;</span></span><br><span class="line"><span class="string">            - &quot;log.file.path&quot;</span></span><br><span class="line"><span class="string">            - &quot;version&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="attr">output.elasticsearch:</span></span><br><span class="line">      <span class="attr">hosts:</span> [<span class="string">&quot;http://172.18.145.131:9200&quot;</span>]</span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">worker:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">compression_level:</span> <span class="number">3</span></span><br><span class="line">      <span class="attr">indices:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">index:</span> <span class="string">&quot;<span class="template-variable">%&#123;[kubernetes.labels.filebeat_index]&#125;</span>-<span class="template-variable">%&#123;+yyyy.MM.dd&#125;</span>&quot;</span></span><br><span class="line">    <span class="attr">setup.ilm.enabled:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">setup.template.name:</span> <span class="string">&quot;ms&quot;</span></span><br><span class="line">    <span class="attr">setup.template.pattern:</span> <span class="string">&quot;ms-*&quot;</span></span><br><span class="line">    <span class="attr">setup.template.settings:</span></span><br><span class="line">      <span class="attr">index.number_of_shards:</span> <span class="number">1</span>    </span><br><span class="line">      <span class="attr">index.number_of_replicas:</span> <span class="number">0</span>  </span><br></pre></td></tr></table></figure>
<p>查看 filebeat 实例在集群中的分布，可以看到每个 k8s 节点上都运行了一个 filebeat Pod：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl get pod -A -o wide|grep filebeat</span></span><br><span class="line">kube-system                  filebeat-247nn                                                    1/1     Running       0          24d     172.18.147.6     cn-shenzhen.172.18.147.6        &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system                  filebeat-2bvnm                                                    1/1     Running       0          24d     172.18.146.224   cn-shenzhen.172.18.146.224      &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system                  filebeat-44b2q                                                    1/1     Running       0          24d     172.18.146.200   cn-shenzhen.172.18.146.200      &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system                  filebeat-dh247                                                    1/1     Running       0          24d     172.18.147.14    cn-shenzhen.172.18.147.14       &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system                  filebeat-qvrlk                                                    1/1     Running       0          24d     172.18.146.201   cn-shenzhen.172.18.146.201      &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system                  filebeat-r4xmw                                                    1/1     Running       0          24d     172.18.146.223   cn-shenzhen.172.18.146.223      &lt;none&gt;           &lt;none&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl get node</span></span><br><span class="line">NAME                            STATUS   ROLES    AGE    VERSION</span><br><span class="line">cn-shenzhen.172.18.146.200      Ready    &lt;none&gt;   229d   v1.18.8-aliyun.1</span><br><span class="line">cn-shenzhen.172.18.146.201      Ready    &lt;none&gt;   229d   v1.18.8-aliyun.1</span><br><span class="line">cn-shenzhen.172.18.146.223      Ready    worker   238d   v1.18.8-aliyun.1</span><br><span class="line">cn-shenzhen.172.18.146.224      Ready    &lt;none&gt;   238d   v1.18.8-aliyun.1</span><br><span class="line">cn-shenzhen.172.18.147.14       Ready    &lt;none&gt;   174d   v1.18.8-aliyun.1</span><br><span class="line">cn-shenzhen.172.18.147.6        Ready    &lt;none&gt;   209d   v1.18.8-aliyun.1</span><br></pre></td></tr></table></figure>


<h3 id="sidecar-模式采集日志"><a href="#sidecar-模式采集日志" class="headerlink" title="sidecar 模式采集日志"></a>sidecar 模式采集日志</h3><p>&emsp;&emsp;先来了解一下什么是 sidecar：  </p>
<blockquote>
<p>Sidecar 即边车，类似港台警匪片里警察的三轮摩托车旁边的跨斗，它们都属于这台三轮摩托车，跨斗即为边车，充当辅助作用。<br>Pod 被作为 k8s 里管理的最小单元，一个 Pod 里可以包含一个或多个容器(container)。简单来说，如果把一个 Pod 类比成一台虚拟机，那么多个容器就是这个虚拟机里边的多个进程。  </p>
</blockquote>
<p>&emsp;&emsp;既然我们将 Pod 类比为了传统的虚拟机，那么我们的日志也就可以应用传统虚拟机上采集日志的模式： 每台虚拟机运行一个 filebeat 实例，采集指定路径下的日志文件即可。<br>转换过来就是： 每个业务Pod里除去应用容器，旁边还会跑一个filebeat等采集器的容器，应用容器通过共享存储的方式将日志文件挂载出来，filebeat 挂载这个共享存储来采集日志。<br>&emsp;&emsp;这样最大的好处就是，日志采集与处理的规则相比 daemonSet 要灵活，并且如果是从传统服务迁移到 K8S 里的应用，也可以延用先前的配置。<br>架构示意如下：<br><img data-src="https://static.iots.vip/k8s%E6%97%A5%E5%BF%97%E9%87%87%E9%9B%86-sidecar%E6%A8%A1%E5%BC%8F.png" alt="k8s日志采集-sidecar模式-EFLK架构图.png"></p>
<p>我们也大概看一下这种模式的 filebeat 部署文件与配置文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">tier:</span> <span class="string">backend</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">chat-api</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">tier:</span> <span class="string">backend</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">tier:</span> <span class="string">backend</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">hostAliases:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">ip:</span> <span class="string">&quot;192.168.201.1&quot;</span></span><br><span class="line">        <span class="attr">hostnames:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;kafka01&quot;</span></span><br><span class="line">      <span class="attr">nodeSelector:</span></span><br><span class="line">        <span class="attr">common:</span> <span class="string">prod</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">chat-api</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br><span class="line">              <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">          <span class="attr">resources:</span></span><br><span class="line">            <span class="attr">limits:</span></span><br><span class="line">              <span class="attr">cpu:</span> <span class="string">1000m</span></span><br><span class="line">              <span class="attr">memory:</span> <span class="string">1024Mi</span></span><br><span class="line">            <span class="attr">requests:</span></span><br><span class="line">              <span class="attr">cpu:</span> <span class="string">1000m</span></span><br><span class="line">              <span class="attr">memory:</span> <span class="string">1024Mi</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">service-logs-nas</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/data/logs/chat</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">filebeat</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">filebeat:6.4.2</span></span><br><span class="line">          <span class="attr">args:</span> [</span><br><span class="line">              <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;/etc/filebeat.yml&quot;</span>,</span><br><span class="line">              <span class="string">&quot;-e&quot;</span>,</span><br><span class="line">          ]</span><br><span class="line">          <span class="attr">resources:</span></span><br><span class="line">            <span class="attr">requests:</span></span><br><span class="line">              <span class="attr">cpu:</span> <span class="string">10m</span></span><br><span class="line">              <span class="attr">memory:</span> <span class="string">30Mi</span></span><br><span class="line">            <span class="attr">limits:</span></span><br><span class="line">              <span class="attr">memory:</span> <span class="string">500Mi</span></span><br><span class="line">          <span class="attr">securityContext:</span></span><br><span class="line">            <span class="attr">runAsUser:</span> <span class="number">0</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">filebeat-config</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/etc/filebeat.yml</span></span><br><span class="line">              <span class="attr">subPath:</span> <span class="string">filebeat.yml</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">service-logs-nas</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/data/logs/chat</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="comment"># 这里因为有归档需求，所以通过NFS来共享存储</span></span><br><span class="line">        <span class="comment"># 如果没有归档需求，可以直接使用 emptyDir 来共享存储</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">service-logs-nas</span></span><br><span class="line">          <span class="attr">nfs:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/prod-api</span></span><br><span class="line">            <span class="attr">server:</span> <span class="string">xxxx.cn-shenzhen.nas.aliyuncs.com</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">filebeat-config</span></span><br><span class="line">          <span class="attr">configMap:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">filebeat-sidecar-chat-config</span></span><br><span class="line">      <span class="attr">dnsPolicy:</span> <span class="string">ClusterFirst</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br></pre></td></tr></table></figure>
<p>filebeat 配置如下：  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">filebeat-sidecar-chat-config</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">filebeat.yml:</span> <span class="string">|-</span></span><br><span class="line"><span class="string">    name: k8s-chat</span></span><br><span class="line"><span class="string">    filebeat.shutdown_timeout: 3s</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="attr">filebeat.prospectors:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">input_type:</span> <span class="string">log</span></span><br><span class="line">        <span class="attr">paths:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">/data/logs/chat/*$&#123;HOSTNAME&#125;*.log</span></span><br><span class="line">        <span class="attr">json.keys_under_root:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">json.add_error_key:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">ignore_older:</span> <span class="string">12h</span></span><br><span class="line">        <span class="attr">close_removed:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">clean_removed:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">close_inactive:</span> <span class="string">2h</span></span><br><span class="line">        <span class="attr">fields:</span></span><br><span class="line">          <span class="attr">k8s_nodename:</span> <span class="string">$&#123;NODE_NAME&#125;</span></span><br><span class="line">          <span class="attr">k8s_namespace:</span> <span class="string">$&#123;POD_OWN_NAMESPACE&#125;</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">k8s-chat</span></span><br><span class="line">          <span class="attr">format:</span> <span class="string">json</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="attr">output.kafka:</span></span><br><span class="line">        <span class="attr">hosts:</span> [<span class="string">&quot;kafka01:20001]</span></span><br><span class="line"><span class="string">        topic: &#x27;<span class="template-variable">%&#123;[fields.type]&#125;</span>&#x27;</span></span><br><span class="line"><span class="string">        partition.round_robin:</span></span><br><span class="line"><span class="string">            reachable_only: true</span></span><br><span class="line"><span class="string">        username: &quot;</span><span class="string">xxx&quot;</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">&quot;xxx&quot;</span></span><br><span class="line">        <span class="attr">required_acks:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">compression:</span> <span class="string">gzip</span></span><br><span class="line">        <span class="attr">max_message_bytes:</span> <span class="number">1000000</span></span><br><span class="line">        <span class="attr">worker:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>这里我们再看看我们的 filebeat 实例在 k8s 中的存在形式：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl describe pod chat-api-74fb6c5c4c-zfs78</span></span><br><span class="line">Name:         chat-api-74fb6c5c4c-zfs78</span><br><span class="line">Namespace:    default</span><br><span class="line">Priority:     0</span><br><span class="line">Node:         ali-hn-k8s05012-chat-prod/172.18.205.12</span><br><span class="line">Start Time:   Thu, 02 Dec 2021 23:04:31 +0800</span><br><span class="line">Labels:       tier=backend</span><br><span class="line">Status:       Running</span><br><span class="line">IP:           172.18.128.168</span><br><span class="line">IPs:</span><br><span class="line">  IP:           172.18.128.168</span><br><span class="line">Controlled By:  ReplicaSet/chat-api-74fb6c5c4c</span><br><span class="line">Containers:</span><br><span class="line">  chat-socket:</span><br><span class="line">    Container ID:   docker://e8ede98cc8c06040797378bf0563fe39949d2563b13e712d171f64abcfaebd02</span><br><span class="line">    Image:          xxxx</span><br><span class="line">    Image ID:       xxxx</span><br><span class="line">    Port:           8002/TCP</span><br><span class="line">    Host Port:      0/TCP</span><br><span class="line">    State:          Running</span><br><span class="line">      Started:      Thu, 02 Dec 2021 23:04:45 +0800</span><br><span class="line">    Ready:          True</span><br><span class="line">    Restart Count:  0</span><br><span class="line">    Limits:</span><br><span class="line">      cpu:     1</span><br><span class="line">      memory:  2Gi</span><br><span class="line">    Requests:</span><br><span class="line">      cpu:      1</span><br><span class="line">      memory:   2Gi</span><br><span class="line">    Liveness:   tcp-socket :8002 delay=5s timeout=1s period=2s #success=1 #failure=5</span><br><span class="line">    Readiness:  tcp-socket :8002 delay=5s timeout=1s period=2s #success=1 #failure=5</span><br><span class="line">    Environment:</span><br><span class="line">      CACHE_IGNORE:             js|html</span><br><span class="line">      CACHE_PUBLIC_EXPIRATION:  3d</span><br><span class="line">      ENV:                      test</span><br><span class="line">      SERVICE_PROD:             $PORT</span><br><span class="line">      SERVICE_TIMEOUT:          120</span><br><span class="line">      POD_OWN_IP_ADDRESS:        (v1:status.podIP)</span><br><span class="line">      POD_OWN_NAME:             chat-api-74fb6c5c4c-zfs78 (v1:metadata.name)</span><br><span class="line">      POD_OWN_NAMESPACE:        default (v1:metadata.namespace)</span><br><span class="line">      SERVICE_BRANCH_NAME:      master</span><br><span class="line">      NODE_SERVER_TYPE:         appForSocket</span><br><span class="line">    Mounts:</span><br><span class="line">      /data/logs/chat from service-logs-nas (rw)</span><br><span class="line">  filebeat:</span><br><span class="line">    Container ID:  docker://b0df7f03590f09bc7eaf31fa931648c2b4bb652cff98abb8c8872cd11d8f7bea</span><br><span class="line">    Image:         filebeat:6.3.2</span><br><span class="line">    Image ID:      docker-pullable://docker.elastic.co/beats/filebeat@sha256:af6eb732fece856e010a2c40a68d76052b64409a5d19b114686db269af01436f</span><br><span class="line">    Port:          &lt;none&gt;</span><br><span class="line">    Host Port:     &lt;none&gt;</span><br><span class="line">    Args:</span><br><span class="line">      -c</span><br><span class="line">      /etc/filebeat.yml</span><br><span class="line">    State:          Running</span><br><span class="line">      Started:      Thu, 02 Dec 2021 23:04:45 +0800</span><br><span class="line">    Ready:          True</span><br><span class="line">    Restart Count:  0</span><br><span class="line">    Limits:</span><br><span class="line">      memory:  500Mi</span><br><span class="line">    Requests:</span><br><span class="line">      cpu:     10m</span><br><span class="line">      memory:  30Mi</span><br><span class="line">    Environment:</span><br><span class="line">      NODE_NAME:           (v1:spec.nodeName)</span><br><span class="line">      POD_OWN_NAMESPACE:  default (v1:metadata.namespace)</span><br><span class="line">    Mounts:</span><br><span class="line">      /data/logs/chat from service-logs-nas (rw)</span><br><span class="line">      /etc/filebeat.yml from filebeat-config (rw,path=&quot;filebeat.yml&quot;)</span><br><span class="line">      /var/run/secrets/kubernetes.io/serviceaccount from default-token-95mrq (ro)</span><br><span class="line">Conditions:</span><br><span class="line">  Type              Status</span><br><span class="line">  Initialized       True</span><br><span class="line">  Ready             True</span><br><span class="line">  ContainersReady   True</span><br><span class="line">  PodScheduled      True</span><br><span class="line">Volumes:</span><br><span class="line">  service-logs-nas:</span><br><span class="line">    Type:      NFS (an NFS mount that lasts the lifetime of a pod)</span><br><span class="line">    Server:    xxxx.cn-shenzhen.nas.aliyuncs.com</span><br><span class="line">    Path:      /prod-socket</span><br><span class="line">    ReadOnly:  false</span><br><span class="line">  filebeat-config:</span><br><span class="line">    Type:      ConfigMap (a volume populated by a ConfigMap)</span><br><span class="line">    Name:      filebeat-sidecar-chat-config</span><br><span class="line">    Optional:  false</span><br><span class="line">Events:          &lt;none&gt;</span><br></pre></td></tr></table></figure>
<p>可以看出这个 Pod 中存在两个 container，分别为业务应用 container 与 filebeat 实例。  </p>
<h3 id="应用直写模式采集日志"><a href="#应用直写模式采集日志" class="headerlink" title="应用直写模式采集日志"></a>应用直写模式采集日志</h3><p>&emsp;&emsp;这种模式其实没啥特别需要讲的，一般是在业务应用的日志插件里直接推送日志，如 log4j 等日志引擎都能很方便的推送日志到 Kafka 等中间件或远程 Elasticsearch 中。<br>&emsp;&emsp;这种模式耦合度较高，适用于比较复杂或是对性能要求极高的场景下。  </p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>&emsp;&emsp;很少有技术银弹能够一次性解决复杂生产环境中的所有需求，因此，日志采集也往往存在多种方案并存的情况，需要我们按照实际的需求来选择。</p>
]]></content>
      <tags>
        <tag>可观测性</tag>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记：华为IP基础快速入门-数通基础-网络基础</title>
    <url>//post/note-huawei-network1.html</url>
    <content><![CDATA[<p>　　对于网络基础，之前学习的是谢希仁老师的《计算机网络》，由于教材偏向考试，加上我自己也没能学得很细致，许多地方处于不明所以的状态。 恰好在网上发现了这套华为的IP基础快速入门教程，感觉朱仕耿老师讲的通俗易懂，于是边看边做了一下笔记。<span id="more"></span><br>　　整套视频教程在<a href="http://support.huawei.com/enterprise/zh/init-doc-list/optix-ptn-990-pid-21297155?belongVersionId=LearnMeter&docType=DOCTYPE10&secondType=SECONDTYPE7">这里</a>。 本文视频章节在<a href="http://support.huawei.com/enterprise/zh/doc/DOC1000122546">这里</a></p>
<h2 id="网络设备"><a href="#网络设备" class="headerlink" title="网络设备"></a>网络设备</h2><h3 id="集线器-Hub"><a href="#集线器-Hub" class="headerlink" title="集线器(Hub)"></a>集线器(Hub)</h3><p>　　集线器属于纯硬件网络底层设备，总线型的介质，连接Hub集线器的设备处于连接hub的设备处于一个冲突域当中，同一时间只能有一个网源发送数据，否则会产生冲突，导致数据包受损。<br>工作在物理层  </p>
<ul>
<li>整台设备在同一个冲突域（collision domain）  </li>
<li>整台设备都在同一个广播域（broadcast domain）  </li>
<li>设备共享带宽</li>
</ul>
<h3 id="交换机-Switch"><a href="#交换机-Switch" class="headerlink" title="交换机(Switch)"></a>交换机(Switch)</h3><p>　　交换机的每个接口是单独的冲突域，连接到交换机中的网源不会像Hub那样发生冲突，但是交换机整机属于一个广播域（broadcast domain）也可以说属于一个LAN中，交换机是基于MAC进行寻址。<br>基本功能：  </p>
<ul>
<li>数据帧的交换  </li>
<li>终端用户设备的接入  </li>
<li>基本的接入安全功能  </li>
<li>广播域的隔离(VLAN)  </li>
<li>二层链路的冗余、防环及负载均衡</li>
</ul>
<h3 id="路由器-Router"><a href="#路由器-Router" class="headerlink" title="路由器(Router)"></a>路由器(Router)</h3><ul>
<li>隔绝广播(这里要注意：广播是不能够完全隔离的，只能尽量减少广播风暴的产生，方法就是尽量缩小广播域，即划分子网，可以划分子网的设备包括三层交换机和路由器。) 、实现跨三层的数据互访，何所谓三层数据互访，即交换机下LAN1与LAN2中设备的互访。（LAN中的为二层）如图所示：<img data-src="https://static.iots.vip/%E8%B7%A8%E4%B8%89%E5%B1%82%E6%95%B0%E6%8D%AE%E4%BA%92%E8%AE%BF.png" alt="跨三层数据互访">  </li>
<li>路由协议的支持、维护路由表  </li>
<li>路径选择及数据转发  </li>
<li>广域网接入、地址转换及特定的安全功能</li>
</ul>
<h2 id="OSI参考模型"><a href="#OSI参考模型" class="headerlink" title="OSI参考模型"></a>OSI参考模型</h2><blockquote>
<p>OSI（Open System Interconnect），即开放式系统互联。  一般都叫OSI参考模型，是ISO（国际标准化组织）组织在1985年研究的网络互联模型。该体系结构标准定义了网络互连的七层框架（物理层、数据链路层、网络层、传输层、会话层、表示层和应用层），即ISO开放系统互连参考模型。在这一框架下进一步详细规定了每一层的功能，以实现开放系统环境中的互连性、互操作性和应用的可移植性。  </p>
</blockquote>
<p><img data-src="https://static.iots.vip/OSI%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B.png" alt="OSI参考模型">  </p>
<h3 id="第七层-应用层"><a href="#第七层-应用层" class="headerlink" title="第七层 应用层"></a>第七层 应用层</h3><ul>
<li>为应用软件提供接口，使应用程序能够使用网络服务  </li>
<li>常见的应用层协议：<br>　　http(80)、ftp(20&#x2F;21)、smtp(25)、pop3(110)、telnet(23)、dns(53)等。</li>
</ul>
<h3 id="第六层-表示层"><a href="#第六层-表示层" class="headerlink" title="第六层 表示层"></a>第六层 表示层</h3><ul>
<li>数据的解码和编码  </li>
<li>数据的加密和解密  </li>
<li>数据的压缩和解压缩  </li>
<li>常见的标准如：<br>　　ASCLL、JPEG等</li>
</ul>
<h3 id="第五层-会话层"><a href="#第五层-会话层" class="headerlink" title="第五层 会话层"></a>第五层 会话层</h3><ul>
<li>负责建立、管理和终止表示层实体之间的会话连接  </li>
<li>在设备或节点之间提供会话控制  </li>
<li>它在系统之间协调通信过程</li>
</ul>
<h3 id="第四层-传输层"><a href="#第四层-传输层" class="headerlink" title="第四层 传输层"></a>第四层 传输层</h3><ul>
<li>负责将来自上层应用程序的数据进行分段和重组，并将它们组合为同样的数据流形式  </li>
<li>提供端到端的数据传输服务  </li>
<li>工作在传输层的协议<br>　　TCP(提供可靠的通信)、UDP(提供尽力而为的通信——不可靠)</li>
</ul>
<h3 id="第三层-网络层"><a href="#第三层-网络层" class="headerlink" title="第三层 网络层"></a>第三层 网络层</h3><ul>
<li>定义了逻辑地址(三层地址) IP协议工作在此层  </li>
<li>分组寻址，负责将分组数据从源端传输到目的端  </li>
<li>路由选择、维护路由表</li>
</ul>
<h3 id="第二层-数据链路层"><a href="#第二层-数据链路层" class="headerlink" title="第二层 数据链路层"></a>第二层 数据链路层</h3><ul>
<li>在不可靠的物理链路上，提供可靠的数据传输服务，把帧从一跳(节点)移动到另一跳(节点)  </li>
<li>组帧、物理偏址、流量控制、差错控制、接入控制</li>
</ul>
<h3 id="第一层-物理层"><a href="#第一层-物理层" class="headerlink" title="第一层 物理层"></a>第一层 物理层</h3><ul>
<li>定义接口和媒体的物理特性  </li>
<li>定义比特的表示、数据传输速率、信号的传输形式(单工、半双工、全双工)  </li>
<li>定义网络物理拓扑(网状、星型、环型、总线型等拓扑结构)  </li>
<li>负责把逐个的比特从一跳(结点)移动到另一跳(结点)</li>
</ul>
]]></content>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>案例:SAN存储区域网络配置练习</title>
    <url>//post/SAN-config-practice.html</url>
    <content><![CDATA[<p>　　SAN(Storage Area Network) 一般用户接触的机会不多，说来也巧，入职后刚好遇上公司存储升级换代，部分配置需要重做，Alliot 借此机会管中窥豹也算是接触了一些存储相关的东西。坤哥与杜老大带我们了解一些基本概念后,给了一个较为简单的配置练习,本文做一些整理。<span id="more"></span> </p>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>公司现要求一台新部署的服务器 ServerA 接入 SAN 网络：  </p>
<h4 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h4><p>HBA 卡 1：<br>110000e08b0ffc8a        —连接到交换机1<br>110000e08b0ffc8b        —连接到交换机1<br>HBA 卡 2：<br>110000e08b0ffc8c        —连接到交换机2<br>110000e08b0ffc8d        —连接到交换机2  </p>
<h4 id="存储-EMC-VMAX10K"><a href="#存储-EMC-VMAX10K" class="headerlink" title="存储 EMC_VMAX10K"></a>存储 EMC_VMAX10K</h4><p>前端端口 wwm：<br>110000e08b0ffc01     —连接交换机1<br>110000e08b0ffc02     —连接交换机1<br>110000e08b0ffc03     —连接交换机2<br>110000e08b0ffc04     —连接交换机2  </p>
<p>备份采用单边接入  </p>
<h4 id="磁带库-IBM-TS3310"><a href="#磁带库-IBM-TS3310" class="headerlink" title="磁带库 IBM_TS3310"></a>磁带库 IBM_TS3310</h4><p>wwn:<br>110000e08b0ffca1     —连接交换机1<br>110000e08b0ffca2     —连接交换机1  </p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><h4 id="问题-1-："><a href="#问题-1-：" class="headerlink" title="问题 1 ："></a>问题 1 ：</h4><p>如何知道服务器的每张HBA卡的哪个口正在连接交换机（即状态为online）<br>Linux服务器查看fc状态：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /sys/class/fc_host/hostX/port_stat</span><br></pre></td></tr></table></figure>
<p>这里的 “hostX” 中的 X 需要看该目录下的具体数值，依情况而定。    </p>
<p>其实也可以去到 SAN 交换机通过 <code>switchshow</code> 来查看。  </p>
<h4 id="问题-2-："><a href="#问题-2-：" class="headerlink" title="问题 2 ："></a>问题 2 ：</h4><p>如何知道服务器连到了交换机的哪个口？如何检查这个口的光衰？<br>查看交换机接口状态:  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">switchshow  </span><br></pre></td></tr></table></figure>
<p>查看光衰:<br>通过 <code>switchshow</code> 中找到对应端口id </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sfpshow id</span><br></pre></td></tr></table></figure>
<p>要求<br>RX Power(收光)： 在 [-2, -7] 为质量较好；[-7, -10] 质量暂时可以接受；[-10, -14] 不可接受，需要整改；[-14,- 49] 为不能通讯。<br>TX Power 无所谓  </p>
<h4 id="问题-3："><a href="#问题-3：" class="headerlink" title="问题 3："></a>问题 3：</h4><p>如何知道当前交换机使用的配置文件名？<br>通过 <code>cfgshow</code> 来查看：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cfgshow | more # 首行即是  </span><br></pre></td></tr></table></figure>
<h4 id="问题-4-："><a href="#问题-4-：" class="headerlink" title="问题 4 ："></a>问题 4 ：</h4><p>配置 SAN 交换机，要求业务数据 IO 流量与备份 IO 流量分开，两台 SAN 交换机配置如下：  </p>
<h5 id="SAN-Switch1"><a href="#SAN-Switch1" class="headerlink" title="SAN Switch1:"></a>SAN Switch1:</h5><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 创建 ServerA HBA1 别名  </span></span><br><span class="line">alicreate <span class="string">&quot;ServerA_HBA1_1&quot;</span>,<span class="string">&quot;110000e08b0ffc8a&quot;</span>  </span><br><span class="line">alicreate <span class="string">&quot;ServerA_HBA1_2&quot;</span>,<span class="string">&quot;110000e08b0ffc8b&quot;</span>   </span><br><span class="line"></span><br><span class="line"><span class="meta"># 创建 存储 EMC_VMAX10K SPA SPB 别名  </span></span><br><span class="line">alicreate <span class="string">&quot;EMC_VMAX10K_SPA&quot;</span>,<span class="string">&quot;110000e08b0ffc01&quot;</span>  </span><br><span class="line">alicreate <span class="string">&quot;EMC_VMAX10K_SPB&quot;</span>,<span class="string">&quot;110000e08b0ffc02&quot;</span>  </span><br><span class="line"></span><br><span class="line"><span class="meta"># 创建 备份磁带库 IBM_TS3310 SPA SPB 别名  </span></span><br><span class="line">alicreate <span class="string">&quot;IBM_TS3310_SPA&quot;</span>,<span class="string">&quot;110000e08b0ffca1&quot;</span>  </span><br><span class="line">alicreate <span class="string">&quot;IBM_TS3310_SPB&quot;</span>,<span class="string">&quot;110000e08b0ffca2  </span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 创建 HBA1_1 到存储 SP A、B 的 Zone  </span></span><br><span class="line">zoneCreate <span class="string">&quot;ServerA_HBA1_1_To_EMC_VMAX10K&quot;</span>,\</span><br><span class="line"><span class="string">&quot;ServerA_HBA1_1;\</span></span><br><span class="line">EMC_VMAX10_SPA;\</span><br><span class="line">EMC_VMAX10_SPB<span class="string">&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 创建 HBA1_2 到备份磁带库 IBM_TSC3310 的 Zone(备份没有多路径，只需要接一个控制器)  </span></span><br><span class="line">zoneCreate <span class="string">&quot;ServerA_HBA1_2_To_IBM_TSC3310&quot;</span>,\</span><br><span class="line"><span class="string">&quot;ServerA_HBA1_2;\</span></span><br><span class="line">IBM_TSC3310_SPA<span class="string">&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 添加到 cfg01 </span></span><br><span class="line">cfgadd <span class="string">&quot;cfg01&quot;</span>,\</span><br><span class="line"><span class="string">&quot;ServerA_HBA1_1_To_EMC_VMAX10K;\</span></span><br><span class="line">ServerA_HBA1_2_To_IBM_TSC3310<span class="string">&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 保存 cfg</span></span><br><span class="line">CfgSave</span><br><span class="line"></span><br><span class="line"><span class="meta"># 激活 cfg01</span></span><br><span class="line">CfgEnable <span class="string">&quot;cfg01&quot;</span></span><br></pre></td></tr></table></figure>
<h5 id="SAN-Switch2"><a href="#SAN-Switch2" class="headerlink" title="SAN Switch2:"></a>SAN Switch2:</h5><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 创建 ServerA HBA2 别名  </span></span><br><span class="line">alicreate <span class="string">&quot;ServerA_HBA2_1&quot;</span>,<span class="string">&quot;110000e08b0ffc8c&quot;</span>  </span><br><span class="line">alicreate <span class="string">&quot;ServerA_HBA2_2&quot;</span>,<span class="string">&quot;110000e08b0ffc8d&quot;</span>   </span><br><span class="line"></span><br><span class="line"><span class="meta"># 创建 存储 EMC_VMAX10K SPC SPD 别名  </span></span><br><span class="line">alicreate <span class="string">&quot;EMC_VMAX10K_SPC&quot;</span>,<span class="string">&quot;110000e08b0ffc03&quot;</span>  </span><br><span class="line">alicreate <span class="string">&quot;EMC_VMAX10K_SPD&quot;</span>,<span class="string">&quot;110000e08b0ffc04&quot;</span>  </span><br><span class="line"></span><br><span class="line"><span class="meta"># 创建 HBA2 到存储 SP C、D 的 Zone  </span></span><br><span class="line">zoneCreate <span class="string">&quot;ServerA_HBA2_To_EMC_VMAX10K&quot;</span>,\</span><br><span class="line"><span class="string">&quot;ServerA_HBA2_1;\</span></span><br><span class="line">ServerA_HBA2_2;\</span><br><span class="line">EMC_VMAX10_SPC;\</span><br><span class="line">EMC_VMAX10_SPD<span class="string">&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 添加到 cfg01 </span></span><br><span class="line">cfgadd <span class="string">&quot;cfg02&quot;</span>,\</span><br><span class="line">“ServerA_HBA2_To_EMC_VMAX10K<span class="string">&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 保存 cfg</span></span><br><span class="line">CfgSave</span><br><span class="line"></span><br><span class="line"><span class="meta"># 激活 cfg02</span></span><br><span class="line">CfgEnable <span class="string">&quot;cfg02&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>存储</tag>
      </tags>
  </entry>
  <entry>
    <title>查看CentOS系统版本信息</title>
    <url>//post/centos-info.html</url>
    <content><![CDATA[<p>不同发行版有不同的方法，我用CentOS比较多，这里以CentOS为例  </p>
<span id="more"></span>  

<h2 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsb_release -a</span><br></pre></td></tr></table></figure>
<p>如果提示：bash:lsb_release: command not found<br>则执行  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install lsb –y</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 即可列出所有版本信息：</span></span><br><span class="line"><span class="comment"># 适用于所有的 Linux 发行版，包括 Redhat、SuSE、Debian 等发行版。</span></span><br><span class="line">lsb_release -a</span><br></pre></td></tr></table></figure>
<h2 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/redhat-release</span><br></pre></td></tr></table></figure>
<h2 id="第三种方法"><a href="#第三种方法" class="headerlink" title="第三种方法"></a>第三种方法</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -q centos-release</span><br></pre></td></tr></table></figure>
<h2 id="第四种方法"><a href="#第四种方法" class="headerlink" title="第四种方法"></a>第四种方法</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/issue</span><br></pre></td></tr></table></figure>
<h2 id="查看内核版本"><a href="#查看内核版本" class="headerlink" title="查看内核版本"></a>查看内核版本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /proc/version </span><br><span class="line"><span class="comment"># 或  </span></span><br><span class="line"><span class="built_in">uname</span> -a</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">rpm -qa | grep kernel</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>群晖入门到进阶系列（一）：系统安装、洗白与局域网唤醒</title>
    <url>//post/synology-series-1.html</url>
    <content><![CDATA[<p>　　该<a href="/tags/%E7%B3%BB%E5%88%97/">系列</a>文章是继 <a href="https://www.iots.vip/post/diy-nas-woniuxingji.html">不到300块捡一台4盘位NAS——蜗牛星际上车记</a> 后，对折腾黑<a href="/tags/%E7%BE%A4%E6%99%96/">群晖</a>系统的记录，部分内容也适用于其他硬件平台的朋友与白<a href="/tags/%E7%BE%A4%E6%99%96/">群晖</a>土豪。<br>　　本系列包括系统的安装、洗白、内外网环境配置、套件的优化、 Docker 、PT 下载，以及诸如 <code>ipkg</code> 环境配置等较为高级用法，基本涵盖了这个等级硬件平台下大部分能折腾的地方。<span id="more"></span>  </p>
<blockquote class="blockquote-center">
<p>注：本文很多内容来自互联网，仅供学习交流，如侵删。感谢 <a href="https://xpenology.com/forum/profile/23252-jun/">Jun</a> 大佬的引导与其他诸多大佬的热心分享，Alliot 只是记录整理自己的动手过程，以便自己重装时翻阅，同时给需要的朋友作参考，由于部分资料为零散记录或群友帮助，所以部分出处不详，如有侵权，请随时在文末评论区或邮件联系。</p>

</blockquote>   
<p>　　本系列用到的所有工具： </p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">链接：https://pan.baidu.com/s/1LXy9zo51a0wGbCjz24MsIg </span><br><span class="line">提取码：iots </span><br><span class="line"><span class="section">===== 2021-07-08 更新 ======</span></span><br><span class="line">阿里云盘链接： https://www.aliyundrive.com/s/veSwnbK6egv</span><br><span class="line">通过这个链接注册可以多领取500G容量： https://pages.aliyundrive.com/mobile-page/web/beinvited.html?code=f8fd344</span><br></pre></td></tr></table></figure>
<h3 id="硬件平台"><a href="#硬件平台" class="headerlink" title="硬件平台"></a>硬件平台</h3><p>　　Alliot 这里是用的<a href="https://www.iots.vip/post/diy-nas-woniuxingji.html">不到300块捡一台4盘位NAS——蜗牛星际上车记</a> 这台蜗牛星际 D 版。  </p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">CPU: Intel Celeron J1900  </span></span><br><span class="line"><span class="section">内存: 威刚 DDR3L 4G 1666  </span></span><br><span class="line"><span class="section">引导盘: 金士顿 4G USB2.0  </span></span><br><span class="line">原装 mSATA 盘已舍弃，至于为什么后面会说到 </span><br></pre></td></tr></table></figure>

<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>　　Alliot 这里没有采用大多数人选择的二合一引导方法，而是用的古老的 U 盘引导大法，理由很简单：白群晖实际上也是采用类似的机制，主板上有块闪存单独存放引导文件，而 DSM 系统则在每块硬盘上的第一个分区。<br>　　这里谈谈很多人推崇的二合一引导（蜗牛星际最多，安装在自带的 mSATA 盘中），优点有：方便，不用在数据盘上丢系统分区；系统不在数据盘上，方便硬盘休眠。 缺点也很明显，系统与引导均在一块盘上，这块盘坏了，套件与系统配置等均会丢失，而做单独引导盘，系统会存在于每块数据盘，引导盘坏了，重刷一遍引导依照提示迁移几分钟便能正常使用。<br>　　蜗牛星际还有个原因就是，引导放在 mSATA 中会出现所有硬盘 S.M.A.R.T 信息无法正常显示的情况。这对于 NAS 来说是很危险的，群晖可以根据 S.M.A.R.T 来提示磁盘预损毁，没有 S.M.A.R.T 信息，也许有一天你会发现硬盘毫无征兆的就损毁了，无法抢救数据。<br>　　虽然网上有更改引导来修复 S.M.A.R.T 的方法，但是这里最优解还是 U 盘，不多赘述。<br>　　本文需要用到的工具有：  </p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">DiskImg.exe：	将 IMG 引导写入引导盘所用工具   </span><br><span class="line"><span class="symbol">synoboot.img:</span>	ds918+ 引导  </span><br><span class="line"><span class="symbol">DSM.xxxx.pat:</span>	群晖系统镜像 </span><br><span class="line">osfmount.exe：  img挂载工具</span><br><span class="line">ChipGenius：  U 盘 PID、VID 获取工具  </span><br><span class="line"><span class="symbol">Xshell:</span>  ssh 远程连接工具  </span><br><span class="line"></span><br><span class="line"><span class="meta"># WEPE:	PE 盘制作工具，如果想将引导写入 mSATA，则需要，U 盘不需要 </span></span><br></pre></td></tr></table></figure>
<h3 id="读取-VID、PID"><a href="#读取-VID、PID" class="headerlink" title="读取 VID、PID"></a>读取 VID、PID</h3><p>　　将准备好的引导 U 盘插入电脑，打开 ChipGenius 工具，选择你的 U 盘，记录显示的 VID、PID 信息洗白备用，一般为如下格式（mSATA 没有这些信息，可以跳过）：  </p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">USB</span>设备ID: VID = <span class="number">0</span>CF3 PID = E500</span><br></pre></td></tr></table></figure>

<h3 id="引导修改"><a href="#引导修改" class="headerlink" title="引导修改"></a>引导修改</h3><p>　　安装前面下载的 <code>osfmount.exe</code>，选择 “Mount new”：<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-osfmount-mountnew.png" alt="群晖-osfmount-mountnew.png"><br>选择前面下载的引导 <code>synoboot.img</code>，选择第一个分区挂载：<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-osfmount-mountpartition.png" alt="群晖-osfmount-mountpartition.png"><br>记得取消 read-only 的勾选（否则无法修改）：<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-osfmount-%E5%85%B3%E9%97%ADreadonly.png" alt="群晖-osfmount-关闭readonly.png"><br>挂载完成后，可在“我的电脑”中发现新的本地磁盘分区，进入该分区的 grub 目录，使用 notepad++ 或记事本修改 grub.cfg 文件：<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-%E4%BF%AE%E6%94%B9grub.cfg.png" alt="群晖-修改grub.cfg.png"><br>约 22 行处将图示区域修改为前面获得的 U 盘的 VID、PID，保存退出：<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-%E4%BF%AE%E6%94%B9vidpid.png" alt="群晖-修改vidpid.png"><br>取消挂载：<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-osfmount-dismount.png" alt="群晖-osfmount-dismount.png">  </p>
<h3 id="引导写入"><a href="#引导写入" class="headerlink" title="引导写入"></a>引导写入</h3><p>　　打开 DiskImg 工具，驱动器选择 U 盘，镜像则选择刚才修改过的 <code>synoboot.img</code> 写入，完成后记得安全移除 U 盘。<br>　　注： 写入过程中如果出现报错，很可能是由于你系统上有其他应用占用，可以换其他电脑试试或在虚拟机中完成。  </p>
<h3 id="BIOS-设置"><a href="#BIOS-设置" class="headerlink" title="BIOS 设置"></a>BIOS 设置</h3><p>　　本文以蜗牛星际为例，其他主板请网上查怎样进入 BIOS 以及开启 WOL。插入制作好的引导 U 盘，连接网线、鼠标键盘显示器，上电，不停按 DEL 进入 BIOS，在 <code>Advanced</code> 页进入 <code>ACPI Settings</code>（推荐先  F3 将 BIOS 恢复为默认配置后再进行设置 ），将 <code>Resume By Onboard LAN</code> 设置为 <code>enable</code> ，为之后的局域网唤醒（ WOL）做准备，同时在 <code>Boot</code> 页将引导 U 盘移动到第一项，将 <code>UEFI</code> 引导改为 <code>Legacy</code>（有朋友做好引导后开机发现无法正常引导，多半是因为这个选项没有设置）。F4（部分 BIOS 不同，根据 BIOS 上提示）保存配置并重启。  </p>
<h3 id="安装-DSM"><a href="#安装-DSM" class="headerlink" title="安装 DSM"></a>安装 DSM</h3><p>　　继上一步重启后（请保证机器中除引导外至少有一块硬盘），显示界面（图片看不清可以右键在新标签页打开图片） 如下：<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-%E5%BC%95%E5%AF%BC%E9%80%89%E6%8B%A9%E7%95%8C%E9%9D%A2.png" alt="群晖-引导选择界面.png"><br>　　选择第一项回车，即可进入下一界面：<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-%E5%BC%95%E5%AF%BC%E5%90%AF%E5%8A%A8%E6%88%90%E5%8A%9F.png" alt="群晖-引导启动成功.png"><br>　　等待两至三分钟后，使用局域网内的电脑访问: <a href="http://find.synology.com/">http://find.synology.com</a> 搜索局域网内的 DiskStation（如果找不到，可以尝试使用 <a href="https://cndl.synology.cn/download/Tools/Assistant/6.1-15030/Windows/synology-assistant-6.1-15030.exe">群晖助手</a>，或通过路由器管理界面的 DHCP 列表得到群晖的 IP。<br>　　在浏览器中打开前面得到的 IP，开始安装 DSM：<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-%E5%87%86%E5%A4%87%E5%AE%89%E8%A3%85DSM.png" alt="群晖-准备安装DSM.png"><br>开始设置，选择“手动安装 pat”，路径选择文章开头下载的 pat 文件：<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-%E9%80%89%E6%8B%A9%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85pat.png" alt="群晖-选择手动安装pat.png"><br>安装初始化：<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-DSM%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90%E5%88%9D%E5%A7%8B%E5%8C%96.png" alt="群晖-DSM安装完成初始化.png"><br>创建 DSM 管理员用户：<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-%E5%88%9B%E5%BB%BADSM%E7%AE%A1%E7%90%86%E5%91%98%E7%94%A8%E6%88%B7.png" alt="群晖-创建DSM管理员用户.png"><br>设置更新检查频率，黑群晖更新系统很有可能无法引导，这里选择“手动通知计划”<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-%E8%AE%BE%E7%BD%AE%E6%9B%B4%E6%96%B0%E6%A3%80%E6%9F%A5%E9%A2%91%E7%8E%87.png" alt="群晖-设置更新检查频率.png"><br>未全洗白无法注册 QC，使用官方的内网穿透服务，所以这里我们选择跳过注册：<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-%E8%B7%B3%E8%BF%87QC%E6%B3%A8%E5%86%8C.png" alt="群晖-跳过QC注册.png"><br>至此，DSM 安装完成。  </p>
<h3 id="存储空间配置"><a href="#存储空间配置" class="headerlink" title="存储空间配置"></a>存储空间配置</h3><h4 id="新建存储池"><a href="#新建存储池" class="headerlink" title="新建存储池"></a>新建存储池</h4><p>　　现在我们还无法直接使用我们的硬盘，我们需要将用来存储数据的硬盘初始化，点击右上角（类似开始菜单），选择“存储空间管理员” ：<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86%E5%91%98.png" alt="群晖-存储空间管理员.png"><br>　　在“存储池”中选择“新增”：<br>　　<img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-%E6%96%B0%E5%BB%BA%E5%AD%98%E5%82%A8%E6%B1%A01.png" alt="群晖-新建存储池1.png"><br>　　按照自己的需求选择，有一块盘分多个存储空间的请选择第二项，否则选择第一项：<br>　　<img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-%E6%96%B0%E5%BB%BA%E5%AD%98%E5%82%A8%E6%B1%A02.png" alt="群晖-新建存储池2.png"><br>　　选择 RAID 类别（关于 RAID 级别，可以看之前的文章<a href="/post/talk-about-raid.html">浅谈raid</a>，群晖的软 RAID 并不推荐，很多人喜欢 RAID 5，其实大容量下 RAID 5 并不能保证数据的安全具体可以查看相关资料），关于数据的存储安全，后面会有文章继续讲到 <a href="https://www.iots.vip/">Alliot</a> 自己的备份做法，这里推荐 Basic：<br>　　<img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A8%E6%B1%A0%E5%B1%9E%E6%80%A7.png" alt="群晖-配置存储池属性.png"><br>　　选择我们的数据硬盘：<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-%E9%80%89%E6%8B%A9%E6%95%B0%E6%8D%AE%E7%A1%AC%E7%9B%98.png" alt="群晖-选择数据硬盘.png"><br>　　之后硬盘会进入初始化的状态（硬盘中原有的数据会被擦除！）  </p>
<h4 id="新建存储空间"><a href="#新建存储空间" class="headerlink" title="新建存储空间"></a>新建存储空间</h4><p>　　创建了存储池后，我们这时候并不能直接往里面写东西，还需要创建存储空间（这有点类似（当然，只是类似） Linux 的 LVM，初始化磁盘相当于新建 PV，新建存储池相当于新建 VG，而要挂载空间用来使用则还需要在 VG 中新建 LV 也就是类似这里的新建存储空间）<br>　　选择存储空间模式，这里我们选择自定义（因为前面已经创建了存储池）：<br>　　<img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-%E9%80%89%E6%8B%A9%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4%E6%A8%A1%E5%BC%8F.png" alt="群晖-选择存储空间模式.png"><br>　　选择我们先前创建的存储池后，下一步，直到选择文件系统，我们选择 Btrfs（群晖自己文件系统格式，在群晖系统中支持更多的功能），下一步直到应用，等待存储空间初始化完成即可。<br>　　至此，存储空间配置完成。    
　</p>
<h3 id="洗白与局域网唤醒"><a href="#洗白与局域网唤醒" class="headerlink" title="洗白与局域网唤醒"></a>洗白与局域网唤醒</h3><p>　　群晖有三种状态，未洗白、半洗白与全洗白，区别如下：  </p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 未洗白： 即 SN、MAC 均非群晖正版机器的。这种状态下，无法使用 QC，Photo Station、Moment 视频无法生成缩略图，Video Station 无法离线转码、无法选择清晰度。</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 半洗白： 即 SN 为群晖正版机器的，MAC 不是。这种状态下，除了无法使用 QC，其他功能与白群晖没有区别。 </span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 全洗白： 即 SN、MAC 均为群晖正版机器的，且对应。这种状态下，QC 也能正常登陆了，与白群晖功能没有任何区别。</span></span><br></pre></td></tr></table></figure>
<p>　　<a href="https://www.iots.vip/">Alliot</a> 这里选择了半洗白，利用群晖 VMM 安装的 Virtual DSM 的许可证来获得正确的 SN 号，写入引导中完成半洗白。 目前算号器基本绝迹失效了，想要全洗白可直接去网上购买配套的 SN、MAC 地址，不推荐白嫖群晖官方的 QC 服务，很容易翻车，下文介绍半洗白的方法。  </p>
<h4 id="安装-VMM"><a href="#安装-VMM" class="headerlink" title="安装 VMM"></a>安装 VMM</h4><p>　　打开 DSM 桌面的“套件中心”，安装 “Virtual Machine Manager”：<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-%E5%AE%89%E8%A3%85VMM.png" alt="群晖-安装VMM.png"><br>　　按照提示下一步直到安装完成：<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-VMM%E8%AE%BE%E7%BD%AE%E5%90%91%E5%AF%BC1.png" alt="群晖-VMM设置向导1.png"><br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-VMM%E8%AE%BE%E7%BD%AE%E5%90%91%E5%AF%BC2.png" alt="群晖-VMM设置向导2.png"><br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-VMM%E8%AE%BE%E7%BD%AE%E5%90%91%E5%AF%BC3.png" alt="群晖-VMM设置向导3.png"><br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-VMM%E8%AE%BE%E7%BD%AE%E5%90%91%E5%AF%BC4.png" alt="群晖-VMM设置向导4.png">  </p>
<h4 id="新建-VDSM-映像"><a href="#新建-VDSM-映像" class="headerlink" title="新建 VDSM 映像"></a>新建 VDSM 映像</h4><p>　　安装完成后，新建 VDSM 的映像：<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-VMM%E6%96%B0%E5%A2%9E%E6%98%A0%E5%83%8F.png" alt="群晖-VMM新增映像.png"><br>　　选择“下载 Virtual DSM 映像”：<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-VMM%E4%B8%8B%E8%BD%BDVDSM.png" alt="群晖-VMM下载VDSM.png"><br>　　如果连接失败，可以下载离线包：<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-VMM%E4%B8%8B%E8%BD%BDVDSM%E7%A6%BB%E7%BA%BF%E5%8C%85.png" alt="群晖-VMM下载VDSM离线包.png"><br>　　从计算机选择刚才下载的离线包：<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-VMM%E6%96%B0%E5%A2%9E%E6%98%A0%E5%83%8F2.png" alt="群晖-VMM新增映像2.png"><br>按照提示继续，并应用：<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-VMM%E6%96%B0%E5%A2%9E%E6%98%A0%E5%83%8F3.png" alt="群晖-VMM新增映像3.png">  </p>
<h4 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h4><p>　　如下图，按照指引创建虚拟机，选择免费的许可：<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-VMM%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA1.png" alt="群晖-VMM创建虚拟机1.png"><br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-VMM%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA2.png" alt="群晖-VMM创建虚拟机2.png"><br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-VMM%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA3.png" alt="群晖-VMM创建虚拟机3.png"><br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-VMM%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA5.png" alt="群晖-VMM创建虚拟机5.png"><br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-VMM%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA6.png" alt="群晖-VMM创建虚拟机6.png"><br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-VMM%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA7.png" alt="群晖-VMM创建虚拟机7.png">  </p>
<h4 id="记录-SN"><a href="#记录-SN" class="headerlink" title="记录 SN"></a>记录 SN</h4><p>　　启动并连接 VDSM 虚拟机后，打开虚拟机内的 DSM 控制面板，点击“信息中心”，记录序列号备用：<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-%E6%89%93%E5%BC%80%E6%8E%A7%E5%88%B6%E9%9D%A2%E6%9D%BF%E4%BF%A1%E6%81%AF%E4%B8%AD%E5%BF%83.png" alt="群晖-打开控制面板信息中心.png"><br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-VDSM%E5%BA%8F%E5%88%97%E5%8F%B7.png" alt="群晖-VDSM序列号.png"><br>之后，可以关闭并删除该 VDSM 虚拟机，我们要的仅仅是这个 SN 号，将这个 SN 填入到先前我们修改 VID、PID 的 <code>grub.cfg</code> 的 SN 字段即可完成半洗白。下面是直接用 <code>ssh</code> 来修改 <code>grub.cfg</code> 的方法：   </p>
<h4 id="开启-ssh"><a href="#开启-ssh" class="headerlink" title="开启 ssh"></a>开启 ssh</h4><p>　　回到群晖的“控制面板”，打开 <code>ssh</code> 功能：<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-%E6%89%93%E5%BC%80ssh%E5%8A%9F%E8%83%BD.png" alt="群晖-打开ssh功能.png">  </p>
<h4 id="ssh-连接并获得-root-权限"><a href="#ssh-连接并获得-root-权限" class="headerlink" title="ssh 连接并获得 root 权限"></a>ssh 连接并获得 root 权限</h4><p>　　使用 Xshell 或 putty 等终端连接工具连接，此处以 Xshell 为例（安装包均在文章开头的链接里）：<br>新建连接：<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-xshell%E8%BF%9E%E6%8E%A51.png" alt="群晖-xshell连接1.png"><br>填入群晖的 IP：<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-xshell%E8%BF%9E%E6%8E%A52.png" alt="群晖-xshell连接2.png"><br>填入管理员用户名密码：<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-xshell%E8%BF%9E%E6%8E%A53.png" alt="群晖-xshell连接3.png"><br>连接后，使用 <code>sudo -i</code> 并输入管理员密码以获得 root 权限：<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-ssh%E8%8E%B7%E5%BE%97%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90.png" alt="群晖-ssh获得管理员权限.png">  </p>
<h4 id="挂载引导分区"><a href="#挂载引导分区" class="headerlink" title="挂载引导分区"></a>挂载引导分区</h4><p>　　使用如下命令挂载引导分区到 &#x2F;tmpboot 目录：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建挂载点，这里不推荐其他文章的将挂载点丢到 /tmp 下，可能导致以后 boot 无法挂载上</span>    </span><br><span class="line">cd /  &amp;&amp; mkdir /tmpboot   </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入 /dev 目录</span></span><br><span class="line">cd /dev</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">挂载 boot 分区到 /tmpboot 目录，这里切记： synoboot1 不能使用绝对路径，否则会提示超级块错误，无法挂载</span>  </span><br><span class="line">mount -t vfat synoboot1 /tmpboot  </span><br><span class="line"></span><br><span class="line">cd /tmpboot/grub   </span><br></pre></td></tr></table></figure>
<p>这里如果出现如下报错：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mount: wrong fs type, bad option, bad superblock on synoboot1,</span><br><span class="line">       missing codepage or helper program, or other error</span><br><span class="line"></span><br><span class="line">       In some cases useful info is found in syslog - try</span><br><span class="line">       dmesg | tail or so.</span><br></pre></td></tr></table></figure>
<p>暂时没有解决方法，只能使用前面的方法重新制作引导 U 盘，将我们得到的 SN 与群晖的实际 MAC 地址在更改 VID、PID 的步骤中一并更新上去（重新制作引导不会导致系统重装，这也是使用 U 盘引导的一个好处，开机时按照步骤迁移即可，不会对系统产生任何影响），如果没有如上报错请继续下一步骤。  </p>
<h4 id="修改grub-cfg"><a href="#修改grub-cfg" class="headerlink" title="修改grub.cfg"></a>修改grub.cfg</h4><p>　　使用 <code>vi grub.cfg</code> 编辑 <code>grub.cfg</code> 找到如下内容：  </p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> <span class="attribute">sn</span>=1780PDN123456</span><br><span class="line"><span class="built_in">set</span> <span class="attribute">mac1</span>=001132123456  </span><br></pre></td></tr></table></figure>
<p>　　按 i 进入编辑模式，将 sn 字段后的部分改为前面我们获取到的 SN，顺便将 mac1 字段后的部分改为路由器中看到的群晖的 MAC 地址以便后面做局域网唤醒（WOL）。<br>　　之后按 ESC，切换为大写，输入 ZZ，即可保存。<br>　　重启系统，进入控制面板，搜索 <code>WOL</code>，勾选 <code>启用局域网唤醒</code>，至此，半洗白与局域网唤醒设置完成。关于局域网唤醒，可以将群晖关机，使用群晖助手中的唤醒或路由器后台中的唤醒来测试。   </p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>　　至此，我们已经完成了黑群晖的安装、半洗白与局域网唤醒的设置，本文提供的引导是目前 Alliot 正在使用的，蜗牛星际 D 版完美适配，一年了没有出现什么问题，如果是其他硬件平台，可以去找相应相应的引导尝试更换，这里就不多赘述。  </p>
]]></content>
      <categories>
        <category>群晖入门到进阶系列</category>
      </categories>
      <tags>
        <tag>折腾</tag>
        <tag>系列</tag>
        <tag>群晖</tag>
      </tags>
  </entry>
  <entry>
    <title>群晖入门到进阶系列（三）：DSM 优化</title>
    <url>//post/synology-series-3.html</url>
    <content><![CDATA[<p>　　本文针对类似 Alliot 这种强迫症患者对 DSM 进行一些系统级的小优化，主要内容有：屏蔽系统更新、CPU 显示补丁、硬盘休眠、断网自动关机。没有这方面的需求的朋友可以暂且跳过本文。<span id="more"></span>  </p>
<h3 id="屏蔽系统更新"><a href="#屏蔽系统更新" class="headerlink" title="屏蔽系统更新"></a>屏蔽系统更新</h3><p>　　众所周知，黑群晖在更新系统的时候由于引导不适配很容易导致翻车，因此，为了防止自己手贱，将群晖的更新域名通过 hosts 指向一个错误的 IP，让其系统无法获取更新来达到屏蔽更新的目的。  </p>
<h4 id="修改-hosts"><a href="#修改-hosts" class="headerlink" title="修改 hosts"></a>修改 hosts</h4><p>　　<a href="/post/synology-series-1.html#ssh-%E8%BF%9E%E6%8E%A5%E5%B9%B6%E8%8E%B7%E5%BE%97-root-%E6%9D%83%E9%99%90">ssh 连接并群晖获取 root 权限</a>，编辑 <code>/etc/hosts</code> 文件，将 <code>update.synology.com</code> 指向任意一个错误的 IP：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo -i  </span><br><span class="line"></span><br><span class="line">vi /etc/hosts # 按 i 进入插入模式，在底行加入如下：  </span><br><span class="line">   127.0.0.1 update.synology.com </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">之后按 ESC，切换为大写，输入 ZZ，即可保存</span></span><br></pre></td></tr></table></figure>
<h4 id="去掉桌面与控制面板更新提示"><a href="#去掉桌面与控制面板更新提示" class="headerlink" title="去掉桌面与控制面板更新提示"></a>去掉桌面与控制面板更新提示</h4><h5 id="法一："><a href="#法一：" class="headerlink" title="法一："></a>法一：</h5><p>在前面屏蔽系统更新的基础上，<a href="/post/synology-series-1.html#ssh-%E8%BF%9E%E6%8E%A5%E5%B9%B6%E8%8E%B7%E5%BE%97-root-%E6%9D%83%E9%99%90">ssh 连接并群晖获取 root 权限</a>，删除提醒文件：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf /var/update/check_result/last_notified/*</span><br><span class="line">rm -rf /var/update/check_result/update</span><br></pre></td></tr></table></figure>
<p>即可。  </p>
<h5 id="法二："><a href="#法二：" class="headerlink" title="法二："></a>法二：</h5><p>　　这是一个曲线救国的方法，通过替换图标文件来达到隐藏更新提示的目的。 <a href="/post/synology-series-1.html#ssh-%E8%BF%9E%E6%8E%A5%E5%B9%B6%E8%8E%B7%E5%BE%97-root-%E6%9D%83%E9%99%90">ssh 连接并群晖获取 root 权限</a> 逐行执行如下命令：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp /usr/syno/synoman/webman/modules/AdminCenter/images/default/1x/badge_control_panel.png /usr/syno/synoman/webman/modules/AdminCenter/images/default/1x/badge_control_panel.png.bak  </span><br><span class="line">cp /usr/syno/synoman/webman/modules/AdminCenter/images/default/2x/badge_control_panel.png /usr/syno/synoman/webman/modules/AdminCenter/images/default/2x/badge_control_panel.png.bak  </span><br><span class="line">wget -O /usr/syno/synoman/webman/modules/AdminCenter/images/default/1x/badge_control_panel.png http://static.iots.vip/transparent.png</span><br><span class="line">wget -O /usr/syno/synoman/webman/modules/AdminCenter/images/default/2x/badge_control_panel.png http://static.iots.vip/transparent.png</span><br><span class="line"></span><br><span class="line">cp /usr/syno/synoman/synoSDSjslib/images/default/1x/dsm5_notification_num.png /usr/syno/synoman/synoSDSjslib/images/default/1x/dsm5_notification_num.png.bak</span><br><span class="line">cp /usr/syno/synoman/synoSDSjslib/images/default/2x/dsm5_notification_num.png /usr/syno/synoman/synoSDSjslib/images/default/2x/dsm5_notification_num.png.bak</span><br><span class="line">wget -O /usr/syno/synoman/synoSDSjslib/images/default/1x/dsm5_notification_num.png http://static.iots.vip/transparent.png</span><br><span class="line">wget -O /usr/syno/synoman/synoSDSjslib/images/default/2x/dsm5_notification_num.png http://static.iots.vip/transparent.png</span><br><span class="line"></span><br><span class="line">cp /usr/syno/synoman/synoSDSjslib/images/default/1x/dsm5_badge_num.png /usr/syno/synoman/synoSDSjslib/images/default/1x/dsm5_badge_num.png.bak </span><br><span class="line">cp /usr/syno/synoman/synoSDSjslib/images/default/2x/dsm5_badge_num.png /usr/syno/synoman/synoSDSjslib/images/default/2x/dsm5_badge_num.png.bak </span><br><span class="line">wget -O /usr/syno/synoman/synoSDSjslib/images/default/1x/dsm5_badge_num.png http://static.iots.vip/transparent.png</span><br><span class="line">wget -O /usr/syno/synoman/synoSDSjslib/images/default/2x/dsm5_badge_num.png http://static.iots.vip/transparent.png</span><br></pre></td></tr></table></figure>
<p>完成后需要注销登录，并清理浏览器缓存才可看到效果。<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-%E6%B3%A8%E9%94%80%E7%99%BB%E5%BD%95.png" alt="群晖-注销登录.png">  </p>
<h3 id="CPU-显示补丁"><a href="#CPU-显示补丁" class="headerlink" title="CPU 显示补丁"></a>CPU 显示补丁</h3><p>　　群晖控制面板信息中心中显示的 CPU 信息是根据系统型号对应的硬件信息写死的，比如白群晖 918+ 的 CPU 是 J3455，不管你黑群晖使用的什么 CPU，918+ 系统显示的都是 J3455，可以通过 <a href="https://github.com/FOXBI/ch_cpuinfo">FOXBI</a> 大佬的补丁来让其正确显示：<br><a href="/post/synology-series-1.html#ssh-%E8%BF%9E%E6%8E%A5%E5%B9%B6%E8%8E%B7%E5%BE%97-root-%E6%9D%83%E9%99%90">ssh 连接并群晖获取 root 权限</a> 逐行执行如下命令：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate http://static.iots.vip/sh/ch_cpuinfo.sh &amp;&amp; sh ch_cpuinfo.sh  </span><br></pre></td></tr></table></figure>
<p>按照提示输入 1 回车 y 回车，之后注销登录，并清理浏览器缓存即可看到效果如图：<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-CPU%E4%BF%A1%E6%81%AF.png" alt="群晖-CPU信息.png"></p>
<h3 id="硬盘休眠"><a href="#硬盘休眠" class="headerlink" title="硬盘休眠"></a>硬盘休眠</h3><p>　　先说明，群晖的休眠只能实现所有硬盘休眠，所有硬盘唤醒，因此，在 Alliot 看来，群晖硬盘休眠并不好，总有一些文件在读写（比如日志），频繁的休眠、唤醒反而容易导致硬盘寿命下降。<br>　　不过，非要休眠也不是没有办法，konglang_616 大佬找出的问题原因在此：<a href="http://koolshare.cn/thread-149266-2-2.html">黑群硬盘休眠问题的一种解决思路</a> ，主要就是因为黑裙的硬件等原因，<code>/var/log/scemd.log</code> 这个日志文件一直有输出，所以将该日志文件移到内存即可。<br>　　<a href="/post/synology-series-1.html#ssh-%E8%BF%9E%E6%8E%A5%E5%B9%B6%E8%8E%B7%E5%BE%97-root-%E6%9D%83%E9%99%90">ssh 连接并群晖获取 root 权限</a> 执行如下命令：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;s/var\/log/dev\/shm/&#x27; /etc.defaults/syslog-ng/patterndb.d/scemd.conf</span><br></pre></td></tr></table></figure>
<p>重启即可。  </p>
<h3 id="断网自动关机"><a href="#断网自动关机" class="headerlink" title="断网自动关机"></a>断网自动关机</h3><p>　　由于我的 UPS 不带通讯功能，无法接入群晖停电自动关机，因此，利用 shell 脚本不停的 <code>ping</code> 路由器，当路由器无法 <code>ping</code> 通时，延时一段时间后调用 <code>poweroff</code> 关闭群晖，实现断网自动关机。<br>　　<a href="/post/synology-series-1.html#ssh-%E8%BF%9E%E6%8E%A5%E5%B9%B6%E8%8E%B7%E5%BE%97-root-%E6%9D%83%E9%99%90">ssh 连接并群晖获取 root 权限</a> 执行如下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd / # 切换目录到 / </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以下内容全部复制，粘贴执行</span></span><br><span class="line">tee netcheck.sh &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/env bash</span></span><br><span class="line">MonitorIP=192.168.1.1</span><br><span class="line">DelayTime=180s</span><br><span class="line">if `ping $MonitorIP -W 2 -w 2 -c 2 &gt;/dev/null`;then</span><br><span class="line">    echo `date +&#x27;%Y-%m-%d %H:%M:%S&#x27;`</span><br><span class="line">    echo &quot;Power on.&quot;</span><br><span class="line">else</span><br><span class="line">    echo `date +&#x27;%Y-%m-%d %H:%M:%S&#x27;`</span><br><span class="line">    synologset1 sys warn 0x11600036</span><br><span class="line">    sleep $DelayTime</span><br><span class="line">    if `ping $MonitorIP -W 2 -w 2 -c 2 &gt;/dev/null`;then</span><br><span class="line">    synologset1 sys warn 0x11600035</span><br><span class="line">    else</span><br><span class="line">    synologset1 sys warn 0x11600037</span><br><span class="line">    poweroff</span><br><span class="line">    fi</span><br><span class="line">fi</span><br><span class="line">exit 0</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<p>回到 DSM 网页，打开“控制面板”，选择“任务计划”，新增“用户定义的脚本”，如下图配置：<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BB%BB%E5%8A%A1.png" alt="群晖-计划任务自定义任务.png"><br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1%E6%96%AD%E7%BD%91%E5%85%B3%E6%9C%BA.png" alt="群晖-计划任务断网关机.png"><br>在“任务设置”的“用户自定义脚本”中填入：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bash /netcheck.sh &gt;&gt; /netcheck.log</span><br></pre></td></tr></table></figure>
<p>确定并保存即可。  </p>
<h3 id="解决DSM6-2添加第三方套件源无效位置的问题"><a href="#解决DSM6-2添加第三方套件源无效位置的问题" class="headerlink" title="解决DSM6.2添加第三方套件源无效位置的问题"></a>解决DSM6.2添加第三方套件源无效位置的问题</h3><p>&emsp;&emsp;这是由于群晖内部的 CA 根证书库到期导致的，更新替换一下即可：<br><a href="/post/synology-series-1.html#ssh-%E8%BF%9E%E6%8E%A5%E5%B9%B6%E8%8E%B7%E5%BE%97-root-%E6%9D%83%E9%99%90">ssh 连接并群晖获取 root 权限</a>   </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mv /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt.bak</span><br><span class="line">sudo curl -Lko /etc/ssl/certs/ca-certificates.crt https://curl.se/ca/cacert.pem</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>群晖入门到进阶系列</category>
      </categories>
      <tags>
        <tag>折腾</tag>
        <tag>系列</tag>
        <tag>群晖</tag>
      </tags>
  </entry>
  <entry>
    <title>电源怎么选——蜗牛星际上车记</title>
    <url>//post/woniuxingji-powersupply.html</url>
    <content><![CDATA[<p>　　继<a href="https://www.iots.vip/post/diy-nas-woniuxingji.html">不到300块捡一台4盘位NAS——蜗牛星际上车记</a> 后，一直没怎么去折腾它，吃灰大半年，这次新冠肺炎事件，闲着在家，花时间折腾了一下，改了电源，上了群晖。<span id="more"></span><br>　　为什么一直强调要更换电源，原因在于蜗牛星际普遍使用贴牌电源，这类电源通常虚标严重、波纹超标，这对于矫情的机械硬盘来说，无疑是致命的。（机械硬盘启动电流大，虚标电源功率不够的情况下很容易损坏；纹波太大容易损坏硬盘的电子器件），所以，为了硬盘的安全，这电源是强烈建议更换的。<br>　　至于硬盘笼背板，Alliot 的看法是可换可不换，因为不做热插拔的情况下，背板只要供电跟上了，问题还是不大的，毕竟我们 SATA 线直连主板也一样用。淘宝目前有配套替换的定制背板，但是价格在 100 来块（奸商赚的太狠了，量产不到十块钱的成本），性价比极低不说，单纯的加了一些钽电容之类的，怕是也不能保证热插拔时的硬盘安全，况且，热插拔本身就是一个存在风险的操作，家用 NAS 不像企业级承载不可停机业务，所以就算是白群晖也最好不要热插拔。  </p>
<h3 id="电源选择"><a href="#电源选择" class="headerlink" title="电源选择"></a>电源选择</h3><p>　　机械硬盘由于电机的特性，存在一个启动瞬时功率的问题，启动时部分规格的硬盘甚至能够到 2 A 往上的瞬时电流，平稳运行以后电流减小，众所周知，NAS 里，盘（数据）比机器贵，启动时瞬时功率不足也很容易导致硬盘寿命缩短，因此，NAS 的电源一定要考虑启动时的瞬时功率，一般给到 2A 至 3A 一个盘比较稳妥。<br>　　蜗牛星际使用小 1U 尺寸电源(FLEX)，尺寸为 15<em>8</em>4 cm，对应蜗牛的主板需要一根 20+4 PIN 供电，再加两根大 4D 供电给硬盘背板。<br>　　我选择的是 海韵 SS-200SU 拆机电源，深水鱼上 90 元到手。这个电源是我在 “台达、全汉拆机电源” 与 “海韵 SSP-300”、”益衡 7025b “ 之间的折中选择，前者动手的点比较多，噪音大，需要改线，价格也要跑到 100 来块了，后者是很棒，但是价格已经被炒到近 300元。<br>　　<img data-src="https://static.iots.vip/%E6%B5%B7%E9%9F%B5%E7%94%B5%E6%BA%90%E6%8B%86%E8%A7%A3.png" alt="海韵电源拆解.png"><br>　　用料还是很扎实的，这里 Alliot 拆开后将其风扇轴承上了一些润滑油，清灰后原样装上之后声音很小了。  </p>
<h3 id="改供电"><a href="#改供电" class="headerlink" title="改供电"></a>改供电</h3><p>　　这款电源，接口为 1 根 20+4 PIN、1 根 CPU 4 PIN 供电、2 个 SATA 供电，并没有 大4D 口给硬盘笼供电，这里卖家送了两个 “刺破 D 口接头”。<br>　　刺破头使用很简单，只需要将线用一字螺丝刀顶入卡扣内即可，不需要剥开绝缘皮。<br>　　<img data-src="https://static.iots.vip/%E6%B5%B7%E9%9F%B5%E7%94%B5%E6%BA%90%E7%94%A8%E5%88%BA%E7%A0%B4D.jpg" alt="海韵电源用刺破D.jpg"><br>　　线序一定要正确，否则将烧坏硬盘，如下图，按照 “红、黑、黑、黄” 线序来安装，并用万用表测试一下是否有断路短路：<br><img data-src="https://static.iots.vip/%E6%B5%B7%E9%9F%B5%E7%94%B5%E6%BA%90%E6%94%B9%E4%BE%9B%E7%94%B5.jpg" alt="海韵电源改供电.jpg"><br>　　我这里其实是比较不推荐的方案，图方便直接将两个 大 4D 口接在了 SATA 供电线上。根据其铭牌，这个电源是有两个 12V 供电的，Alliot 并不确定这根 SATA 供电线是 6A 还是 12A，<br>　　<del>2020年3月15日更新：</del> 找了很久找到了这电源的文档，发现 12V 是联合供电的，12V1 为 SATA 供电，12V2 为 CPU 方 4PIN 供电，所以，我这里直接将 SATA 供电转两个 大 D 口给 4 个盘供电是很危险的，单个 3.5 寸机械硬盘，启动电流甚至可以到接近 3A，这里不推荐这款电源，如果非要上，还是建议将 CPU 方 4 PIN 改成大 D 口。（原本是准备并联达到电流叠加的，但是看到说稳压电源不推荐并联，就此作罢）<br>　　<br>　　<img data-src="https://static.iots.vip/%E6%B5%B7%E9%9F%B5%E7%94%B5%E6%BA%90%E9%93%AD%E7%89%8C.png" alt="海韵电源铭牌.png">
　　</p>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>　　很惊喜，蜗牛星际这台矿车基本不需要太多折腾，换上靠谱的电源后，装上群晖，配合路由器 AliDDNS 公网访问，与白群晖体验基本无异。目前已经三块盘稳定几个月没关机了，很满意。<br>　　群晖系统，整体来说很容易上手， Alliot 最近也整理出了<a href="/tags/%E7%BE%A4%E6%99%96/">群晖系列文章</a>。 </p>
<p><del>2020年5月1日</del><br>　　最近捡漏捡了个 益衡 7025b 拆开看后发现这个电源的做工其实相比海韵还是有一定的差距的，用的线材好像也一般，同时，也是双路供电，不过每一路是 18A，给 4 块盘的蜗牛星际来用还是足够，硬盘较多的话，推荐上 益衡 7030b，300W 相比 7025b 只贵了二三十块，最重要的是单路供电（呼，虽然还是溢价严重，300W 接近 300 元了）。  </p>
]]></content>
      <tags>
        <tag>折腾</tag>
        <tag>硬件</tag>
      </tags>
  </entry>
  <entry>
    <title>群晖入门到进阶系列（七）：自用Docker镜像推荐与配置</title>
    <url>//post/synology-series-7.html</url>
    <content><![CDATA[<p>　　前面我们已经讲完了 Docker 的安装与镜像加速器的配置，本文将介绍一些 Alliot 常用的镜像以及相关的配置。<span id="more"></span>  </p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>　　命令行与群晖的 Docker 套件面板操作，各有优劣，因此，下文的内容有综合两种方式来进行。为了照顾新手，步骤描述可能比较啰嗦，老手其实只需要知道镜像名，去 dockerhub 对应的项目主页查看即可。  </p>
<h4 id="创建卷的挂载目录"><a href="#创建卷的挂载目录" class="headerlink" title="创建卷的挂载目录"></a>创建卷的挂载目录</h4><p>　　很多容器都会要用到卷（volume），以此来做数据的持久化。在容器里，container 内部修改的文件都会保存在 container 的可读写层中，当 container 销毁（如重建 container 等）时，那些文件就会丢失，并且，跨 container 的文件操作，在没有卷（volume）的情况下，也非常麻烦。因此，Alliot 推荐在群晖里新建一个共享目录来专门存放卷（volume）文件。<br>　　打开群晖控制面板-共享文件夹，选择新增，如下图所配置即可：<br>　　<img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-%E6%96%B0%E5%BB%BAdocker%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9.png" alt="群晖-新建docker共享文件夹.png"><br>　　接下来我们需要将这个共享文件夹的权限放大一些，防止容器应用的权限问题（这里我直接将权限改成了最松，安全起见请勿将其他重要文件夹的目录这样配置）：<br>　　<img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-docker%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9%E6%9D%83%E9%99%90.png" alt="群晖-docker共享文件夹权限.png"><br>　　今后我们可以将容器卷挂载点都置于改目录下，便于管理。  </p>
<h3 id="某度云盘远程下载"><a href="#某度云盘远程下载" class="headerlink" title="某度云盘远程下载"></a>某度云盘远程下载</h3><p>　　NAS 作为一个 7*24 小时开机的设备，最大的用处就是下载了，可惜，龟速某度云盘并没有提供群晖相关的客户端来供挂机下载。（cloudSync 属于同步而且有大小限制，不太适合某度云盘的下载），逛 Github 的时候偶然看到了一个 VNC 结合百度云盘 Linux 客户端的 Docker 镜像项目，非常适合在群晖上运行。<br>　　项目地址：  <a href="https://github.com/john-shine/Docker-CodeWeavers_CrossOver-VNC">https://github.com/john-shine/Docker-CodeWeavers_CrossOver-VNC</a>  </p>
<h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><p>　　使用 <a href="/post/synology-series-1.html#ssh-%E8%BF%9E%E6%8E%A5%E5%B9%B6%E8%8E%B7%E5%BE%97-root-%E6%9D%83%E9%99%90">ssh 连接群晖并获取 root 权限</a>   </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从远端 pull 最新 image</span>  </span><br><span class="line">docker pull johnshine/baidunetdisk-crossover-vnc:latest </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从 image 创建 container 并运行</span>   </span><br><span class="line">docker run -d \</span><br><span class="line">--name baidunetdisk \</span><br><span class="line">-p 5901:5901 \ </span><br><span class="line">-p 6080:6080 \</span><br><span class="line">-e vnc_password=your_password \</span><br><span class="line">johnshine/baidunetdisk-crossover-vnc:latest  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上面的参数中，--name 表示容器名（可自定义），-d 表示以守护进程运行，-p 表示映射容器端口（前面为host端口，后面为容器端口），-e 表示环境变量</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">即 映射容器的5901与6080端口到主机5901与6080端口，设置vnc密码为your_password</span>  </span><br></pre></td></tr></table></figure>
<p>　　之后，我们回到 DSM 的 Docker 套件，可以看到我们刚才创建的容器，我们先将它停止，点击编辑：<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-docker%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%981.png" alt="群晖-docker百度网盘1.png"><br>　　在 “卷” 选项卡中，添加文件夹，选择下载保存的位置，装载路径为：<code>/home/baidu/baidunetdiskdownload/</code> （保存位置可以自定义，装载路径必须为这个），应用，之后将该容器启动即可。  </p>
<h4 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h4><p>　　我们可以使用浏览器直接打开:  <code>http://nas的IP:6080</code> 登录账号即可（密码为前面设置的vnc_password值）：<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-docker%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98.png" alt="群晖-docker百度网盘.png"><br>　　或者也可以使用 VNC 客户端(推荐 <a href="https://www.realvnc.com/">VNCVIEWER</a>)进行连接，连接地址为： <code>nas的IP:5901</code> </p>
<h4 id="BUG"><a href="#BUG" class="headerlink" title="BUG"></a>BUG</h4><h5 id="卡LOGO"><a href="#卡LOGO" class="headerlink" title="卡LOGO"></a>卡LOGO</h5><p>　　使用过程中发现有时候容器启动后连接 VNC，会出现卡百度网盘 LOGO 的情况，这时候我们需要使用 <a href="/post/synology-series-1.html#ssh-%E8%BF%9E%E6%8E%A5%E5%B9%B6%E8%8E%B7%E5%BE%97-root-%E6%9D%83%E9%99%90">ssh 连接群晖并获取 root 权限</a> 执行：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入容器内部并开启一个 shell</span> </span><br><span class="line">docker exec -it `docker ps|grep baidu|awk &#x27;&#123;print $1&#125;&#x27;` /bin/bash  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除数据库文件</span>  </span><br><span class="line">rm -f /home/baidu/baidunetdisk/baidunetdiskdata.db</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出容器 shell</span>  </span><br><span class="line">exit  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启该容器</span>  </span><br><span class="line">docker restart `docker ps -a|grep baidu|awk &#x27;&#123;print $1&#125;&#x27;`</span><br></pre></td></tr></table></figure>
<p>重新连接 VNC 即可。  </p>
<h3 id="Aria2NG"><a href="#Aria2NG" class="headerlink" title="Aria2NG"></a>Aria2NG</h3><p>　　aria2 是一款开源的多线程的下载工具，许多软件中都有它的身影（前面被搞的 Pandownload 也是基于 aria2 的）。而 Aria2NG 则是一个基于 aria2 的 UI 版。  </p>
<h4 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h4><p>　　首先，打开群晖 DSM 中的 Docker 套件，在 <code>注册表</code> 中搜索 <code>auska</code> 的 <code>docker-aria2</code> 下载对应的镜像后，在 <code>映像</code> 中选择启动，勾选 <code>使用高权限运行</code>，端口设置里，容器端口不变，本地端口中，6800 为 Aria2 RPC 服务端口(不推荐修改)，8080 为 Aria2NG WEB 服务，按需修改。卷设置中，添加文件夹。创建一个保存配置用的文件夹，Alliot 这里为 <code>docker/aria2</code> 此处可按需自定义，装载路径则必须为 <code>/config</code>，同样的创建一个保存下载文件用的文件夹，Alliot 这里为 <code>homes</code> 按需自定义，装载路径必须为 <code>/mnt</code>，之后再去到群晖的 <code>File Station</code> ，找到这些文件夹，右键属性，设置 Everyone 可读可写。回到 docker 环境设置中，<code>SECRET</code> 变量为 Aria2 RPC 密钥，默认为odcn.top <code>admin</code>，可按需修改，Alliot 这里选择默认，配置完成后应用，到容器里启动即可。<img data-src="https://static.iots.vip/Aria2NG-docker1.png" alt="Aria2NG-docker1.png"><br>　　打开浏览器，访问 <code>群晖的 IP:Aria2NGWEB的端口</code> 即可进入 Aria2NG，这里说一下一个坑，此镜像不会自动配置 Aria2 服务器的 RPC 密钥，即使是默认的 <code>admin</code> 也不行，所以打开 WEB 后会提示 <code>错误 认证失败</code>，需要手动填写先前设置的 <code>SECRET</code>。<img data-src="https://static.iots.vip/Aria2NG-docker2.png" alt="Aria2NG-docker2.png">  </p>
<h4 id="自动更新tracker"><a href="#自动更新tracker" class="headerlink" title="自动更新tracker"></a>自动更新tracker</h4><p>　　很多朋友说 Aria2 速度依旧很慢，这是因为没有添加 tracker 地址导致的，我们利用脚本设置从 <a href="https://github.com/ngosang/trackerslist">tracklist</a> 自动更新 Aria2NG 的 tracker:<br>使用 <a href="/post/synology-series-1.html#ssh-%E8%BF%9E%E6%8E%A5%E5%B9%B6%E8%8E%B7%E5%BE%97-root-%E6%9D%83%E9%99%90">ssh 连接群晖并获取 root 权限</a> 后，新建一个脚本内容如下：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">!/bin/bash</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">CONFFILE 更改成你的 conf 文件真实地址</span></span><br><span class="line">CONFFILE=&quot;/volume1/docker/aria2/aria2.conf&quot;</span><br><span class="line">DOCKERID=&quot;`docker ps| grep aria|awk &#x27;&#123;print $1&#125;&#x27;`&quot;</span><br><span class="line">list=`wget -qO- https://trackerslist.com/best.txt|awk NF|sed &quot;:a;N;s/\n/,/g;ta&quot;`</span><br><span class="line">if [ -z &quot;`grep &quot;bt-tracker&quot; $CONFFILE`&quot; ]; then</span><br><span class="line">    sed -i &#x27;$a bt-tracker=&#x27;$&#123;list&#125; $CONFFILE</span><br><span class="line">    echo add……</span><br><span class="line">else</span><br><span class="line">    sed -i &quot;s@bt-tracker.*@bt-tracker=$list@g&quot; $CONFFILE</span><br><span class="line">    echo update……</span><br><span class="line">fi</span><br><span class="line">docker restart -t=30 $DOCKERID</span><br></pre></td></tr></table></figure>
<p>　　运行该脚本后可以看到 <code>aria2.conf</code> 添加了 <code>bt-tracker</code> 字段即可。<br>登录 DSM 打开控制面板添加计划任务如下：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 任务名随意，使用 root 用户执行  </span></span><br><span class="line"><span class="comment"># 计划里每天执行</span></span><br><span class="line"><span class="comment"># 任务设置里添加：</span></span><br><span class="line">sh /volume1/docker/aria2/auto_tracker.sh</span><br></pre></td></tr></table></figure>
<p>在 Aria2 的配置文件 aira2.conf 中，添加如下字段：  </p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">save-session-interval</span>=<span class="number">30</span> <span class="comment"># 30 S 保存会话</span></span><br><span class="line"><span class="attr">force-save</span>=<span class="literal">true</span>          <span class="comment"># 强制保存</span></span><br></pre></td></tr></table></figure>
<p>脚本运行后会提示容器意外关闭，这是因为更改 aria2 的配置文件后，脚本重启了容器以生效。  </p>
<h3 id="人人影视下载"><a href="#人人影视下载" class="headerlink" title="人人影视下载"></a>人人影视下载</h3><p>　　美剧爱好者肯定都知道人人影视这个软件，人人影视也有 Docker 版，并行下载能够跑满宽带。   </p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>　　使用 <a href="/post/synology-series-1.html#ssh-%E8%BF%9E%E6%8E%A5%E5%B9%B6%E8%8E%B7%E5%BE%97-root-%E6%9D%83%E9%99%90">ssh 连接群晖并获取 root 权限</a> 后，执行：   </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@Alliot-blog:~# docker run -d --name rrshare \</span><br><span class="line">-v \</span><br><span class="line">-p \</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="Jellyfin"><a href="#Jellyfin" class="headerlink" title="Jellyfin"></a>Jellyfin</h3><p>　　Jellyfin 是 Emby 出来的一个免费版分支，与收费的 Emby 差别不大，甚至能够用旧版的 Emby 客户端来连接。在 DS918+ 系统下，Jellyfin 能够进行硬解（Emby硬解需要购买订阅）。<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-jellyfin1.png" alt="群晖-jellyfin1.png"> </p>
<h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p>　　要硬解的话，我们需要先看一下核显是否正常驱动了：<br>　　使用 <a href="/post/synology-series-1.html#ssh-%E8%BF%9E%E6%8E%A5%E5%B9%B6%E8%8E%B7%E5%BE%97-root-%E6%9D%83%E9%99%90">ssh 连接群晖并获取 root 权限</a> 后，执行：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls /dev/dri/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">有如下输出则是有驱动</span>  </span><br><span class="line">card0  renderD128</span><br></pre></td></tr></table></figure>
<p>　　之后，使用命令行创建容器：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@Alliot-blog:~# docker run -d --name jellyfin-docker \</span><br><span class="line"></span><br><span class="line">-v /volume1/docker/jellyfin/config:/config \</span><br><span class="line">-v /volume1/docker/jellyfin/cache:/cache \</span><br><span class="line">-v /volume1/video:/video \</span><br><span class="line">-p 8080:8096 \</span><br><span class="line">-p 8081:8920 \</span><br><span class="line">-device=/dev/dri:/dev/dri \</span><br><span class="line">jellyfin/jellyfin:latest</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>注意：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-v 的 `/volume1/docker/jellyfin` 需要根据你自己前面创建的docker共享文件夹来修改 </span><br><span class="line">`/volume1/video` 为你影片的存放路径  </span><br><span class="line">-p 这里，8096 为容器的 http 端口，8920 为 https 端口，我把宿主机的8080映射给了容器的8096,之后我们可以通过 http://nas的ip:8080 来访问 Jellyfin 了  </span><br><span class="line">-device 是将核显设备映射给容器内部使用，如果前面检查没有驱动则不需要该字段，也无法硬解了。  </span><br></pre></td></tr></table></figure>
<p>　　之后浏览器打开 <code>http://nas的ip:8080</code> ，按照指引完成配置后，在 jellyfin 控制台中的硬件加速处选择 “VAAPI” 硬件加速，转码线程推荐 “4”，其他默认。效果如下：<br>　　<img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-jellyfin%E7%A1%AC%E8%A7%A3.png" alt="群晖-jellyfin硬解.png"><br>　　另外一个问题就是，推荐在 Docker 套件中，将内存做限制，我目前给的 2G 限制，前几天使用 jellyfin 外网看电影的时候，出现群晖宕机，无法 ping 通的情况，强制下电重启才恢复，估计是内存被吃满的原因，限制内存后暂时没出现这个问题（jellyfin 挺吃内存，给多少吃多少）。  </p>
<h3 id="解锁网易云音乐灰色歌曲"><a href="#解锁网易云音乐灰色歌曲" class="headerlink" title="解锁网易云音乐灰色歌曲"></a>解锁网易云音乐灰色歌曲</h3><p>　　源于这个项目 <a href="https://github.com/nondanee/UnblockNeteaseMusic">unblockneteasemusic</a>，可以通过代理，将网易云音乐的变灰歌曲解锁。  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@Alliot-blog:~# docker run -d --name unblockneteasemusic \</span><br><span class="line">-p 666:8080 \</span><br><span class="line">-p 8081:8081 \</span><br><span class="line">nondanee/unblockneteasemusic</span><br></pre></td></tr></table></figure>
<p>　　打开网易云音乐，如图，配置 HTTP 代理，填入群辉 IP 和上面映射的 666 端口即可（如果需要在公网访问，记得去路由器里做端口转发）：<br><a href="https://static.iots.vip/%E7%BE%A4%E6%99%96-%E7%BD%91%E6%98%93%E4%BA%91%E4%BB%A3%E7%90%86.png">群晖-网易云代理</a><br>保存重启客户端后即可。  </p>
<h3 id="自动更新容器"><a href="#自动更新容器" class="headerlink" title="自动更新容器"></a>自动更新容器</h3><p>　　Docker 应用有个很不方便的地方就是，没有自动检查镜像更新的功能，对于喜欢尝鲜的朋友来说，上游镜像有更新了第一时间就想要更新尝试一下，这时候一个名为 <code>watchtower</code> 的应用就出现了。<br>　　<code>watchtower</code> 是一个可以监控正在运行的容器镜像是否有更新的工具，当本地镜像与远端镜像有差异的时候，可以自动使用当前容器的运行参数以新镜像重新创建一个新的容器，并删除旧的容器。这有点类似于我们手机应用商店更新 APP 一样。<br>　　<code>watchtower</code> 本身也被打包为容器镜像，我们可以使用 <a href="/post/synology-series-1.html#ssh-%E8%BF%9E%E6%8E%A5%E5%B9%B6%E8%8E%B7%E5%BE%97-root-%E6%9D%83%E9%99%90">ssh 连接群晖并获取 root 权限</a> 后，通过以下命令来运行：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行一次，更新所有的容器，并清除旧的容器</span>  </span><br><span class="line">docker run -d --name watchtower -v /var/run/docker.sock:/var/run/docker.sock containrrr/watchtower --cleanup --run-once  </span><br></pre></td></tr></table></figure>
<p>　　这样我们所有的容器就会更新到远端仓库最新的镜像版本了。<br>　　大致介绍一下上面的命令，我们知道 Docker 是 server+client 的架构，上述命令 <code>-v</code> 参数映射的 <code>/var/run/docker.sock</code> 就是 Docker client 与 daemon 通信的 socket 文件，<code>watchtower</code> 通过这个文件来监控当前的所有容器。<br>　　<code>watchetower</code> 还可以针对某一个容器进行监控，或是配置计划任务定时更新甚至邮件通知等。其他更多参数见官网 <a href="https://containrrr.dev/watchtower/arguments/">https://containrrr.dev/watchtower/arguments/</a>  </p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>　　Alliot 暂时就只有这些值得推荐给大家的了，还有更多值得尝试的镜像欢迎在博客留言补充。   </p>
]]></content>
      <categories>
        <category>群晖入门到进阶系列</category>
      </categories>
      <tags>
        <tag>折腾</tag>
        <tag>Docker</tag>
        <tag>系列</tag>
        <tag>群晖</tag>
      </tags>
  </entry>
  <entry>
    <title>群晖入门到进阶系列（九）：从磁盘空间损毁谈数据安全</title>
    <url>//post/synology-series-9.html</url>
    <content><![CDATA[<p>　　说起这个事情已经是好几个月前的事了，目前 Alliot 的装备也是早在几个月前进行了一次升级。前面由于个人工作方面的转型，所以没有太多时间精力来就这件事情进行一次梳理，好在当时做了一些操作日志记录，恰逢今日公司团建，下班比较早，来写写那次 “群晖磁盘空间已损毁” 的事故，顺带从一个不那么成熟的运维工程师的角度，谈谈存储安全与备份策略。<span id="more"></span>  </p>
<h3 id="事故背景"><a href="#事故背景" class="headerlink" title="事故背景"></a>事故背景</h3><p>　　由于 Alliot 自己本身在一开始对群晖这个系统也是处于非常陌生的程度，对 <a href="/post/diy-nas-woniuxingji.html">不到300块捡一台4盘位NAS——蜗牛星际上车记</a> 这套硬件也是当玩具的心态，没打算玩长久。所以这套 NAS 上的硬盘都是久经沙场的拆机盘，同时，为了最大化的利用磁盘空间，没有对其做类似 RAID 1 或是 RAID 5，就是这两个点让这次磁盘空间损毁的事故成为必然。<br>　　机器内的四块拆机盘属这块希捷 500G 通电时间最短，健康检查来看也是相对较好的，所以我将其作为了群晖的第一块盘，单独划作存储池并作为我的主要存储空间，存储一些相对重要的文件。其他的几块通电时间长，甚至有一两个坏道的硬盘作为 PT 下载等其他一些临时资源的存储。可惜真应了那句话，硬盘坏不坏跟通电时间没有必然关系，由于那阵子家里那边变压器检修频繁停电，导致群晖在运行的时候异常断电了三次，在断电第三次的时候，好死不死的挂掉了这块希捷 500G 的套件盘。<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%8D%9F%E6%AF%811.png" alt="群晖-磁盘空间损毁1.png"><br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%8D%9F%E6%AF%812.png" alt="群晖-磁盘空间损毁2.png"></p>
<h3 id="事故分析"><a href="#事故分析" class="headerlink" title="事故分析"></a>事故分析</h3><p>　　第一块套件所在的存储空间损毁，意味着群晖上除去必要组件（即新装系统自带的那几个组件）能够使用外，其他所有的套件都无法使用，甚至存储空间都无法挂载。针对这类事故处理的最好的结果当是所有套件恢复正常使用，存储空间的所有文件正常读写，所以，我后面的所有都是围绕着这个结果去做的。<br>　　首先我们来说说，群晖为什么会有存储空间损毁这种机制，而且明明硬盘才那么几个坏道就报损毁了，拔出来格式化插到 Windows 下又能正常使用。<br>　　群晖的存储池的实现其实就是 Linux 下的软 RAID，我们通过 <a href="/post/synology-series-1.html#ssh-%E8%BF%9E%E6%8E%A5%E5%B9%B6%E8%8E%B7%E5%BE%97-root-%E6%9D%83%E9%99%90">ssh 连接群晖并获取 root 权限</a> 后，执行 <code>cat /proc/mdstat</code> 便可通过类似如下输出看到当前系统的软 RAID 信息：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@Alliot-blog # cat /proc/mdstat </span><br><span class="line">Personalities : [linear] [raid0] [raid1] [raid10] [raid6] [raid5] [raid4] </span><br><span class="line">      </span><br><span class="line">md4 : active raid1 sdf3[0]</span><br><span class="line">      112398784 blocks super 1.2 [1/1] [U]</span><br><span class="line">      </span><br><span class="line">md3 : active raid1 sda3[0]</span><br><span class="line">      307749184 blocks super 1.2 [1/1] [U]</span><br><span class="line">      </span><br><span class="line">md2 : active raid1 sde5[0] sdb5[1]</span><br><span class="line">      483563456  blocks super 1.2 [1/1] [UU]</span><br><span class="line">      </span><br><span class="line">md1 : active raid1 sda2[0] sdb2[5] sdc2[1] sdd2[2] sde2[3] sdf2[4]</span><br><span class="line">      2097088 blocks [16/6] [UUUUUU__________]</span><br><span class="line">      </span><br><span class="line">md0 : active raid1 sda1[0] sdb1[5] sdc1[1] sdd1[2] sde1[3] sdf1[4]</span><br><span class="line">      2490176 blocks [16/6] [UUUUUU__________]</span><br><span class="line">      </span><br><span class="line">unused devices: &lt;none&gt;</span><br></pre></td></tr></table></figure>
<p>大致从 blocks 大小结合实际硬盘容量看一下，md1 与 md2 估计为引导盘。从 md2 开始才是我们创建的存储池。<br>利用 <code>mdadm</code> 命令可以查看相应的存储池（阵列）详细信息：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@Alliot-blog # mdadm -D /dev/md2</span><br><span class="line">/dev/md2:</span><br><span class="line">        Version : 1.2</span><br><span class="line">  Creation Time : Sun Jan 26 16:50:01 2020</span><br><span class="line">     Raid Level : raid1</span><br><span class="line">     Array Size : 483563456 (461.16 GiB 495.17 GB)</span><br><span class="line">  Used Dev Size : 483563456 (461.16 GiB 495.17 GB)</span><br><span class="line">   Raid Devices : 1</span><br><span class="line">  Total Devices : 1</span><br><span class="line">    Persistence : Superblock is persistent</span><br><span class="line"></span><br><span class="line">    Update Time : Mon Aug 24 16:08:07 2020</span><br><span class="line">          State : clean, FAILED </span><br><span class="line"> Active Devices : 1</span><br><span class="line">Working Devices : 1</span><br><span class="line"> Failed Devices : 0</span><br><span class="line">  Spare Devices : 0</span><br><span class="line"></span><br><span class="line">           Name : Alliot-blog:2  (local to host Alliot-blog)</span><br><span class="line">           UUID : 88a869b3:91601c6b:f79ab51d:eee415ed</span><br><span class="line">         Events : 261</span><br><span class="line"></span><br><span class="line">    Number   Major   Minor   RaidDevice State</span><br><span class="line">       0       8       19        0      faulty active sync   /dev/sdb3</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>通过 <code>state</code> 字段了解到当前的这个存储池的状态是不正常的。<br>　　当然，这里得可以看到我们的硬盘的设备文件为 <code>/dev/sdb</code>，也可以使用 <code>smartctl -a /dev/sdb</code> 来查看硬盘的 “S.M.A.R.T” 信息，获取硬盘健康状态指标。<br>　　再来看看为什么当前的存储空间无法进行写入等操作（甚至在 File Station 里都无法看到有相应的共享文件夹）   </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@Alliot-blog # mount |grep volume1  </span><br><span class="line">/dev/md2 on /volume1 type btrfs (ro,relatime,synoacl,space_cache=v2,auto_reclaim_space,metadata_ratio=50,subvolid=257,subvol=/@syno)</span><br></pre></td></tr></table></figure>
<p>　　可以看到， &#x2F;volume1 当前是以 ro(即 read only) 模式挂载的，当然无法进行任何写入与修改的操作。（那些无法看到共享文件夹的，估计这里直接是取消挂载了）。<br>　　到这里为止，大概能够猜测群晖是通过判断软 RAID 的健康状态来决定是否将存储空间标记为损毁的了。有了这些信息我们能够大致知道怎样去抢救数据了。  </p>
<h3 id="事故处理"><a href="#事故处理" class="headerlink" title="事故处理"></a>事故处理</h3><p>　　看到这里其实很多朋友都会说了，既然是 ro 模式了，我们直接对它 <code>remount</code> 到 rw 不就行了？又省一块盘？嗯… 这个作为一个正常人肯定都会这么去想，但是当你对它去进行 <code>mount remount,rw</code> 时，会发现并不能如我们所愿重新挂载，多次 <code>remount</code> 再去看挂载模式依旧是只读，而且还没有相关的报错信息。这里我猜测大概率群晖有一定的策略限制（或许是一个循环逻辑？）以保护坏盘中的数据不被进一步破坏。到这里省一块盘的想法可以抛去了。当下只能搬出数据以挽回部分损失了（虽然我有对文件添加一定的备份策略，但是套件数据及配置还是很重要的）。<br>　　群晖的 File Station 中无法进行操作，所以我们需要做的是将这个存储空间里的文件通过命令行拷贝到我们其他的硬盘上：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将块设备mount到一个挂载点（如果mount |grep volume1可以看到有挂载只不过是ro，那么跳过这一步，切记！）  这里我们前面查到的我们要的是md2所以直接执行：</span></span><br><span class="line">mount /dev/md2 /volume1  </span><br><span class="line"></span><br><span class="line">cd /volume1 </span><br><span class="line">ll # 列出来的开头为 @ 的即为部分套件数据，按需进行备份转移</span><br></pre></td></tr></table></figure>
<p>　　这里稍微啰嗦一下，由于硬盘必定是存在问题的（大多数为物理坏道），我们在转移备份数据的时候，因当按照数据的重要程度进行转移，因为在有物理坏道的情况下读取数据，很容易雪崩导致坏道暴涨，直接导致数据无法读取。  
　　</p>
<h3 id="事故反思"><a href="#事故反思" class="headerlink" title="事故反思"></a>事故反思</h3><p>　　回顾这次的磁盘空间损毁，由于自己一直都有备份的习惯，加上本身也没有存放太多有用的数据，所以主要的折腾点还是在于部分套件的设置丢失（直接恢复的套件还是有一些奇奇怪怪的问题，所以我索性重装了 DSM）。  </p>
<h4 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h4><p>　　关于备份，我推荐的做法是参照企业做法，将数据按照等级来分类，当然，我们的数据不需要分的那么细。Alliot 将自己的数据简单分为如下三类： 重要数据信息、内部数据信息、普通数据信息。<br>　　<strong>重要数据信息</strong> 主要为：涉及个人自身与家庭成员信息的（如家人朋友珍贵或是隐私的照片与视频、书信扫描、证件凭证扫描、登陆凭证信息等），这类信息往往是丢失即没有机会再得到的，或是泄露会带来很多麻烦甚至影响生活的，所以，在安全与隐私方面都需要进行严格的把握。因此，我推荐的做法是机械硬盘等介质，三份以上的归档存储并放置于不同的地方，所有数据按照自己的规则进行打包加密，开启类似 Bitlocker 等加密手段，并且密码应当有一定的复杂度，且熟记。定期维护与检查。这类数据通常数量不多，因此其实成本也不会太高，Alliot 到现在也还没有装满 500G。不是很推荐直接存云存储（尤其是国内）。较为推荐的是分卷压缩并加密，分卷存放于不同的云盘进行二次加密以容灾。特别注意：这类数据不建议直接存放于 NAS 等联网的设备中，尤其是自己没有良好的安全意识与一定的专业知识的情况下。<br>　　<strong>内部数据信息</strong> 主要为： 工作记录、代码与学习笔记、普通日常照片视频以及通讯录备份等，这类信息隐私程度不至于像 “重要数据信息” 那样敏感与不可再生，通常会频繁使用与更新，经常于家人朋友间内部传播流通，因此不适合像重要数据信息那样进行归档存储。这类信息我一般选择存放于自己的 NAS 中，配以较高的密码复杂度，软件配置一定的周期，定期进行多盘备份以及加密同步到国外云盘，并<strong>开启版本控制</strong>，不定期进行移动硬盘冷备。群晖 Drive + Cloudsync + HyperBackup + RAID 1 基本满足软件层面的需求。<br>　　<strong>普通数据信息</strong> 则主要为一些高清电影、大姐姐视频（啊 不  没这回事）、  收藏的软件安装包等重要程度较低的文件，这些文件花一点时间通常可以再下载回来。因此，我通常是 Basic 存储空间配以 HyperBackup 套件备份到淘汰的盘里，同时搭配 Cloudsync 备份到云盘。  </p>
<h4 id="NAS存储策略推荐"><a href="#NAS存储策略推荐" class="headerlink" title="NAS存储策略推荐"></a>NAS存储策略推荐</h4><p>　　由于群晖系统的特性，为了减少倒腾系统与数据的风险，强烈推荐第一个存储空间使用 RAID 1 模式，并使用全新的硬盘（Alliot 是用的狗东自营 4T 紫盘 *2 ）。关于硬盘这里插一句： 紫盘完全是可以的，有人说监控盘忽略 CRC 错误会导致数据损坏，不适合做文件类存储，其实是不正确的，监控盘的忽略 CRC 错误的指令需要监控主机去主动开启，正常 PC 或 NAS 使用与其他盘没有区别。加上本身监控盘转速慢，也经常是 7*24 的环境，所以在我看来，给 NAS 使用没有一点问题（转速的原因，读写速度会比企业盘慢），不过钱包够的话，还是推荐企业级。<br>　　<img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-%E7%B4%AB%E7%9B%984T%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4%E6%88%AA%E5%9B%BE.png" alt="群晖-紫盘4T存储空间截图"><br>　　除去第一个存储空间外，其他的存储空间推荐 Basic 模式，并使用 HyperBackup 按照文件夹互相备份需要备份的内容，这样配置更加灵活，在一定程度上保证数据安全的同事，大大的节省了存储空间。<br>　　文件系统第一个存储空间还是推荐使用 Btrfs 格式，由于 Btrfs 文件系统本身的一些特性，群晖在这种类型下能够做更多的事情。（部分套件要求 Btrfs）<br>　　其他数据盘可以使用 ext4 或其他文件系统格式，但推荐程度一般。许多网友说的是方便在 Linux 下挂载并数据恢复等。但其实 Btrfs 在诸如 RedHat 等 Linux 发行版下都是原生支持 Btrfs 的，使用 <code>mount -t btrfs 设备名 挂载点</code> 是能够直接挂载的。  这个还是看个人喜好吧，区别不大。  </p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>　　其实 Alliot 早已经将蜗牛星际退休，攒成了六盘位的 ITX 黑群晖了，并且配上了 APC UPS，后面有空的话也会分享一下攒机的记录。互联网公司确实会忙很多，前面也在考证，所以这篇博客兜兜转转，直到今天才完成，文中可能也能感觉到明显的行文断层，见谅。群晖系列的下一篇会是网络安全方面的一些闲聊，谈谈对于群晖（或不仅仅是群晖）的一些基本的安全加固。  </p>
]]></content>
      <categories>
        <category>群晖入门到进阶系列</category>
      </categories>
      <tags>
        <tag>折腾</tag>
        <tag>系列</tag>
        <tag>群晖</tag>
      </tags>
  </entry>
  <entry>
    <title>群晖入门到进阶系列（二）：DDNS与端口转发</title>
    <url>//post/synology-series-2.html</url>
    <content><![CDATA[<p>　　上一篇讲完了黑<a href="/post/synology-series-2.html">群晖的安装、洗白与局域网唤醒</a>，此时的群晖还只是一个内网的服务器，如何做到在外地也能访问到家里的群晖呢？我们可以利用 DDNS 与端口映射，让你能够在外地访问到你的群晖服务器，当然前提是：电信与联通的宽带才能够获得动态公网 IP，移动与长城宽带的大内网，请忽略此文，移步至内网穿透。本篇文字较多，针对新手对一些概念进行科普，因此会尽可能的描述通俗。<span id="more"></span>  </p>
<h3 id="公网-IP"><a href="#公网-IP" class="headerlink" title="公网 IP"></a>公网 IP</h3><h4 id="怎样确定自己有没有公网-IP"><a href="#怎样确定自己有没有公网-IP" class="headerlink" title="怎样确定自己有没有公网 IP"></a>怎样确定自己有没有公网 IP</h4><p>　　当然，这里讲到的公网 IP 都是指的动态公网，重新拨号这个 IP 就会变化。<br>　　我们可以通过一些 IP 地址查询的网站查询到自己当前的 IP，Alliot 一般使用 <a href="https://ip.sb/">IP.SB</a> ，访问这个网站可以得到自己当前在公网的 IP，对比自家光猫或路由器（这取决于你使用哪个拨号）显示的外网 IP 或 WAN 口 IP，如果相同则为已有公网 IP，否则，需要向运营商申请。  </p>
<h4 id="怎样申请动态公网-IP"><a href="#怎样申请动态公网-IP" class="headerlink" title="怎样申请动态公网 IP"></a>怎样申请动态公网 IP</h4><p>　　一般来说，即便你是电信或联通的宽带，运营商默认也是不会给你分配动态公网 IP 的，需要向运营商提出申请，根据地区不同，申请难易程度不同。<br>　　少数地区可以通过公众号或装维师父直接联系申请，大部分地区需要拨打人工客服（电信 10000，联通 10010）以“家中要安装家庭网络摄像头”为理由申请动态公网 IP（千万不能说是服务器或其他设备），少数地区可能一次无法申请成功（很多客服不清楚动态公网 IP，所以可以尝试多换几个客服），申请成功后重启光猫即可。  
　　</p>
<h3 id="光猫改桥接"><a href="#光猫改桥接" class="headerlink" title="光猫改桥接"></a>光猫改桥接</h3><p>　　一般来说，运营商为了减少报障率，默认的宽带拨号都是在光猫里，且锁了光猫超级管理员，防止用户私自更改配置导致宽带故障。为了后面我们的 DDNS 与端口转发，我们最好将宽带拨号的任务交给我们的路由器。这一个步骤也有些麻烦，能不能改桥接得看你的光猫型号或是地区运营商的策略。如果你的光猫型号是较为老的光猫，网上有如何破解超级管理员密码的方案了，那么直接按照教程关闭 DHCP 改为桥接模式即可（记得记录光猫里的宽带账号信息，密码可以通过人工客服重置）。但是如果是较新的光猫，暂时没有破解的方案的，除了换光猫以外，最简单的方法就是直接拨打人工客服（电信 10000，联通 10010）让其将光猫改为桥接模式，这和申请公网 IP 一样，也看地区，看客服，部分地区很爽快直接就给改了，部分地区也需要软磨硬泡。成功改桥接后也需要重启光猫生效。  </p>
<h3 id="路由器拨号"><a href="#路由器拨号" class="headerlink" title="路由器拨号"></a>路由器拨号</h3><p>　　Alliot 的路由器是前些日子 80 包邮淘的“友华 WR1200JS”，使用的是 hiboy（H 大）的 <a href="http://opt.cn2qq.com/padavan/">padavan</a> 固件，所以以 padavan 为例（其他路由器基本都是打大同小异，甚至更简单）：<br>　　在“外部网络(WAN)”中填入家里的宽带拨号账户与密码，应用即可。<br>　　<img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-%E8%B7%AF%E7%94%B1%E5%99%A8%E6%8B%A8%E5%8F%B7.png" alt="群晖-路由器拨号.png">  </p>
<h3 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h3><h4 id="为什么需要端口转发"><a href="#为什么需要端口转发" class="headerlink" title="为什么需要端口转发"></a>为什么需要端口转发</h4><p>　　拥有公网 IP 后，我们还不能够直接访问到我们的群晖服务器，因为拥有公网 IP 的是我们的拨号设备，也就是路由器，路由器会通过 DHCP 分配内网 IP 给我们的设备，这样一来，在公网仅仅只是能够访问到路由器，我们需要在路由器与群晖服务器之间建立一个桥梁，让我们通过公网 IP 就能访问到内网的群晖等服务器，这就有了端口转发，端口转发简单来说就是将一个 IP 的端口与另外一个 IP 的端口对应起来（这个端口可以自定义），建立了从这个端口到那个端口之间的通道。<br>　　此外，端口转发也能够将一些常用服务的端口转发到不常用的端口，避免被机器批量扫描，起到一定的安全保护作用。  </p>
<h4 id="配置静态-ARP-绑定"><a href="#配置静态-ARP-绑定" class="headerlink" title="配置静态 ARP 绑定"></a>配置静态 ARP 绑定</h4><p>　　静态 ARP 绑定的作用是将内网的机器 MAC 地址与对应的 IP 固定起来，方便我们做端口转发，依旧以 padavan 为例：<br>　　在 “内部网络(LAN)” 的 “DHCP服务器” 页，勾选底部如图中的“启动手动设置功能”，选择群晖的 MAC 地址、填入 IP 地址，点击 + 号（很重要），再“应用本页面设置”即可：<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-%E8%B7%AF%E7%94%B1%E5%99%A8arp%E7%BB%91%E5%AE%9A.png" alt="群晖-路由器arp绑定.png"></p>
<h4 id="配置端口转发"><a href="#配置端口转发" class="headerlink" title="配置端口转发"></a>配置端口转发</h4><p>　　在 “外部网络(WAN)” 的 “端口转发(UPnP)” 页，依图所示开启 UPnP 以及手动端口映射，添加需要映射的端口：<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-%E8%B7%AF%E7%94%B1%E5%99%A8%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91.png" alt="群晖-路由器端口转发.png"><br>　　这里的外部端口可以自己定义，内部端口则应该对应群晖对应的服务所用的端口。<br>　　下面列举群晖常用的几个端口：  </p>
<table>
<thead>
<tr>
<th align="center">服务名</th>
<th>端口</th>
</tr>
</thead>
<tbody><tr>
<td align="center">DSM控制台（HTTP）（不建议转发）</td>
<td>5000</td>
</tr>
<tr>
<td align="center">DSM控制台（HTTPS）</td>
<td>5001</td>
</tr>
<tr>
<td align="center">Active-Backup</td>
<td>5510</td>
</tr>
<tr>
<td align="center">Drive同步端口</td>
<td>6690</td>
</tr>
<tr>
<td align="center">WebDAV</td>
<td>5006</td>
</tr>
<tr>
<td align="center">ssh&#x2F;sftp（不建议转发）</td>
<td>22</td>
</tr>
</tbody></table>
<p>注： 在我们天朝，Web 等服务是收到严格管控的，因此，Web 服务用到的 80&#x2F;8080&#x2F;443 端口以及其他一些端口都是处于封锁状态（当然，部分地区可能没有，但是一旦被扫描到有架设 Web 服务，轻则封端口、收回公网 IP，重则断宽带、有关部门请喝茶），所以不要在公网转发使用这些敏感端口。  </p>
<h3 id="DDNS"><a href="#DDNS" class="headerlink" title="DDNS"></a>DDNS</h3><h4 id="什么是-DDNS"><a href="#什么是-DDNS" class="headerlink" title="什么是 DDNS"></a>什么是 DDNS</h4><p>　　这里首先我们要了解域名与域名解析的概念。什么是域名呢？现在你浏览器的顶栏显示的 <a href="http://www.iots.vip/">www.iots.vip</a> 就是 Alliot’s blog 的域名，通过 ping 域名，会发现返回信息的实际上是个 IP，域名与 IP 的关系，就好比你的姓名与身份证号码（可能用门牌号更贴切）的关系，目的是为了方便记忆（当然还有其他更多的作用，但是在我们这里最大的作用就是方便记忆），你想象一下如果这个世界用的都是身份证号码来叫人，那老师上课点名就会变成 “110101995XXXXXXX1” “到”，非常的不方便。<br>　　那什么是 DNS 呢？DNS 即域名系统，还是以姓名、身份证号码为例，DNS 就好比公安局的身份证信息数据库，利用这个数据库你能够通过某人的姓名找到他的身份证号码。 而 DDNS 动态域名解析就像是你的身份证号码变了，你要向公安局的这个数据库更新你的新身份证号码，我们所说的域名解析就是将 IP 提交给域名系统。<br>　　前面讲到我们的公网 IP 是动态的，每次重新拨号（运营商也会定期更改）都会变化，我们在外网通过这个 IP 来访问自己内网的服务器的时候，总不能每次都让家里人去路由器确认一下当前的 IP 再手动将 IP 做新的域名解析。<br>　　这时候就出现了一种叫 DDNS 的方法，DDNS(Dynamic Domain Name Server) 即动态域名解析服务，就是利用程序获取当前的 IP 并调用域名解析的接口来自动解析新 IP 到域名，有了 DDNS，不管家里的公网 IP 怎么变，我们都能够利用域名来访问到家里的群晖服务器。  </p>
<h4 id="域名注册"><a href="#域名注册" class="headerlink" title="域名注册"></a>域名注册</h4><p>　　要做域名解析当然先得有域名，域名注册商很多，这里以阿里云万网为例。<br>　　登录 <a href="https://wanwang.aliyun.com/domain/">阿里云万网域名注册</a>，挑选一个你所容易记忆的域名，后缀选择一个冷门便宜的即可，最便宜几块钱一年。<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-%E4%B8%87%E7%BD%91%E5%9F%9F%E5%90%8D%E6%B3%A8%E5%86%8C.png" alt="群晖-万网域名注册.png">  </p>
<h4 id="获取access-key"><a href="#获取access-key" class="headerlink" title="获取access key"></a>获取access key</h4><p>　　access key 是调用解析 API 的时候需要用到的，打开阿里云控制台的 <a href="https://ram.console.aliyun.com/overview">RAM访问控制</a>，如图处新建一个阿里云子用户，记得勾选编程访问：<br>　　<img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-%E8%8E%B7%E5%8F%96%E9%98%BF%E9%87%8C%E4%BA%91accesskey1.png" alt="群晖-获取阿里云accesskey1.png"><br>　　<img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-%E8%8E%B7%E5%8F%96%E9%98%BF%E9%87%8C%E4%BA%91accesskey2.png" alt="群晖-获取阿里云accesskey2.png"><br>　　创建完子用户后，点击子用户名，创建新的 AccessKey：<br>　　<img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-%E8%8E%B7%E5%8F%96%E9%98%BF%E9%87%8C%E4%BA%91accesskey3.png" alt="群晖-获取阿里云accesskey3.png"><br>　　之后将得到的 AccessKey ID 与 secret 保存备用。  
　　</p>
<h4 id="配置-DDNS"><a href="#配置-DDNS" class="headerlink" title="配置 DDNS"></a>配置 DDNS</h4><p>　　DDNS 可以在内网的任意一个设备上做，因为我们的设备都处于同一个拨号环境下，得到的公网 IP 都是一样的。但是出于方便，Alliot 还是推荐在路由器上做 DDNS，因为只有路由器才是真正的 7*24 运行，而且 DDNS 配置完基本就不用动了，省去以后折腾过程中断网的风险，而且，在路由器上做 DDNS，可以实现在外网登录路由器唤醒我们的群晖。当然，部分朋友的路由器没有 DDNS 功能，后面 Docker 篇也会讲到如何使用群晖做 DDNS。<br>　　依旧以 H 大的 padavan 为例，在“拓展功能”的“花生壳内网版”的“Aliddns”页，按照指引填写前面获取的 Accesskey ID 与 secret，以及我们想要解析的域名，假设我要解析的是 <code>synology.iots.vip</code> ，则“顶级域名”第一个框填入 <code>synology</code>，第二个框填入 <code>iots.vip</code>：<br>　　<img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-%E9%98%BF%E9%87%8CDDNS.png" alt="群晖-阿里DDNS.png"><br>　　保存应用配置后，我们还需要手动在<a href="https://dns.console.aliyun.com/">阿里云解析</a> 添加解析，DDNS 才能工作：<br>　　<img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-%E9%98%BF%E9%87%8C%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90.png" alt="群晖-阿里域名解析.png"><br>注： 域名解析设置完成后，由于 DNS 缓存等原因，需要等待5 - 10 分钟去刷新缓存。<br>　　然后重启我们的路由器，约两至三分钟后，可以通过 ping 我们的域名来确认域名是否成功解析为我们的公网 IP：  \</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"># 按住 win 键 + R 输入 <span class="built_in">cmd</span>  </span><br><span class="line"><span class="built_in">ipconfig</span> /flushdns # 刷新dns解析缓存</span><br><span class="line"><span class="built_in">ping</span> synology.iots.vip </span><br></pre></td></tr></table></figure>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>　　至此，我们已经了解了怎样配置端口转发，并利用 DDNS 完成了公网 IP 解析的问题，下一篇将介绍针对 DSM 的一些小优化。  </p>
]]></content>
      <categories>
        <category>群晖入门到进阶系列</category>
      </categories>
      <tags>
        <tag>折腾</tag>
        <tag>网络</tag>
        <tag>系列</tag>
        <tag>群晖</tag>
      </tags>
  </entry>
  <entry>
    <title>群晖入门到进阶系列（五）：其他套件优化</title>
    <url>//post/synology-series-5.html</url>
    <content><![CDATA[<p>　　群晖的套件体系很完善也十分强大，虽然易用性以及很强，但是还是有一部分需要动手配置一下，本文分享一些收集的资料。<span id="more"></span>  </p>
<h3 id="Photo-Station-优化"><a href="#Photo-Station-优化" class="headerlink" title="Photo Station 优化"></a>Photo Station 优化</h3><h4 id="解决DSM菜单中photo-station入口端口错误"><a href="#解决DSM菜单中photo-station入口端口错误" class="headerlink" title="解决DSM菜单中photo station入口端口错误"></a>解决DSM菜单中photo station入口端口错误</h4><p>在使用广域网访问家庭NAS相册Photo Station时，通过DSM桌面点击PhotoStation图标时跳转需要手动更改端口才能正确访问到PhotoStation。</p>
<blockquote>
<p><strong>本小节全文摘于： <a href="https://post.smzdm.com/p/a83g963n/">https://post.smzdm.com/p/a83g963n/</a> ，感谢 <a href="https://zhiyou.smzdm.com/member/2528535372/">@胖头鱼Libra</a>，作者原文更详细，欢迎去作者原文阅读与打赏，这里 Alliot 只作摘录备份</strong>  </p>
</blockquote>
<p>在 <code>/usr/syno/synoman/webman</code> 创建文件 <code>DsPhoto.source.js</code> 内容如下：   </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">parseURL</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    a.<span class="property">href</span> = url;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">source</span>: url,</span><br><span class="line">        <span class="attr">protocol</span>: a.<span class="property">protocol</span>.<span class="title function_">replace</span>(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;&quot;</span>),</span><br><span class="line">        <span class="attr">host</span>: a.<span class="property">hostname</span>,</span><br><span class="line">        <span class="attr">port</span>: a.<span class="property">port</span>,</span><br><span class="line">        <span class="attr">query</span>: a.<span class="property">search</span>,</span><br><span class="line">        <span class="attr">params</span>: (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> ret = &#123;&#125;, seg = a.<span class="property">search</span>.<span class="title function_">replace</span>(<span class="regexp">/^\?/</span>, <span class="string">&quot;&quot;</span>).<span class="title function_">split</span>(<span class="string">&quot;&amp;&quot;</span>), len = seg.<span class="property">length</span>, i = <span class="number">0</span>, s;</span><br><span class="line">            <span class="keyword">for</span> (; i &lt; len; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!seg[i]) &#123;</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                &#125;</span><br><span class="line">                s = seg[i].<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">                ret[s[<span class="number">0</span>]] = s[<span class="number">1</span>]</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line">        &#125;</span><br><span class="line">        )(),</span><br><span class="line">        <span class="attr">file</span>: (a.<span class="property">pathname</span>.<span class="title function_">match</span>(<span class="regexp">/\/([^\/?#]+)$/i</span>) || [, <span class="string">&quot;&quot;</span>])[<span class="number">1</span>],</span><br><span class="line">        <span class="attr">hash</span>: a.<span class="property">hash</span>.<span class="title function_">replace</span>(<span class="string">&quot;#&quot;</span>, <span class="string">&quot;&quot;</span>),</span><br><span class="line">        <span class="attr">path</span>: a.<span class="property">pathname</span>.<span class="title function_">replace</span>(<span class="regexp">/^([^\/])/</span>, <span class="string">&quot;/$1&quot;</span>),</span><br><span class="line">        <span class="attr">relative</span>: (a.<span class="property">href</span>.<span class="title function_">match</span>(<span class="regexp">/tps?:\/\/[^\/]+(.+)/</span>) || [, <span class="string">&quot;&quot;</span>])[<span class="number">1</span>],</span><br><span class="line">        <span class="attr">segments</span>: a.<span class="property">pathname</span>.<span class="title function_">replace</span>(<span class="regexp">/^\//</span>, <span class="string">&quot;&quot;</span>).<span class="title function_">split</span>(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getReplacePhotoURL</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> photoURL = <span class="title function_">parseURL</span>(url);</span><br><span class="line">    <span class="keyword">var</span> photoNewUrl = photoURL.<span class="property">protocol</span> + <span class="string">&quot;://&quot;</span> + photoURL.<span class="property">host</span> + <span class="string">&quot;:&quot;</span> + photoPort + photoURL.<span class="property">path</span> + photoURL.<span class="property">query</span>;</span><br><span class="line">    <span class="keyword">return</span> photoNewUrl</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> timer = <span class="variable language_">window</span>.<span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable constant_">SYNO</span>.<span class="property">SDS</span>.<span class="property">UrlTag</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> photoNewUrl = <span class="title function_">getReplacePhotoURL</span>(<span class="variable constant_">SYNO</span>.<span class="property">SDS</span>.<span class="property">UrlTag</span>.<span class="property">photo</span>);</span><br><span class="line">        <span class="variable constant_">SYNO</span>.<span class="property">SDS</span>.<span class="property">UrlTag</span>.<span class="property">photo</span> = photoNewUrl;</span><br><span class="line">        <span class="keyword">var</span> pphotoNewUrl = <span class="title function_">getReplacePhotoURL</span>(<span class="variable constant_">SYNO</span>.<span class="property">SDS</span>.<span class="property">UrlTag</span>.<span class="property">pphoto</span>);</span><br><span class="line">        <span class="variable constant_">SYNO</span>.<span class="property">SDS</span>.<span class="property">UrlTag</span>.<span class="property">pphoto</span> = pphotoNewUrl;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="built_in">clearInterval</span>(timer)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="number">50</span>);</span><br></pre></td></tr></table></figure>
<p>编辑 <code>/usr/syno/synoman/webman/desktop.html</code> 在倒数第二行添加 js 引用：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;webman/DsPhoto.source.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>保存后，重新刷新DSM页面，桌面点击 DS Photo 则可以直接跳转到指定端口。<br>也可以使用脚本直接替换：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">echo &quot;port: $1&quot;</span><br><span class="line">rm -fr /usr/syno/synoman/webman/DsPhoto.source.js</span><br><span class="line">wget -P /usr/syno/synoman/webman https://gitee.com/libra-1010/ds-photo/raw/master/DsPhoto.source.js </span><br><span class="line">sed -i &quot;1i\var photoPort = &#x27;$1&#x27;;&quot;  /usr/syno/synoman/webman/DsPhoto.source.js</span><br><span class="line">if grep -q &quot;&lt;script id=\&quot;DsPhoto\&quot;&quot; /usr/syno/synoman/webman/desktop.html</span><br><span class="line">then</span><br><span class="line">    echo &#x27;已可广域网访问&#x27;</span><br><span class="line">else</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">line=`sed -n  <span class="string">&quot;/&lt;\/body&gt;/=&quot;</span> test.html`</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash"><span class="built_in">echo</span> <span class="variable">$line</span></span></span><br><span class="line">  sed -i &#x27;/&lt;\/body&gt;/i&lt;script id=&quot;DsPhoto&quot; type=&quot;text/javascript&quot; src=&quot;webman/DsPhoto.source.js&quot;&gt;&lt;/script&gt;&#x27;  /usr/syno/synoman/webman/desktop.html </span><br><span class="line">  echo &#x27;已替换&#x27; </span><br><span class="line">fi</span><br></pre></td></tr></table></figure>


<h3 id="Audio-Station-添加歌词插件"><a href="#Audio-Station-添加歌词插件" class="headerlink" title="Audio Station 添加歌词插件"></a>Audio Station 添加歌词插件</h3><p>　　AudioStation是群辉下的音乐管理套件，可以很方便的创建维护自己的音乐库，有效的不再依赖第三方音乐服务商。自带的歌词插件资源少，之前很多朋友都是用的网易云的歌词插件，但是在我体验之后发现还是，52pojie 的小歆大神写的QQ音乐歌词的插件比较全： <a href="https://www.52pojie.cn/thread-1029057-1-1.html"> 群辉AudioStation歌词插件（QQ音乐版）</a><br>　　效果如图：<br>　　<img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-audiostation.png" alt="群晖-audiostation-QQ音乐歌词插件"></p>
<h3 id="Active-Backup-for-Business-解锁"><a href="#Active-Backup-for-Business-解锁" class="headerlink" title="Active Backup for Business 解锁"></a>Active Backup for Business 解锁</h3><p>　　Active Backup for Business 是一个十分强大的备份套件，可以集中保护 PC、物理服务器或虚拟机，甚至是云端中的数据，快速恢复文件、系统、业务数据。无论备份多少设备。(详细介绍见<a href="https://www.synology.cn/zh-cn/dsm/feature/active_backup_business">Synology Active Backup for Business-群晖官方</a>）<br>　　Alliot 目前是用来备份云服务器以及 PC 电脑（Alliot 用到的群晖上的备份策略会在后面的文章中专门讲到）。<br>　　白群晖用户登录 synology 账号即可使用，黑群晖需要按照如下方法解锁方可使用：<br>　　<br>　　套件中心安装好 Active Backup for Business 套件之后，打开会如下图所示要求激活：<br>　　<img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-activebackupforbusiness%E6%9C%AA%E6%BF%80%E6%B4%BB.png" alt="群晖-activebackupforbusiness未激活.png"><br>　　使用浏览器访问 </p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">ip:<span class="number">5001</span>/webapi/auth.cgi?api=SYNO.API.Auth&amp;<span class="keyword">method</span>=<span class="title function_">Login</span>&amp;<span class="title function_">version</span>=1&amp;<span class="title function_">account</span>=用户名&amp;<span class="title function_">passwd</span>=密码</span><br></pre></td></tr></table></figure>
<p>返回结果如下：  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;success&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>则表示成功，再打开   </p>
<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">https://群晖的ip:5001/webapi/entry.cgi?api=SYNO.ActiveBackup.Activation<span class="variable">&amp;method</span>=<span class="keyword">set</span><span class="variable">&amp;version</span>=1<span class="variable">&amp;activated</span>=true<span class="variable">&amp;serial_number</span>=<span class="string">&quot;序列号&quot;</span></span><br></pre></td></tr></table></figure>
<p>返回结果如下：  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;activated&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;success&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>进入 DSM 重新打开 Active Backup for Business 如下图则表示激活成功：<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-activebackupforbusiness%E5%B7%B2%E6%BF%80%E6%B4%BB.png" alt="群晖-activebackupforbusiness已激活.png"><br>(路由器映射 5510 端口 TCP  才能在公网进行备份)  </p>
<h3 id="Transmission-安装与汉化"><a href="#Transmission-安装与汉化" class="headerlink" title="Transmission 安装与汉化"></a>Transmission 安装与汉化</h3><p>　　 Transmission 是许多 PT 爱好者中意的下载工具之一（后面 Alliot 将专门讲一讲 PT 下载这个东西，这里不多赘述），但是其官方的 UI 十分简陋，也不包含中文语言，将其汉化与 UI 替换后易用性会大大增加。  </p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>　　<a href="/post/synology-series-4.html#%E6%B7%BB%E5%8A%A0%E7%A4%BE%E5%8C%BA%E5%A5%97%E4%BB%B6%E6%BA%90">添加社区套件源</a>，搜索 Transmission，点击 “安装套件” 后：<br>　　如图，配置下载路径，以及 Web 控制台管理员用户密码：<br>　　<img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-transmission%E5%AE%89%E8%A3%851.png" alt="群晖-transmission安装1.png"><br>　　<img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-transmission%E5%AE%89%E8%A3%852.png" alt="群晖-transmission安装2.png"><br>　　之后按照指引下一步直到完成即可。<br>　　安装完成后，在浏览器打开：  </p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">http:</span><span class="comment">//群晖的ip:9091  </span></span><br></pre></td></tr></table></figure>
<p>即可打开控制台，此时的 UI 还是十分简陋的默认 UI，下面我们对其进行 UI 替换与汉化。  </p>
<h4 id="UI-优化"><a href="#UI-优化" class="headerlink" title="UI 优化"></a>UI 优化</h4><p>　　这里用到的是一个开源项目（感谢开源作者们的贡献）：  <a href="https://github.com/ronggang/transmission-web-control">transmission-web-control</a><br>　　<a href="/post/synology-series-1.html#ssh-%E8%BF%9E%E6%8E%A5%E5%B9%B6%E8%8E%B7%E5%BE%97-root-%E6%9D%83%E9%99%90">ssh 连接并群晖获取 root 权限</a>， 执行：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -s https://raw.githubusercontent.com/ronggang/transmission-web-control/master/release/install-tr-control-cn.sh | bash -s auto</span><br></pre></td></tr></table></figure>
<p>出现报错则是因为墙又抽风了，可以手动下载 <a href="https://github.com/ronggang/transmission-web-control/blob/master/release/install-tr-control-cn.sh">install-tr-control-cn.sh</a> 上传后执行即可。<br>浏览器中 F5 强制刷新后，效果如下：<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-transmission%E6%B1%89%E5%8C%96.png" alt="群晖-transmission汉化.png">  </p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>　　到这里，套件的修改折腾基本打止了，比较遗憾的是群晖另外一个监控平台套件 Surveillance 到现在为止还是没有新版本较为完善的破解方案（白群晖也需要购买授权，一个摄像头的授权大几百，对于普通人来说还是很贵的）。<br>　　下篇 Alliot 将介绍群晖上的 Docker，通过 Docker 我们才能够更好的发挥群晖的作用。  </p>
]]></content>
      <categories>
        <category>群晖入门到进阶系列</category>
      </categories>
      <tags>
        <tag>折腾</tag>
        <tag>系列</tag>
        <tag>群晖</tag>
      </tags>
  </entry>
  <entry>
    <title>群晖入门到进阶系列（八）：为群晖配置ipkg软件包管理</title>
    <url>//post/synology-series-8.html</url>
    <content><![CDATA[<p>　　群晖系统是基于 Linux 二次开发的（个人感觉像是 Debian 系的魔改），没法使用类似 <code>yum</code> 与 <code>apt</code> 或是其他软件包管理工具进行软件包管理。有时候需要用到一些工具包的时候，需要解决大量的依赖关系，让安装过程非常不方便。在浏览第三方社区源的时候发现有相关套件能够安装类似 <code>ipkg</code> 这样的软件包管理器，体验起来虽然不是那么完美，但也算是解决了燃眉之急。<span id="more"></span><br>　　前排提示： 由于国内的 <code>ipkg</code> 镜像源站非常少（Alliot 暂时没找到比较好的镜像源站），所以需要自行准备出国的上网工具，否则过程会非常漫长，大几率失败。  </p>
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>　　要想让群晖内的流量走代理，出去路由直接翻的，还有更简单的方法就是自己电脑上的工具（如 Alliot 这里使用 <code>V2*NG</code>）打开 <code>允许来自局域网的连接</code>，并使用全局代理：<br>　　<img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7%E7%9A%84%E9%85%8D%E7%BD%AE.png" alt="代理软件配置"><br>　　然后在群晖控制面板的 <code>网络</code> —— <code>常规</code> —— <code>代理服务器</code> 下添加代理：<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE.png" alt="群晖代理设置"><br>　　具体端口和 IP 根据自己的出国上网工具的所在机器的 IP 以及监听端口来定义。  
　　</p>
<h3 id="套件下载"><a href="#套件下载" class="headerlink" title="套件下载"></a>套件下载</h3><p>　　这里可以直接使用套件中心添加 <code>https://www.cphub.net</code>社区套件源，然后直接安装，也可以使用离线 ipk 文件。这里 Alliot 推荐第二种。<br>打开 <a href="https://www.cphub.net/?id=37">community package hub</a>，在如图地方选择你的固件型号：<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-%E7%A4%BE%E5%8C%BA%E6%BA%90%E9%80%89%E6%8B%A9%E6%9C%BA%E5%9E%8B.png" alt="群晖-社区源选择机型.png"><br>下载 <code>Easy Bootstrap Installer</code> 与 <code>iPKGui</code> 两个套件安装包。  </p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>　　<code>Easy Bootstrap Installer</code> 主要为 <code>ipkg</code> 或 <code>opkg</code> 环境，<code>iPKGui</code> 则为 <code>ipkg</code> 的图形界面。因此，我们需要先安装 <code>Easy Bootstrap Installer</code> 后安装 <code>iPKGui</code> 。<br>　　打开群晖 <code>套件中心</code>，选择 <code>手动安装</code>，选择刚才下载好的 <code>Easy Bootstrap Installer</code> spk 文件，依照提示安装后重启群晖即可。（需要注意的是，在装 <code>Easy Bootstrap Installer</code> 的过程中，由于会对源做刷新动作，而 <code>ipkg</code> 的源又被墙了，所以在网络状况不好的情况下，会非常慢。  ）<br>　　之后使用 <a href="/post/synology-series-1.html#ssh-%E8%BF%9E%E6%8E%A5%E5%B9%B6%E8%8E%B7%E5%BE%97-root-%E6%9D%83%E9%99%90">ssh 连接并群晖获取 root 权限</a> ，执行 <code>ipkg</code> 能够正确执行后，依照前面方式在套件中心安装 <code>iPKGui</code> 的 spk 文件即可。至此，整个流程结束，完成 <code>ipkg</code> 的环境配置。  </p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>　　其实网上不少大佬都是直接通过 <code>wget</code> 下来一些 ipkg 的包来进行安装的。Alliot 选择看起来低端许多的方法，目的还是为了保证环境的可控。在不需要使用后完全可以通过套件中心来卸载与停用。<br>　　由于软件仓库的存在，在拥有了 <code>ipkg</code> 后的群晖，可以做更多的事情了（比如安装最常用的 <code>lrzsz</code>与 <code>mlocate</code> 等实用工具，只要你愿意，甚至你都还可以搭建一个 <code>gcc</code> 编译环境做更多的事情）与一般发行版本的体验差距不大了。  </p>
]]></content>
      <categories>
        <category>群晖入门到进阶系列</category>
      </categories>
      <tags>
        <tag>折腾</tag>
        <tag>系列</tag>
        <tag>群晖</tag>
      </tags>
  </entry>
  <entry>
    <title>群晖入门到进阶系列（六）：Docker安装与配置</title>
    <url>//post/synology-series-6.html</url>
    <content><![CDATA[<p>　　最近实在太忙，加班很多，加上原本以为没什么人看，所以拖更了那么久。本篇及后面几篇将会讲讲让群晖变得更强的一个东西：<code>Docker</code>，并介绍 Alliot 正在用的一些不错的镜像。本篇为扫盲，有基础可以跳过此文。<span id="more"></span>  </p>
<h3 id="Docker-介绍"><a href="#Docker-介绍" class="headerlink" title="Docker 介绍"></a>Docker 介绍</h3><p>　　<code>Docker</code> 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。<br>　　Docker 共享操作系统内核底层，只是软件层面的虚拟化，而不像虚拟机那样对物理层虚拟，所以资源的消耗相对小，同时由于社区与 <code>Docker HUB</code> 的存在，大量优质的应用都能够傻瓜式的部署在 <code>Docker</code> 平台上。  </p>
<h3 id="Docker-安装"><a href="#Docker-安装" class="headerlink" title="Docker 安装"></a>Docker 安装</h3><p>　　首先要说的是，x86 平台的群晖才能用的上 <code>Docker</code> 套件，因此，ARM 架构平台的群晖只能说非常遗憾了。<br>　　打开套件中心，在 “所有套件” 中找到 <code>Docker</code> 并安装：<br>　　<img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-docker%E5%A5%97%E4%BB%B6.png" alt="群晖-docker套件.png"><br>　　安装位置根据自己需求选择。<br>　　进入 “控制面板” 选择 “共享文件夹” 创建一个用于存放 <code>Docker</code> 相关 Volume 文件的共享文件夹。后面我们运行一些容器的时候，会需要挂载一些 Volume 做数据持久化，因为容器是无状态的（不知道这样描述对不对），所以我们映射一些文件夹到容器内，这样容器销毁时，就不会丢失这部分数据，关于 Volume 等概念这里不做赘述，有兴趣的朋友可以去参阅相关教程。<br>　　<img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-%E6%96%B0%E5%BB%BAdocker%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9.png" alt="群晖-新建docker共享文件夹.png"><br>　　至此，<code>Docker</code> 套件便安装完成了。</p>
<h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><p>　　下面我们打开套件来了解一下几个概念。<br>　　首先我们来看的是容器(container)，容器类似于 Vmware 等虚拟化平台中的虚拟机，我们知道，我们通过镜像来创建虚拟机，<code>Docker</code> 也类似，从 <code>image</code>(映像) 创建 <code>container</code>（容器）：<br>　　<img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-docker%E5%AE%B9%E5%99%A8%E9%A1%B5.png" alt="群晖-docker容器页.png"><br>　　注册表类似一个公有映像仓库，我们可以从中很方便的下载需要的映像，如：nginx、WordPress 等：<br>　　<img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-docker%E6%B3%A8%E5%86%8C%E8%A1%A8%E9%A1%B5.png" alt="群晖-docker注册表页.png"><br>　　从注册表下载来的映像便到了映像页面：<br>　　<img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-docker%E6%98%A0%E5%83%8F%E9%A1%B5.png" alt="群晖-docker映像页.png"><br>　　我们需要从 “注册表页面” 中搜索我们需要的 “映像” 到本地，从 “映像页面” 创建 “容器” 。  
　　</p>
<h3 id="配置映像加速器"><a href="#配置映像加速器" class="headerlink" title="配置映像加速器"></a>配置映像加速器</h3><p>　　群晖默认的映像服务器下载速度很慢，我们这里使用国内的其他映像源，这里推荐阿里云的镜像加速器：<br>　　参考 <a href="/post/aliyun-docker-mirrors.html">配置阿里云Docker镜像加速度器 - Alliot’s blog</a>，获得自己专属的阿里云镜像加速器地址后，使用 <a href="/post/synology-series-1.html#ssh-%E8%BF%9E%E6%8E%A5%E5%B9%B6%E8%8E%B7%E5%BE%97-root-%E6%9D%83%E9%99%90">ssh 连接并群晖获取 root 权限</a> ，执行：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo tee /var/packages/Docker/etc/dockerd.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">   &quot;data-root&quot; : &quot;/var/packages/Docker/target/docker&quot;,</span><br><span class="line">   &quot;log-driver&quot; : &quot;db&quot;,</span><br><span class="line">   &quot;registry-mirrors&quot; : [ &quot;https://no1pfk8z.mirror.aliyuncs.com&quot; ], # 这里换成前面获得的地址 </span><br><span class="line">   &quot;storage-driver&quot; : &quot;btrfs&quot;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<p>回到套件中心重启 <code>Docker</code> 套件即可（未生效请重启 DSM ）。  </p>
]]></content>
      <categories>
        <category>群晖入门到进阶系列</category>
      </categories>
      <tags>
        <tag>折腾</tag>
        <tag>Docker</tag>
        <tag>系列</tag>
        <tag>群晖</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈RAID</title>
    <url>//post/talk-about-raid.html</url>
    <content><![CDATA[<p>　　RAID(Redundant Arrays of Independent Disks 独立冗余磁盘阵列)，是一种由多块磁盘构成的冗余阵列，在操作系统下整个阵列显示为一块磁盘，RAID具有提升磁盘速度、增大容量、提升容错性等功能，在一块磁盘出故障的情况下不影响磁盘数据，保证数据安全。广泛用于存放各重要数据或对磁盘性能要求较高的设备中。<br>　　RAID常见的级别有RAID0、RAID1、RAID5、RAID10等。这里将各个级别的原理与特点进行粗略的整理。<span id="more"></span><br>　　<blockquote class="blockquote-center">
<p>文中许多资料来自比较零散的网络搜集，暂且不贴出处了。侵删~ 这里Alliot将较为书面的概念通俗点讲，用以加深自己的记忆与理解。</p>

</blockquote></p>
<h2 id="实现形式"><a href="#实现形式" class="headerlink" title="实现形式"></a>实现形式</h2><p>　　RAID有软件与硬件两种实现形式，软件阵列需要一定的CPU资源，一般来说用的比较少，大多数服务器都是搭配专门的硬件磁盘阵列卡来实现的，部分家用电脑主板也带有磁盘阵列的功能(板载RAID)，不过这种阵列方式较单独的阵列卡来说不是那么好用，最主要的一个问题就是在装系统时候需要对应主板、对应系统的驱动程序，否则将无法识别磁盘(像我之前将自己的台式机磁盘做阵列装系统的时候，找驱动就花了很久时间，而且还只有win7&#x2F;vista平台的)，另外一个问题就是有时候我们只需要将数据盘做阵列，而系统盘使用单独的SSD，但是由于板载阵列是需要在BIOS中将AHCI切换为RAID模式的，也就是说板载阵列会将主板上SATA接口的磁盘全部当做阵列子盘，这样就无法实现上述的需求(了解到部分企业级的主板带有sSATA接口的可以解决此需求，不过速度会有损失30%左右，这个因为Alliot没有这类主板，无法证实)。而单独的阵列卡是将磁盘与阵列卡从逻辑上整合为一块硬盘(在系统上来看与一块磁盘没有什么不同)，接到主板上(接口有IDE、SCSI、SATA几种)，在BIOS中可以依然使用AHCI模式，这样就能很好的满足上述的需求。    </p>
<h2 id="阵列级别"><a href="#阵列级别" class="headerlink" title="阵列级别"></a>阵列级别</h2><h3 id="RAID0"><a href="#RAID0" class="headerlink" title="RAID0"></a>RAID0</h3><p>　　RAID0是通过将数据分成多份，来对磁盘进行并行读&#x2F;写，这种模式能够显著提高传输速率，同时容量也是各个阵列子盘容量之和。但是会有一个问题就是数据的可靠性大大降低，阵列子盘中任何一块磁盘出现故障都可能导致所有数据无法读取，事实上这种模式并不符合RAID的初衷，因为它没有数据冗余，只适用于对数据可靠性要求不高的场合。(家用电脑如果有多块同规格的磁盘，可以通过RAID0来提速，省去SSD的钱)<br>　　组成RAID0至少需要2块硬盘，阵列后容量为总硬盘容量之和。<br>　　工作模式如图:<img data-src="https://static.iots.vip/raid0.png" alt="raid0">  </p>
<h3 id="RAID1"><a href="#RAID1" class="headerlink" title="RAID1"></a>RAID1</h3><p>　　RAID0又称作磁盘镜像，也就是将一块磁盘的数据镜像到其他的磁盘上，在不影响性能的情况下最大限度的保证数据的可靠性与可修复性(只要整个阵列中还有一块磁盘正常运行就能恢复数据)，具有极高的数据冗余能力，但是磁盘利用率不高，同时成本也是最高的。由于其数据高可用性，适用于存储重要数据的情形(如服务器、数据库等)<br>　　组成RAID1至少需要2块硬盘，阵列后容量为总硬盘容量的一半(如:2块同规格1T硬盘。组成RAID1后就是1T)<br>　　工作模式如图:<img data-src="https://static.iots.vip/raid1.png" alt="raid1">  </p>
<h3 id="RAID5"><a href="#RAID5" class="headerlink" title="RAID5"></a>RAID5</h3><p>　　RAID5不对数据进行镜像，而是把数据和与其相对应的奇偶校验信息存储到组成RAID5的各个磁盘上，并且奇偶校验信息和相对应的数据分别存储于不同的磁盘上。当RAID5的一个磁盘数据损坏后，利用剩下的数据和相应的奇偶校验信息去恢复被损坏的数据。相比RAID0与RAID1，RAID5算是一种折中的方案，它兼顾了储存性能、数据安全和储存成本，因此是目前运用较多的一种方案。<br>　　组成RAID5至少需要3块硬盘，阵列后容量为2块硬盘的大小。(如：3块同规格1T硬盘。组成RAID5后就是2T)，当有N块阵列盘时，用户空间为N-1块盘容量。  </p>
<h3 id="RAID10"><a href="#RAID10" class="headerlink" title="RAID10"></a>RAID10</h3><p>　　RAID10即RAID1+RAID0，先进行镜像（RAID1），再进行条带存放（RAID0）。这种方式导致磁盘利用率和RAID1一样只有50%(即总硬盘容量的一半)，成本较高，但是得到的是200%的读写速度以及不错的数据安全性。相比RAID5来说，RAID10拥有更好的数据安全性。<br>　　RAID10需要4+2*N 个硬盘（N &gt;&#x3D;0)，而且只能使用其中一半或更小的磁盘用量, 例如4个 250G的硬盘使用RAID10阵列，实际阵列总容量是500G。<br>　　工作模式如图:<img data-src="https://static.iots.vip/raid10.png" alt="raid10"></p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>　　事实上，在实际应用中，往往要综合考虑成本、性能、安全几个因素，几种级别的RAID并不存在哪个最好哪个最差的概念。如:对于图形工作站、个人电脑等对数据安全要求不高，但是对性能、成本要求较高的情形下，RAID0是最合适的选择；而对于极其重要的数据备份储存，则应使用RAID1等。<br>　　关于故障修复的问题，当阵列卡出现故障(当然，这种情况较少，但不排除可能)磁盘里有保存阵列信息，同型号的卡替换可以重新读取出配置重建，最主要的一点就是切记在拔硬盘的时候将顺序记下来，否则，一旦顺序弄错，数据很有可能无法恢复。<br>　　<br><del>2020年3月24日</del><br>冗余从好到坏：RAID1 &gt; RAID10 &gt; RAID 5 &gt; RAID0  </p>
<p>性能从好到坏：RAID0 &gt; RAID10 &gt; RAID5 &gt; RAID1  </p>
<p>成本从高到低：RAID10 &gt; RAID1 &gt; RAID5 &gt; RAID0  </p>
<p>单台服务器：很重要盘不多，系统盘，RAID1  </p>
<p>数据库服务器：主库：RAID10  从库：RAID5 RAID0（为了维护成本，RAID10）  </p>
<p>WEB服务器，如果没有太多的数据的话，RAID5,RAID0（单盘）  </p>
<p>有多台，监控、应用服务器，RAID0 RAID5  </p>
]]></content>
      <tags>
        <tag>存储</tag>
        <tag>硬件</tag>
      </tags>
  </entry>
  <entry>
    <title>群晖入门到进阶系列（四）：Video Station 套件</title>
    <url>//post/synology-series-4.html</url>
    <content><![CDATA[<p>　　群晖上对电影等资源的管理方案有很多，自带的 Video Station 作为其官方的套件，相比 Emby&#x2F;jellyfin、Plex 等第三方的方案，Video Station 胜在简洁易用，DSM 中直接打开视频也是调用的 Video Station 播放，不过我们还是需要对 Video Station 做一些优化（例如对音频编码的支持、电影信息的搜刮等）才能充当我们的电影管理平台。<span id="more"></span><br>　　安装与添加媒体库的过程很简单，直接在“套件中心”查找 Video Station 安装并打开即可，这里不赘述。</p>
<h3 id="音频编码解锁"><a href="#音频编码解锁" class="headerlink" title="音频编码解锁"></a>音频编码解锁</h3><p>　　最新版的 video station（2.4.7），由于版权问题，锁了 eac3、dts、truehd  等音频编码，因此在播放这些音轨编码的文件时会提示“不支持当前所选音轨的文件格式，因此无法播放视频。请尝试播放其他音轨，确认是否支持”。<a href="https://post.smzdm.com/p/a830ne70/">张大妈</a> 上的这篇文章可以解决这个问题，但是会带来另外一个问题：无法为视频生成缩略图。因为第三方的 ffmpeg 的部分参数与 video station 的 ffmpeg 有些不同。<br>　　<a href="https://blog.wanghaoyu.cn/2020/03/31/synology-videostation/">浣熊窝</a> 大佬的这篇文章很好的解决了这个问题,他的这篇文章更加详细，以下为 Alliot 转摘部分。  </p>
<h4 id="添加社区套件源"><a href="#添加社区套件源" class="headerlink" title="添加社区套件源"></a>添加社区套件源</h4><p>　　如图，打开套件中心，添加套件来源：<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-%E6%B7%BB%E5%8A%A0%E5%A5%97%E4%BB%B6%E6%9D%A5%E6%BA%90.png" alt="群晖-添加套件来源.png">  </p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">名称： SynoCommunity  </span><br><span class="line">位置： http:<span class="comment">//packages.synocommunity.com/   </span></span><br></pre></td></tr></table></figure>
<p>保存即可。<br><del>2021年10月28日更新</del><br>DSM 6 版本在添加社区源时出现 “无效的位置”，无法添加成功，参考 <a href="https://github.com/SynoCommunity/spksrc/issues/4897">can’t add community repo - “invalid location” error </a> 解决：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br><span class="line">mv /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt.bak</span><br><span class="line">curl -Lko /etc/ssl/certs/ca-certificates.crt https://curl.se/ca/cacert.pem</span><br></pre></td></tr></table></figure>

<h4 id="解除屏蔽"><a href="#解除屏蔽" class="headerlink" title="解除屏蔽"></a>解除屏蔽</h4><p>套件中心社区源安装最新版的 ffmpeg 后，<a href="/post/synology-series-1.html#ssh-%E8%BF%9E%E6%8E%A5%E5%B9%B6%E8%8E%B7%E5%BE%97-root-%E6%9D%83%E9%99%90">ssh 连接并群晖获取 root 权限</a>，按顺序执行如下命令：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod +s /var/packages/ffmpeg/target/bin/ffmpeg</span><br><span class="line">chmod +s /var/packages/ffmpeg/target/bin/ffprobe</span><br><span class="line">chmod +s /var/packages/ffmpeg/target/bin/vainfo</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">备份</span></span><br><span class="line">sed -i&#x27;-BACKUP&#x27; -e &#x27;s/eac3/ZAAP/&#x27; -e &#x27;s/dts/ZAP/&#x27; -e &#x27;s/truehd/ZAPZAP/&#x27; /var/packages/VideoStation/target/lib/libsynovte.so</span><br><span class="line">mv /var/packages/VideoStation/target/bin/ffmpeg /var/packages/VideoStation/target/bin/ffmpeg-BACKUP</span><br><span class="line">mv /var/packages/VideoStation/target/bin/ffprobe /var/packages/VideoStation/target/bin/ffprobe-BACKUP</span><br><span class="line">mv /var/packages/VideoStation/target/bin/vainfo /var/packages/VideoStation/target/bin/vainfo-BACKUP</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新/var/packages/VideoStation/target/ffmpeg为自定义脚本，调用第三方的ffmpeg</span></span><br><span class="line">echo &quot;H4sICJ6oBF8AA2ZmbXBlZy13cmFwcGVyAO1abXPbNhL+LP4KhKVf5Jimybn7ogwz8dlKqklcayzHnU7ioyASlFhTJEtQVFzH/70LAqT4KjltrzO9qWeSSMCziwfAg8Vine9eaDMv0GaYLiQpJqkp64YsSZYfzg/7j1KP2IsQycqhgxOCDl7u/aTuLdU9B+19P9i7HOxNDvpIRcojTWKCl57zxL7pMnr9GmnJMtJcdxmR+Ql4k564VyvCMS67BvRX5Ia+g9Q10o1T+EaJg2Sq/ffkSNG+aejix0T7WieLhMTLjEG8LPerJV8nNHFIHEs9RhnJR0dH6P3ow4fz70cfLhB8k6Xevef7SL0ZXl/CJOyF5zuR58jIeK05JNWCle+zwZIYRygbEU1G7xhaknBsL8zpKsBLglQs5ntAtZMj+hCEMOCDpWkH0G6vEqRCl3WAVBfpUynA9HcYGlMJqJmKIrG1X6bUVN5IfKqmrDy+GSBVf5KlfPKm/PbtpcImI4E0dFNLcaxF2L7Hc0LFWmkJjuckybTDWxjWqGFvPYeEkwQnXhg0LdT/nJ2//ziG5ZhT87AvSakdOsQ25fdXoMA1rChBnz4h5TukzhN0iu7uJCeUbEwJV40XSD3V60u9Hl14bgL/LsPUIybrhC/M7UvzUFY9OcMD8NUrsFissW0Tv2wnmhqWor1qTzOWZXMqeNeseXPV2C3bue12btVkiaOyUQGD9gLY8xz4ak6zI6XoGwUMxP4DwkWfAJ4KUiZiy4zuXqFkQWAhez2x+tPd2x3F4QwEmCI4IWGMVEp8YicW1w9FSkYGmhfh2iJBEnuEIiG3bAyLCzh0kUNcvPITMwij2AsSaw2nJSIxNfVBEN6TB1MHytmusiCxIBiCRMAOQsEXuLgglP8xbTHKH+VMfEoYdfz3WmrX41I86pf0VyiUUGxLXJ1OGBAe5XnIHF9fnQ8nEzS5Obu+QdfDW6TAFYMuJgoEMnSosEDYR+PRBWLhhsdVEYYcLzan8FfGX1Z4ozyVILZ6Nmy3jZMi9gPsSUtZrLGWJMFwX7DY+PMvSI3RwQm3OJgKXhfD29H5MLsiFN4li57Lq9vRkF8eYiGADIFjpAKBRzbvT2/uIE5mASsgaxaz2EedpvlHY/NRT2nRyj8+N6RRWj/vMBiPKHRz4sXIW9uDEOLXKob706KE3G/6U9puJ9q77AzhFwfYf/iVOAwCoR2c6Kf8ZwMVrrZDswDndU3Xa59VrdkoNUdeRAan8EFEx9PG1OrGpeZW44xhWgnbIpIWlwOE0hTjCFzcof39UpQVUSNDXGIPTtNpJeJSG/vEWouwDRqDW1hc6irh97q5NjVtflBpHSzMkyPWOt04WWxzAgYFHMj7JDs6fPAndPbDRaVp8bRhWNmOlF1MHJPNF7ht3MAYGwcDN4yXGGJNqhvHi/Uq8kPsHMNZojg22R++AUU83D7MM52xKLWJsHWHYs8zUFk15c6yTtLaLZw2bv3KENWrviLXos8Oo4eGalstcw4tfUa9L/eascQNlkKseiZC35u5GNsVEZangXOnDNTPe/OJtPcWB73e27YVuDajdv/lzob7ro3Ercus182ryzXr2lA8a9/MentBb1aVC+6UCu6QSb19M/EtGWTZcV3Iwi9rZnlFQhva65B+m0XamppSMl9C1mHxE9p5a1VQ7bPcislvuXZMhYnv0cRKHiKyi0wB3M6nC1aj1ITxp4ZPswvUSrxlJ6MKqJ3NNohg0g6prM02EmXM9hXpptCKaDCwHOIn+Dk8OHI3m1ZcC6carsKMQtadWMFqOSPxLm5l7HZ2W5A1fq1Inh0Fjge57Qr7FkvKSWwlMYasopNmp0FH5vNMeJ5l7YTz+JeGnmMFZA5ZX0qspDOlbQA7ouAOWB5EO2EZqxm8Fu6tIAwsePC4MTwtOnm1QNuZ7QYKbtuA4qH/xVquvnjB3PplRVaQe3u/Ng5sPmwruH3g7dCuGkO+EJUyQ/liaXakzcJE5dkoXOYlC56ZiJcdS09YllLLTPLBZitXsNZPjX/d59l6OVHgyEpikW/RbuO09KatZC7dbkuJSNsrOEvAPZaDy1R7/CzDK/ezPFAe4aH7dPxZXuDYWeOYsOMTZJUi6E3iFTl+LtjFQPNYk3kJs1JqIwGe+cRhb2kIK+QLsVn8g/c0q6S+3KNTScpXf1MOoqtZ7EXFDvSkvPj59u3lePiOv4tZkU/OO86vLobn4sEsHOVd47Prs8vbCXSJpqzsCwOKCiS0Sr3MW+VtjfZf76jIon1JIr5g727YL38G/O8l7/6l5EFc+Ui3OQsgwTN6dFh9PPYLVmclLP5mwnmJ42Io6uM/Xp+N5Y5V0quefxxzz5k33eRThsPMZt0yHljz5dHz5RHYZ64QnCgpr6ebygtRnclK76xUBBSLaru0xl6y+Z7Jeh6TCOBhkJKYwmlALrufnBfyrqG/fhW2w6zWFkYkgJiJYBcS8PQN9h+DmNjhPICY44AbXvd4rvEoSLHvOSirYrnhKnDQGhSNQA82oZQx8oJolezyKOJo+TcY/LcXwx/y32B0RgdhM7m5uPp4gxqymiawoll18N87SEzblDcejYdoclsTn94UH+8wmmc3U6WOWlQJ90W3KsvWRtnaENZGp7XR0LQYidVaKqHAyNufpfVeWei9bUrv1aXOjsk/cv+byP120iV3o0vu+nPkntI/IvdO60LuhazFSLnci2NgpN9y+f0j9/97uV9dj9515RVNWf112qEJbHnLaoCmEkIBfnhYhqiV5ev3keonSD/NXyd/4hIycp272PxdWtEl7f7fC78BTGYfI90hAAA=&quot; | base64 -d | gunzip &gt; /var/packages/VideoStation/target/bin/ffmpeg</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新ffprobe vainfo</span></span><br><span class="line">ln -s /var/packages/ffmpeg/target/bin/ffprobe /var/packages/VideoStation/target/bin/ffprobe</span><br><span class="line">ln -s /var/packages/ffmpeg/target/bin/vainfo /var/packages/VideoStation/target/bin/vainfo</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解除对EAC3 DTS TrueHD的屏蔽</span></span><br><span class="line">sed -i&#x27;-BACKUP&#x27; -e &#x27;s/eac3/ZAAP/&#x27; -e &#x27;s/dts/ZAP/&#x27; -e &#x27;s/truehd/ZAPZAP/&#x27; /var/packages/VideoStation/target/lib/libsynovte.so</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">调整权限信息</span></span><br><span class="line">chmod +x /var/packages/VideoStation/target/bin/ffmpeg</span><br><span class="line">chmod +s /var/packages/VideoStation/target/bin/ffmpeg</span><br><span class="line">chown root:VideoStation /var/packages/VideoStation/target/bin/ffmpeg</span><br></pre></td></tr></table></figure>
<p>其中，上文中指的自定义脚本如下：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">rev=&quot;12&quot;</span><br><span class="line"></span><br><span class="line">_log()&#123;</span><br><span class="line">	echo &quot;$(date &#x27;+%Y-%m-%d %H:%M:%S&#x27;) - $&#123;streamid&#125; - $1&quot; &gt;&gt; /tmp/ffmpeg.log</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_log_para()&#123;</span><br><span class="line">	echo &quot;$1&quot; | fold -w 120 | sed &quot;s/^.*$/$(date &#x27;+%Y-%m-%d %H:%M:%S&#x27;) - $&#123;streamid&#125; -          = &amp;/&quot; &gt;&gt; /tmp/ffmpeg.log</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_term()&#123;</span><br><span class="line">	rm /tmp/ffmpeg-$&#123;streamid&#125;.stderr</span><br><span class="line">	_log &quot;*** KILLCHILD ***&quot;</span><br><span class="line">	kill -TERM &quot;$childpid&quot; 2&gt;/dev/null</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">trap _term SIGTERM</span><br><span class="line"></span><br><span class="line">arch=`uname -a | sed &#x27;s/.*synology_//&#x27; | cut -d &#x27;_&#x27; -f 1`</span><br><span class="line">nas=`uname -a | sed &#x27;s/.*synology_//&#x27; | cut -d &#x27;_&#x27; -f 2`</span><br><span class="line">pid=$$</span><br><span class="line">paramvs=$@</span><br><span class="line">stream=&quot;$&#123;@: -1&#125;&quot;</span><br><span class="line">streamid=&quot;FFM$pid&quot;</span><br><span class="line">bin1=/var/packages/ffmpeg/target/bin/ffmpeg</span><br><span class="line">bin2=/var/packages/VideoStation/target/bin/ffmpeg-BACKUP</span><br><span class="line">args=()</span><br><span class="line"></span><br><span class="line">vcodec=&quot;KO&quot;</span><br><span class="line"></span><br><span class="line">while [[ $# -gt 0 ]]</span><br><span class="line">do</span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">	-i)</span><br><span class="line">		shift</span><br><span class="line">		movie=&quot;$1&quot;</span><br><span class="line">		args+=(&quot;-i&quot; &quot;$1&quot;)</span><br><span class="line">	;;</span><br><span class="line">	-hwaccel)</span><br><span class="line">		shift</span><br><span class="line">		hwaccel=&quot;$1&quot;</span><br><span class="line">		args+=(&quot;-hwaccel&quot; &quot;$1&quot;)</span><br><span class="line">	;;</span><br><span class="line">	-scodec)</span><br><span class="line">		shift</span><br><span class="line">		scodec=&quot;$1&quot;</span><br><span class="line">		args+=(&quot;-scodec&quot; &quot;$1&quot;)</span><br><span class="line">	;;</span><br><span class="line">	-f)</span><br><span class="line">		shift</span><br><span class="line">		fcodec=&quot;$1&quot;</span><br><span class="line">		args+=(&quot;-f&quot; &quot;$1&quot;)</span><br><span class="line">	;;</span><br><span class="line">	-map)</span><br><span class="line">		shift</span><br><span class="line">		args+=(&quot;-map&quot; &quot;$1&quot;)</span><br><span class="line">		idmap=`echo $1 | cut -d : -f 2`</span><br><span class="line">		if [ &quot;$vcodec&quot; = &quot;KO&quot; ]; then</span><br><span class="line">			vcodec=`/var/packages/ffmpeg/target/bin/ffprobe -v error -select_streams $idmap -show_entries stream=codec_name -of default=noprint_wrappers=1:nokey=1 &quot;$movie&quot; | head -n 1`</span><br><span class="line">			vcodecprofile=`/var/packages/ffmpeg/target/bin/ffprobe -v error -select_streams $idmap -show_entries stream=profile -of default=noprint_wrappers=1:nokey=1 &quot;$movie&quot; | head -n 1`</span><br><span class="line">		else</span><br><span class="line">			acodec=`/var/packages/ffmpeg/target/bin/ffprobe -v error -select_streams $idmap -show_entries stream=codec_name -of default=noprint_wrappers=1:nokey=1 &quot;$movie&quot; | head -n 1`</span><br><span class="line">		fi</span><br><span class="line">	;;</span><br><span class="line">	*)</span><br><span class="line">		args+=(&quot;$1&quot;)</span><br><span class="line">	;;</span><br><span class="line">esac</span><br><span class="line">shift</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">_log &quot;*** PROCESS START REV $rev DS$nas ($arch) PID $pid ***&quot;</span><br><span class="line"></span><br><span class="line">streamdir=`dirname &quot;$stream&quot;`</span><br><span class="line">device=`cat $&#123;streamdir&#125;/video_metadata | jq -r &#x27;.device&#x27;`</span><br><span class="line">_log &quot;DEVICE   = $device&quot;</span><br><span class="line">_log &quot;MOVIE    = $movie&quot;</span><br><span class="line"></span><br><span class="line">set -- &quot;$&#123;args[@]&#125;&quot;</span><br><span class="line"></span><br><span class="line">argsnew=()</span><br><span class="line">args1sv=()</span><br><span class="line">args2sv=()</span><br><span class="line">args1vs=()</span><br><span class="line">args2vs=()</span><br><span class="line"></span><br><span class="line">while [[ $# -gt 0 ]]</span><br><span class="line">do</span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">	-ss)</span><br><span class="line">		shift</span><br><span class="line">		argsnew+=(&quot;-ss&quot; &quot;$1&quot;)</span><br><span class="line">		args1sv+=(&quot;-ss&quot; &quot;$1&quot;)</span><br><span class="line">		args1sv+=(&quot;-noaccurate_seek&quot;)</span><br><span class="line">		args1vs+=(&quot;-ss&quot; &quot;$1&quot;)</span><br><span class="line">		args1vs+=(&quot;-noaccurate_seek&quot;)</span><br><span class="line">		args2sv+=(&quot;-analyzeduration&quot; &quot;10000000&quot;)</span><br><span class="line">		args2vs+=(&quot;-analyzeduration&quot; &quot;10000000&quot;)</span><br><span class="line">	;;</span><br><span class="line">	-i)</span><br><span class="line">		shift</span><br><span class="line">		argsnew+=(&quot;-i&quot; &quot;$1&quot;)</span><br><span class="line">		args1sv+=(&quot;-i&quot; &quot;$1&quot;)</span><br><span class="line">		args2sv+=(&quot;-i&quot; &quot;pipe:0&quot; &quot;-map&quot; &quot;0&quot;)</span><br><span class="line">		args1vs+=(&quot;-i&quot; &quot;$1&quot;)</span><br><span class="line">		args2vs+=(&quot;-i&quot; &quot;pipe:0&quot; &quot;-map&quot; &quot;0&quot;)</span><br><span class="line">	;;</span><br><span class="line">	-vf)</span><br><span class="line">		shift</span><br><span class="line">		if [ &quot;$hwaccel&quot; = &quot;vaapi&quot; ] &amp;&amp; [ &quot;$vcodecprofile&quot; = &quot;Main 10&quot; ]; then</span><br><span class="line">			scale_w=`echo &quot;$&#123;1&#125;&quot; | sed -e &#x27;s/.*=w=//g&#x27; | sed -e &#x27;s/:h=.*//g&#x27;`</span><br><span class="line">			scale_h=`echo &quot;$&#123;1&#125;&quot; | sed -e &#x27;s/.*:h=//g&#x27;`</span><br><span class="line">			if let $&#123;scale_w&#125; AND let $&#123;scale_h&#125;; then</span><br><span class="line">				argsnew+=(&quot;-vf&quot; &quot;scale_vaapi=w=$&#123;scale_w&#125;:h=$&#123;scale_h&#125;:format=nv12,hwupload,setsar=sar=1&quot;)</span><br><span class="line">			else</span><br><span class="line">				argsnew+=(&quot;-vf&quot; &quot;scale_vaapi=format=nv12,hwupload,setsar=sar=1&quot;)</span><br><span class="line">			fi</span><br><span class="line">		else</span><br><span class="line">			argsnew+=(&quot;-vf&quot; &quot;$1&quot;)</span><br><span class="line">		fi</span><br><span class="line">		args2sv+=(&quot;-vf&quot; &quot;$1&quot;)</span><br><span class="line">		args1vs+=(&quot;-vf&quot; &quot;$1&quot;)</span><br><span class="line">	;;</span><br><span class="line">	-vcodec)</span><br><span class="line">		shift</span><br><span class="line">		argsnew+=(&quot;-vcodec&quot; &quot;$1&quot;)</span><br><span class="line">		args1sv+=(&quot;-vcodec&quot; &quot;copy&quot;)</span><br><span class="line">		args2sv+=(&quot;-vcodec&quot; &quot;$1&quot;)</span><br><span class="line">		args1vs+=(&quot;-vcodec&quot; &quot;$1&quot;)</span><br><span class="line">		args2vs+=(&quot;-vcodec&quot; &quot;copy&quot;)</span><br><span class="line">	;;</span><br><span class="line">	-acodec)</span><br><span class="line">		shift</span><br><span class="line">		if [ &quot;$1&quot; = &quot;libfaac&quot; ]; then</span><br><span class="line">			argsnew+=(&quot;-acodec&quot; &quot;aac&quot;)</span><br><span class="line">			args1sv+=(&quot;-acodec&quot; &quot;aac&quot;)</span><br><span class="line">			args2vs+=(&quot;-acodec&quot; &quot;aac&quot;)</span><br><span class="line">		else</span><br><span class="line">			argsnew+=(&quot;-acodec&quot; &quot;$1&quot;)</span><br><span class="line">			args1sv+=(&quot;-acodec&quot; &quot;$1&quot;)</span><br><span class="line">			args2vs+=(&quot;-acodec&quot; &quot;$1&quot;)</span><br><span class="line">		fi</span><br><span class="line">		args2sv+=(&quot;-acodec&quot; &quot;copy&quot;)</span><br><span class="line">		args1vs+=(&quot;-acodec&quot; &quot;copy&quot;)</span><br><span class="line">	;;</span><br><span class="line">	-ab)</span><br><span class="line">		shift</span><br><span class="line">		argsnew+=(&quot;-ab&quot; &quot;$1&quot;)</span><br><span class="line">		args1sv+=(&quot;-ab&quot; &quot;$1&quot;)</span><br><span class="line">		args2vs+=(&quot;-ab&quot; &quot;$1&quot;)</span><br><span class="line">	;;</span><br><span class="line">	-ac)</span><br><span class="line">		shift</span><br><span class="line">		argsnew+=(&quot;-ac&quot; &quot;$1&quot;)</span><br><span class="line">		args1sv+=(&quot;-ac&quot; &quot;$1&quot;)</span><br><span class="line">		args2vs+=(&quot;-ac&quot; &quot;$1&quot;)</span><br><span class="line">	;;</span><br><span class="line">	-f)</span><br><span class="line">		shift</span><br><span class="line">		argsnew+=(&quot;-f&quot; &quot;$1&quot;)</span><br><span class="line">		args1sv+=(&quot;-f&quot; &quot;mpegts&quot;)</span><br><span class="line">		args2sv+=(&quot;-f&quot; &quot;$1&quot;)</span><br><span class="line">		args1vs+=(&quot;-f&quot; &quot;mpegts&quot;)</span><br><span class="line">		args2vs+=(&quot;-f&quot; &quot;$1&quot;)</span><br><span class="line">	;;</span><br><span class="line">	-segment_format)</span><br><span class="line">		shift</span><br><span class="line">		argsnew+=(&quot;-segment_format&quot; &quot;$1&quot;)</span><br><span class="line">		args2vs+=(&quot;-segment_format&quot; &quot;$1&quot;)</span><br><span class="line">		args2sv+=(&quot;-segment_format&quot; &quot;$1&quot;)</span><br><span class="line">	;;</span><br><span class="line">	-segment_list_type)</span><br><span class="line">		shift</span><br><span class="line">		argsnew+=(&quot;-segment_list_type&quot; &quot;$1&quot;)</span><br><span class="line">		args2vs+=(&quot;-segment_list_type&quot; &quot;$1&quot;)</span><br><span class="line">		args2sv+=(&quot;-segment_list_type&quot; &quot;$1&quot;)</span><br><span class="line">	;;</span><br><span class="line">	-hls_seek_time)</span><br><span class="line">		shift</span><br><span class="line">		argsnew+=(&quot;-hls_seek_time&quot; &quot;$1&quot;)</span><br><span class="line">		args2vs+=(&quot;-hls_seek_time&quot; &quot;$1&quot;)</span><br><span class="line">		args2sv+=(&quot;-hls_seek_time&quot; &quot;$1&quot;)</span><br><span class="line">	;;</span><br><span class="line">	-segment_time)</span><br><span class="line">		shift</span><br><span class="line">		argsnew+=(&quot;-segment_time&quot; &quot;$1&quot;)</span><br><span class="line">		args2vs+=(&quot;-segment_time&quot; &quot;$1&quot;)</span><br><span class="line">		args2sv+=(&quot;-segment_time&quot; &quot;$1&quot;)</span><br><span class="line">	;;</span><br><span class="line">	-segment_time_delta)</span><br><span class="line">		shift</span><br><span class="line">		argsnew+=(&quot;-segment_time_delta&quot; &quot;$1&quot;)</span><br><span class="line">		args2vs+=(&quot;-segment_time_delta&quot; &quot;$1&quot;)</span><br><span class="line">		args2sv+=(&quot;-segment_time_delta&quot; &quot;$1&quot;)</span><br><span class="line">	;;</span><br><span class="line">	-segment_start_number)</span><br><span class="line">		shift</span><br><span class="line">		argsnew+=(&quot;-segment_start_number&quot; &quot;$1&quot;)</span><br><span class="line">		args2vs+=(&quot;-segment_start_number&quot; &quot;$1&quot;)</span><br><span class="line">		args2sv+=(&quot;-segment_start_number&quot; &quot;$1&quot;)</span><br><span class="line">	;;</span><br><span class="line">	-individual_header_trailer)</span><br><span class="line">		shift</span><br><span class="line">		argsnew+=(&quot;-individual_header_trailer&quot; &quot;$1&quot;)</span><br><span class="line">		args2vs+=(&quot;-individual_header_trailer&quot; &quot;$1&quot;)</span><br><span class="line">		args2sv+=(&quot;-individual_header_trailer&quot; &quot;$1&quot;)</span><br><span class="line">	;;</span><br><span class="line">	-avoid_negative_ts)</span><br><span class="line">		shift</span><br><span class="line">		argsnew+=(&quot;-avoid_negative_ts&quot; &quot;$1&quot;)</span><br><span class="line">		args2vs+=(&quot;-avoid_negative_ts&quot; &quot;$1&quot;)</span><br><span class="line">		args2sv+=(&quot;-avoid_negative_ts&quot; &quot;$1&quot;)</span><br><span class="line">	;;</span><br><span class="line">	-break_non_keyframes)</span><br><span class="line">		shift</span><br><span class="line">		argsnew+=(&quot;-break_non_keyframes&quot; &quot;$1&quot;)</span><br><span class="line">		args2vs+=(&quot;-break_non_keyframes&quot; &quot;$1&quot;)</span><br><span class="line">		args2sv+=(&quot;-break_non_keyframes&quot; &quot;$1&quot;)</span><br><span class="line">	;;</span><br><span class="line">	-max_muxing_queue_size)</span><br><span class="line">		shift</span><br><span class="line">		args2vs+=(&quot;-max_muxing_queue_size&quot; &quot;$1&quot;)</span><br><span class="line">		args2sv+=(&quot;-max_muxing_queue_size&quot; &quot;$1&quot;)</span><br><span class="line">	;;</span><br><span class="line">	-map)</span><br><span class="line">		shift</span><br><span class="line">		argsnew+=(&quot;-map&quot; &quot;$1&quot;)</span><br><span class="line">		args1sv+=(&quot;-map&quot; &quot;$1&quot;)</span><br><span class="line">		args1vs+=(&quot;-map&quot; &quot;$1&quot;)</span><br><span class="line">	;;</span><br><span class="line">	*)</span><br><span class="line">		argsnew+=(&quot;$1&quot;)</span><br><span class="line">		if [ &quot;$stream&quot; = &quot;$1&quot; ]; then</span><br><span class="line">			args1sv+=(&quot;-bufsize&quot; &quot;1024k&quot; &quot;pipe:1&quot;)</span><br><span class="line">			args2sv+=(&quot;$1&quot;)</span><br><span class="line">			args1vs+=(&quot;-bufsize&quot; &quot;1024k&quot; &quot;pipe:1&quot;)</span><br><span class="line">			args2vs+=(&quot;$1&quot;)</span><br><span class="line">		else</span><br><span class="line">			args2sv+=(&quot;$1&quot;)</span><br><span class="line">			args1vs+=(&quot;$1&quot;)</span><br><span class="line">		fi</span><br><span class="line">	;;</span><br><span class="line">esac</span><br><span class="line">shift</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">sed -i -e &quot;s/&#123;\&quot;PID\&quot;:$&#123;pid&#125;,\&quot;hardware_transcode\&quot;:true,/&#123;\&quot;PID\&quot;:$&#123;pid&#125;,\&quot;hardware_transcode\&quot;:false,/&quot; /tmp/VideoStation/enabled</span><br><span class="line"></span><br><span class="line">startexectime=`date +%s`</span><br><span class="line"></span><br><span class="line">if [ &quot;$scodec&quot; = &quot;subrip&quot; ]; then	</span><br><span class="line"></span><br><span class="line">	_log &quot;FFMPEG   = $bin2&quot;</span><br><span class="line">	_log &quot;CODEC    = $scodec&quot;</span><br><span class="line">	_log &quot;PARAMVS  =&quot;</span><br><span class="line">	_log_para &quot;$paramvs&quot;</span><br><span class="line"><span class="meta prompt_">	</span></span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">bin2 <span class="string">&quot;<span class="variable">$&#123;args[@]&#125;</span>&quot;</span> &amp;&gt; /tmp/ffmpeg-<span class="variable">$&#123;streamid&#125;</span>.stderr &amp;</span></span><br><span class="line"></span><br><span class="line">elif [ &quot;$fcodec&quot; = &quot;mjpeg&quot; ]; then	</span><br><span class="line"></span><br><span class="line">	_log &quot;FFMPEG   = $bin2&quot;</span><br><span class="line">	_log &quot;CODEC    = $fcodec&quot;</span><br><span class="line">	_log &quot;PARAMVS  =&quot;</span><br><span class="line">	_log_para &quot;$paramvs&quot;</span><br><span class="line"><span class="meta prompt_">	</span></span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">bin2 <span class="string">&quot;<span class="variable">$&#123;args[@]&#125;</span>&quot;</span> &amp;&gt; /tmp/ffmpeg-<span class="variable">$&#123;streamid&#125;</span>.stderr &amp;</span></span><br><span class="line"></span><br><span class="line">else</span><br><span class="line"></span><br><span class="line">	_log &quot;VCODEC   = $vcodec ($vcodecprofile)&quot;</span><br><span class="line">	_log &quot;ACODEC   = $acodec&quot;</span><br><span class="line">	_log &quot;PARAMVS  =&quot;</span><br><span class="line">	_log_para &quot;$paramvs&quot;</span><br><span class="line">	_log &quot;MODE     = WRAP&quot;</span><br><span class="line">	_log &quot;FFMPEG   = $bin1&quot;</span><br><span class="line">	_log &quot;PARAMWP  =&quot;</span><br><span class="line">	param1=$&#123;argsnew[@]&#125;</span><br><span class="line">	_log_para &quot;$param1&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">bin1 <span class="string">&quot;<span class="variable">$&#123;argsnew[@]&#125;</span>&quot;</span> &amp;&gt; /tmp/ffmpeg-<span class="variable">$&#123;streamid&#125;</span>.stderr &amp;</span></span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">childpid=$!</span><br><span class="line">_log &quot;CHILDPID = $childpid&quot;</span><br><span class="line">wait $childpid</span><br><span class="line"></span><br><span class="line">if grep &quot;Conversion failed!&quot; /tmp/ffmpeg-$&#123;streamid&#125;.stderr || grep &quot;Error opening filters!&quot; /tmp/ffmpeg-$&#123;streamid&#125;.stderr || grep &quot;Unrecognized option&quot; /tmp/ffmpeg-$&#123;streamid&#125;.stderr || grep &quot;Invalid data found when processing input&quot; /tmp/ffmpeg-$&#123;streamid&#125;.stderr; then</span><br><span class="line"></span><br><span class="line">	_log &quot;*** CHILD END ***&quot;</span><br><span class="line">	startexectime=`date +%s`</span><br><span class="line">	_log &quot;STDOUT   =&quot;</span><br><span class="line">	_log_para &quot;`tail -n 15 /tmp/ffmpeg-$&#123;streamid&#125;.stderr`&quot;</span><br><span class="line">	_log &quot;MODE     = PIPE SV&quot;</span><br><span class="line">	_log &quot;FFMPEG1  = $bin1&quot;</span><br><span class="line">	_log &quot;FFMPEG2  = $bin2&quot;</span><br><span class="line">	_log &quot;PARAM1   =&quot;</span><br><span class="line">	param1=$&#123;args1sv[@]&#125;</span><br><span class="line">	_log_para &quot;$param1&quot;</span><br><span class="line">	_log &quot;PARAM2   =&quot;</span><br><span class="line">	param2=$&#123;args2sv[@]&#125;</span><br><span class="line">	_log_para &quot;$param2&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">bin1 <span class="string">&quot;<span class="variable">$&#123;args1sv[@]&#125;</span>&quot;</span> | <span class="variable">$bin2</span> <span class="string">&quot;<span class="variable">$&#123;args2sv[@]&#125;</span>&quot;</span> &amp;&gt; /tmp/ffmpeg-<span class="variable">$&#123;streamid&#125;</span>.stderr &amp;</span></span><br><span class="line"></span><br><span class="line">	childpid=$!</span><br><span class="line">	_log &quot;CHILDPID = $childpid&quot;</span><br><span class="line">	wait $childpid</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if grep &quot;Conversion failed!&quot; /tmp/ffmpeg-$&#123;streamid&#125;.stderr || grep &quot;Error opening filters!&quot; /tmp/ffmpeg-$&#123;streamid&#125;.stderr || grep &quot;Unrecognized option&quot; /tmp/ffmpeg-$&#123;streamid&#125;.stderr || grep &quot;Invalid data found when processing input&quot; /tmp/ffmpeg-$&#123;streamid&#125;.stderr; then</span><br><span class="line"></span><br><span class="line">	_log &quot;*** CHILD END ***&quot;</span><br><span class="line">	startexectime=`date +%s`</span><br><span class="line">	_log &quot;STDOUT   =&quot;</span><br><span class="line">	_log_para &quot;`tail -n 15 /tmp/ffmpeg-$&#123;streamid&#125;.stderr`&quot;</span><br><span class="line">	_log &quot;MODE     = PIPE VS&quot;</span><br><span class="line">	_log &quot;FFMPEG1  = $bin2&quot;</span><br><span class="line">	_log &quot;FFMPEG2  = $bin1&quot;</span><br><span class="line">	_log &quot;PARAM1   =&quot;</span><br><span class="line">	param1=$&#123;args1vs[@]&#125;</span><br><span class="line">	_log_para &quot;$param1&quot;</span><br><span class="line">	_log &quot;PARAM2   =&quot;</span><br><span class="line">	param2=$&#123;args2vs[@]&#125;</span><br><span class="line">	_log_para &quot;$param2&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">bin2 <span class="string">&quot;<span class="variable">$&#123;args1vs[@]&#125;</span>&quot;</span> | <span class="variable">$bin1</span> <span class="string">&quot;<span class="variable">$&#123;args2vs[@]&#125;</span>&quot;</span> &amp;&gt; /tmp/ffmpeg-<span class="variable">$&#123;streamid&#125;</span>.stderr &amp;</span></span><br><span class="line"></span><br><span class="line">	childpid=$!</span><br><span class="line">	_log &quot;CHILDPID = $childpid&quot;</span><br><span class="line">	wait $childpid</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if grep &quot;Conversion failed!&quot; /tmp/ffmpeg-$&#123;streamid&#125;.stderr || grep &quot;Error opening filters!&quot; /tmp/ffmpeg-$&#123;streamid&#125;.stderr || grep &quot;Unrecognized option&quot; /tmp/ffmpeg-$&#123;streamid&#125;.stderr || grep &quot;Invalid data found when processing input&quot; /tmp/ffmpeg-$&#123;streamid&#125;.stderr; then</span><br><span class="line"></span><br><span class="line">	_log &quot;*** CHILD END ***&quot;</span><br><span class="line">	startexectime=`date +%s`</span><br><span class="line">	_log &quot;STDOUT   =&quot;</span><br><span class="line">	_log_para &quot;`tail -n 15 /tmp/ffmpeg-$&#123;streamid&#125;.stderr`&quot;</span><br><span class="line">	_log &quot;MODE     = ORIG&quot;</span><br><span class="line">	_log &quot;FFMPEG   = $bin2&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">bin2 <span class="string">&quot;<span class="variable">$&#123;args[@]&#125;</span>&quot;</span> &amp;&gt; /tmp/ffmpeg-<span class="variable">$&#123;streamid&#125;</span>.stderr &amp;</span></span><br><span class="line"></span><br><span class="line">	childpid=$!</span><br><span class="line">	_log &quot;CHILDPID = $childpid&quot;</span><br><span class="line">	wait $childpid</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">stopexectime=`date +%s`</span><br><span class="line">if test $((stopexectime-startexectime)) -lt 10; then</span><br><span class="line">	_log &quot;STDOUT   =&quot;</span><br><span class="line">	_log_para &quot;`tail -n 15 /tmp/ffmpeg-$&#123;streamid&#125;.stderr`&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">_log &quot;*** CHILD END ***&quot;</span><br><span class="line">_log &quot;*** PROCESS END ***&quot;</span><br><span class="line"></span><br><span class="line">rm /tmp/ffmpeg-$&#123;streamid&#125;.stderr</span><br></pre></td></tr></table></figure>

<h3 id="解决-Video-Station-无法正常搜刮问题"><a href="#解决-Video-Station-无法正常搜刮问题" class="headerlink" title="解决 Video Station 无法正常搜刮问题"></a>解决 Video Station 无法正常搜刮问题</h3><p>　　在命名符合规则的正常情况下，Video Station 的影片详情页应该是这样的：<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-videostation%E8%A7%86%E9%A2%91%E4%BF%A1%E6%81%AF.png" alt="群晖-videostation视频信息.png"><br>电影简介包括字幕等都能够正常搜索与显示，但是，最近天朝和谐了 Video Station 的搜刮器所用的几个 API 网址，因此，我们可以通过修改 hosts 解决这个问题（暂时，最好的办法还是路由器代理）：<br><a href="/post/synology-series-1.html#ssh-%E8%BF%9E%E6%8E%A5%E5%B9%B6%E8%8E%B7%E5%BE%97-root-%E6%9D%83%E9%99%90">ssh 连接并群晖获取 root 权限</a>，编辑 hosts 文件：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/hosts  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">按 i 进入编辑模式，添加如下内容：</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">搜刮</span></span><br><span class="line">104.16.61.155 image.tmdb.org</span><br><span class="line">13.35.67.86 api.themoviedb.org</span><br><span class="line">54.192.151.79 www.themoviedb.org</span><br><span class="line">13.224.157.34 api.thetvdb.com</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再按 ESC,并切换为大写，按 Z Z 保存</span></span><br></pre></td></tr></table></figure>
<p>之后，进入 Video Station 重新索引等待搜刮即可。<br>　　这里不推荐很多地方推荐的豆瓣、时光等搜刮插件，因为这些插件都是替换 Video Station 自带的默认插件，且类似豆瓣这类反爬比较严格的站点，第三方插件失效的速度可能比 hosts 更改 IP 失效的速度更块。  
　</p>
<h3 id="安卓客户端无法播放视频"><a href="#安卓客户端无法播放视频" class="headerlink" title="安卓客户端无法播放视频"></a>安卓客户端无法播放视频</h3><p>　　在公网使用 DS video APP 有出现过无法播放视频的情况，尝试在 DS video APP 的“影片设置”中勾选“通过 HTTP 连接播放视频”，可以解决。 还是无法播放则推荐安装 MX Player 播放器（见 <a href="/post/synology-series-4.html">篇一</a> 前言网盘链接）。  
　　</p>
<h3 id="视频无缩略图、无法选择清晰度"><a href="#视频无缩略图、无法选择清晰度" class="headerlink" title="视频无缩略图、无法选择清晰度"></a>视频无缩略图、无法选择清晰度</h3><p>　　这是黑群晖由于没有洗白的导致的，按照 <a href="/post/synology-series-1.html">篇一</a>指引，完成半洗白即可。  
　　</p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>　　Video Station 经过上面的完善后，由于其多平台客户端的支持，很适合在内网播放视频（如 DLNA），但是由于其功能过于简单，转码选择过少，无法选择码率等，不是很适合上行小的公网环境使用，因此，Alliot 是 Video Station 配合 Jellyfin 来管理视频库的，关于 Jellyfin 的问题，将在后面的文章讲到。  </p>
]]></content>
      <categories>
        <category>群晖入门到进阶系列</category>
      </categories>
      <tags>
        <tag>折腾</tag>
        <tag>系列</tag>
        <tag>群晖</tag>
      </tags>
  </entry>
  <entry>
    <title>群晖入门到进阶系列（完结）：基本安全加固</title>
    <url>//post/synology-series-10.html</url>
    <content><![CDATA[<p>　　“No System Is Safe” – 《who am I》，群晖作为我们相对私人的小型服务器，在安全方面当然也要做一些考虑，上一篇我们已经讲到了关于数据存储方面的安全，这篇我们来聊聊一些基本的安全加固需要考虑的事情。尽管是本文作为群晖入门到进阶系列的完结篇，但是，在 Alliot 看来，安全从来都不是针对某一个单一的点能做到有效的，所以，文中所描述的应该是针对家庭或个人应用场景的一个面，而不是针对个人 NAS 这个点。当然，Alliot 并不是专业的网络安全从业者，网安的同学请忽略本文，或是轻点拍砖，多多指教。<span id="more"></span>   </p>
<h4 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h4><p>　　从前面的 <a href="/post/synology-series-2.html">群晖入门到进阶系列（二）：DDNS与端口转发</a> 收到的反馈来看，绝大多数同学都会有从外部访问家里的 NAS 的需求，所以，路由器作为我们的第一道防线，可能是我们优先要考虑的点（当然，这里可能会有歧义，有同学会说光猫才是，但光猫（本名光调制解调器）其主要的功能在于光电信号的调制与解调，在我们将其改成桥接后，我们能对它做的事情很少）。<br>   当我们获得了公网 IP 后，我们的路由器便完完整整的暴露在了整个公网环境中，任何人都能够通过 IP 来访问到我们的路由器，Alliot 在此对其做了以下事情：  </p>
<h5 id="修改默认用户名与密码"><a href="#修改默认用户名与密码" class="headerlink" title="修改默认用户名与密码"></a>修改默认用户名与密码</h5><p>　　“弱口令，永远滴神” 。这是网安朋友常挂在口中的一句话，因为真的有很大比例的入侵是通过弱口令跑字典来达成的，它是最愚蠢，同时也是最有效的方法。所以，默认的登陆用户名与密码是一定要修改的，同时，密码也至少要做到含有大小写字母&#x2F;数字&#x2F;特殊符号&#x2F;8位以上。  </p>
<h5 id="限制后台管理页面"><a href="#限制后台管理页面" class="headerlink" title="限制后台管理页面"></a>限制后台管理页面</h5><p>　　从类似 shodan.io 等类似搜索引擎可以看到，全世界有数以万万计的网络设备毫无防备的暴露在了互联网上，许多扫描机器人就是从类似的地方拉取 IP 列表来做定向扫描。如果你的设备暴露在公网已久，恰好你的密码又是弱口令，那么，很有可能已经光荣的成为了一台肉鸡。  因此，我们需要关闭外网（公网）访问路由器后台的权限，部分路由系统还能针对配置白名单仅允许指定 MAC 地址的设备访问，这里 Alliot 使用的还是前面说到的 H 大的 padavan：<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-padavan%E9%98%B2%E7%81%AB%E5%A2%99%E9%85%8D%E7%BD%AE.png" alt="群晖-padavan防火墙配置">  </p>
<h5 id="禁用外部ICMP"><a href="#禁用外部ICMP" class="headerlink" title="禁用外部ICMP"></a>禁用外部ICMP</h5><p>　　部分扫描工具会使用ping来探测存活主机与存活主机类型（不同类型的操作系统被 ping 响应默认返回的 TTL 值是不同的，因此，大致可以通过这个来判断操作系统类型），提高扫描效率，因此，Alliot 也将路由器的外部 ICMP 关闭了（即禁止被ping）。不同的路由器系统关闭 ICMP 响应的方式不同，padavan 在上面的图中部分是有关闭“响应外部 ping 请求的”，其他的路由系统如果没有，如果有 iptables 可以新增规则：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT -p icmp --icmp-type 8 -s 0/0 -j DROP</span><br></pre></td></tr></table></figure>
<h5 id="ssh-telnet服务"><a href="#ssh-telnet服务" class="headerlink" title="ssh&#x2F;telnet服务"></a>ssh&#x2F;telnet服务</h5><p>　　首先，这两者是一定要关闭公网访问的，openwrt 系的路由系统通常都能在后台中关闭（如前面的图中，padavan 便可以），或是通过 iptables 限制。 其次，ssh 尽量使用密钥方式来验证。<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-padavan-ssh%E5%AF%86%E9%92%A5%E7%99%BB%E9%99%86.png" alt="群晖-padavan-ssh密钥登陆"><br>最后，如果不是经常使用终端去操作，尽量是用完就关掉，尤其是 telnet。  </p>
<h5 id="加密隧道"><a href="#加密隧道" class="headerlink" title="加密隧道"></a>加密隧道</h5><p>　　非必要对外服务，强烈建议打开路由器的微&#x2F;P&#x2F;恩服务器，通过加密隧道来访问。由于这些词汇都比较敏感，因此这里不做过多讨论。  </p>
<h5 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a>端口映射</h5><p>　　首先，如果不是有独立的硬件防火墙，尽量不要使用路由器的 DMZ 来暴露你的设备（家里搞个几千上万的防火墙设备的同学，应该非常少吧），在一些家用路由器中，DMZ（非军事区）并不是真正意义上的 DMZ 隔离。而通常是指一部所有端口都暴露在外部网络的内部网络主机，相当于将你的这台主机直接丢到公网中。<br>我们一些必需对外的服务，正确的做法是通过端口映射&#x2F;转发，将需要暴露的主机的某个端口映射出来，同时还要注意的是，尽量不要使用常用的端口。具体配置参考前面的<a href="/post/synology-series-2.html#%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91">群晖入门到进阶系列（二）：DDNS与端口转发</a>  </p>
<h5 id="Wi-Fi加固"><a href="#Wi-Fi加固" class="headerlink" title="Wi-Fi加固"></a>Wi-Fi加固</h5><p>　　Wi-Fi 其实是很多人容易忽视的一个点，也是一个非常安全防护非常薄弱的点。作为无线接入点，设备连接 Wi-Fi 后，便进入了内网，如果不做隔离限制，内网中的所有设备均能被访问到，同时由于内网的加固通常较外网弱，一旦恶意设备接入，那它能够做到的事情就太多了（当然，攻击者可能并不是你的邻居，而可能是攻击你邻居的设备的攻击者）。<br>所以，Alliot 做了这些事：<br><strong>使用较强密码：</strong> “弱密码，永远的神！”…..<br><strong>划分访客网络与家庭网络：</strong><br>　　毕竟有朋友来做客的时候问你家 Wi-Fi 密码总不能不给对吧。划分访客网络与家庭网络，隔离访客网络和内网，并开启 AP 客户端隔离，这样，访客网络内的客户端便不能互相访问，也不能访问你的内网设备，同时还能方便的限速等。现在大部分的路由器都能够划分访客网络与家庭网络了：<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-%E8%B7%AF%E7%94%B1%E5%99%A8%E8%AE%BF%E5%AE%A2Wi-Fi%E9%85%8D%E7%BD%AE.png" alt="群晖-路由器访客Wi-Fi配置"><br><strong>Wi-Fi关闭广播，隐藏SSID</strong> Wi-Fi 关闭 SSID 广播之后，首次连接的设备，只有手动输入 Wi-Fi 名称与密码才能够连接到Wi-Fi，否则你的Wi-Fi是无法被搜索到的，即使知道了你家密码也没用。这样就再也不怕大妈大爷手机上的万能钥匙将你家Wi-Fi密码分享出去了。<br><strong>家庭Wi-Fi开启MAC白名单访问控制模式</strong> 这样别人即使知道了你家 Wi-Fi 名称与密码，也连接不上。<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-padavan-MAC%E7%99%BD%E5%90%8D%E5%8D%95.png" alt="群晖-padavan-MAC白名单"></p>
<h5 id="定期重启路由器"><a href="#定期重启路由器" class="headerlink" title="定期重启路由器"></a>定期重启路由器</h5><p>　　定期重启不仅能够释放运行过程中产生的内存碎片，释放资源，同时，重启后路由器会重新拨号，分配新的公网IP，还能够达到规避一些网络风险的目的。（试想一下，当你在试图对一个指定IP的服务做扫描，尝试密码，你马上快跑完你的密码字典的时候，它突然换了IP消失不见了，那你再去确认它的IP，继续尝试密码会不会加大你尝试出正确密码的难度）</p>
<h4 id="群晖"><a href="#群晖" class="headerlink" title="群晖"></a>群晖</h4><p>　　群晖本身其实对安全还是很重视的，群晖的系统工程师们对 DSM 在系统层面的安全加固其实做的很好了，白群晖能够定期升级系统当然是最好的，作为黑群晖用户，我们能做的其实不多，在遵守前面说到的路由的安全加固的情况下，我们需要关注的点主要集中在如下几点：  </p>
<ul>
<li>对外提供服务的务必使用 HTTPS  </li>
<li>修改高危服务端口  </li>
<li>第三方服务通过容器来部署  </li>
<li>禁用无用的服务，局域网文件共享尽量不使用 smb，使用 SFTP 或 Webdev 等代替  </li>
<li>开启动态口令二次验证  </li>
<li>用户权限，目录权限规范  </li>
<li>开启操作系统防火墙，配置相关防火墙策略，IP 封锁策略，开启安全事件提醒</li>
</ul>
<h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>　　群晖这个系列算是拖了太久交了流水账一般的作业，有些东西写太多就显得太繁琐了，因此后面的几篇都是写的比较简略，省去了许多随便就能搜到的步骤。<br>　　最后列一下 Alliot 后面升级的装备吧：  </p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">机箱： <span class="number">6</span> 盘位 <span class="keyword">itx</span> 热插拔机箱，来自“星团科技”矿机  </span><br><span class="line">主板： 豆希工控 b365 <span class="keyword">itx</span></span><br><span class="line">电源： 益横 <span class="number">7030</span>b  <span class="number">300</span>W </span><br><span class="line"><span class="symbol">CPU:</span>  Intel G4600</span><br><span class="line">内存： 酷兽 <span class="number">16</span>G DDR4  </span><br><span class="line"><span class="symbol">UPS:</span>  APC <span class="keyword">BR</span> <span class="number">550</span>g <span class="meta">CN</span>  在线互动式</span><br></pre></td></tr></table></figure>
<p>　　大概说一下，这款机箱和蜗牛 C 款设计很像，不过，背板是满血背板，做工还是很到位的。之前捡漏 200 包邮到手。<br>　　电源如果不是其他特殊要求的话，建议直接买全新的 益横7030b，单路供电，不用担心负载问题。<br>　　CPU 本来是想上 i3 8100 但是奈何被炒的太高，G4600 核显是 HD630 对比 i3 8100 的 UHD630 差一点，不过基本够用。CPU 现在价格不同了，可以上 i5 8 代了，价格也还合适。<br>　　说说主板，其实就是他们说的蜗牛 D 款变种版，这款工控主板 itx 尺寸，带了 6 个 SATA 口，2 个千兆网口，1 个 m.2 接口，可以说非常适合我这套方案了。当时是捡漏 300+ 到手的，成色与做工都还算可以。<br>　　内存略过。<br>　　UPS 还是很推荐买一个的，确实省心不少。Alliot 这台 br 550 是找的二手的机头（即不带电池的），到手自己买蓄电池更换的，成本不到 300。不推荐网红款的 BK650，性价比较低，而且为后备式（相较于在线与在线互动式，后备式的切换时间更长，当然也更省电），最主要的是占地大，而且丑。。。<br>下面是晒图：<br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-%E7%9B%8A%E6%A8%AA7030b.jpg" alt="群晖-益横7030b"><br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-%E8%B1%86%E5%B8%8Cb365.jpg" alt="群晖-豆希b365"><br><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-%E5%A4%A7%E8%9C%97%E7%89%9B.jpg" alt="群晖-大蜗牛">  </p>
<h4 id="附"><a href="#附" class="headerlink" title="附"></a>附</h4><p><img data-src="https://static.iots.vip/%E7%BE%A4%E6%99%96-%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE.png" alt="群晖-安全加固思维导图"></p>
]]></content>
      <categories>
        <category>群晖入门到进阶系列</category>
      </categories>
      <tags>
        <tag>折腾</tag>
        <tag>系列</tag>
        <tag>群晖</tag>
      </tags>
  </entry>
  <entry>
    <title>解决VMware workstation 14 Pro黑屏的问题</title>
    <url>//post/solve-vmware14pro-error.html</url>
    <content><![CDATA[<p>　　今天开机日常启动VMware发现自己的虚拟机不显示了，一直处于黑屏状态，以为是死机了，但是重启与回滚快照也没用，其他几个虚拟机也一样。找了一下网上原来是VMware Workstation 14 Pro的通病。试了好几个方法后终于解决，这里记录以备用。<span id="more"></span><br><del>由于具体原因不明，以下方法需要按顺序操作一下直到问题解决。</del><br>主要原因是14版本之后注册了两个LSP协议（vSockets DGRAM、vSockets STREAM）导致异常。</p>
<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>保存快照并关闭虚拟机电源，右键虚拟机-管理-更改硬件兼容性，将其改为workstation 12保存即可。打开虚拟机验证黑屏是否解决，未解决请执行第二步。  </p>
<h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>关闭并退出VMware，打开cmd(开始-运行-输出cmd)，输入:  </p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">netsh winsock reset  </span><br></pre></td></tr></table></figure>
<p>重启计算机<br>问题解决。  </p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这个方法是知乎上看到的，大概是因为我装了某UU网游加速器吧(一脸黑线。。。)  </p>
<blockquote>
<p>虚拟机和主机之间的通信，基本上是以 socket 的方式进行通信的（这里的 socket 泛指一切 socket，包括本地的、网络的等等）某个程序通过 LSP 给系统的 TCP&#x2F;IP stack 注入了自己的 DLL，如果程序退出时，没有把这个 DLL 收回来，或者回收失败、没有彻底回收等，那么这个 DLL 残留的东西影响了整个 TCP&#x2F;IP stack，而且是永久性的。每个 socket 收发的数据包是要经过 TCP&#x2F;IP stack 的，这个 DLL 可能会对这些 socket 的数据包做了些什么操作（比如修改数据、直接丢弃等等），然后所以你的虚拟机就黑屏了……netsh winsock reset这条命令会重置，所以那些被注入的 DLL 就被清理掉了，所以一切都是最初的模样了……<br>作者：邱星翔<br>链接：<a href="https://www.zhihu.com/question/66422773/answer/257812909">https://www.zhihu.com/question/66422773/answer/257812909</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>VMware</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Nginx下无法使用中文URL的问题</title>
    <url>//post/nginx-chinese-url.html</url>
    <content><![CDATA[<p>　　博客换为hexo后，发现许多文章页出现404的情况，找了一下原因，发现是由于URL含有中文而Nginx默认不支持中文URL导致的。此文记录了解决方法。<span id="more"></span><br>　　在Apache中，要实现对中文的支持需要单独加载中文模块，而Nginx是支持多种编码不需要安装其他组件的，只是默认是走UTF-8的支持路线。这里提供两种方法实现Nginx对中文URL的支持。  </p>
<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>利用convmv对文件名转码  </p>
<blockquote>
<p>此方法治标不治本，仅供紧急时候使用（访问量大时间段，无法对服务器进行重启操作的时候）。  </p>
</blockquote>
<p>这里以CentOS为例，其他系统同理。  </p>
<h3 id="安装convmv"><a href="#安装convmv" class="headerlink" title="安装convmv"></a>安装convmv</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install convmv</span><br></pre></td></tr></table></figure>
<h3 id="转码"><a href="#转码" class="headerlink" title="转码"></a>转码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">convmv -fGBK -tUTF8 -r --notest target</span><br></pre></td></tr></table></figure>
<p>其中-f是源编码，-t是目标编码，-r是递归处理目录，–notest是不移动，实际上对文件进行改名，target是目标目录。  </p>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>更改Nginx站点配置文件，修改编码为UTF-8。  </p>
<h3 id="系统区域语言设置"><a href="#系统区域语言设置" class="headerlink" title="系统区域语言设置"></a>系统区域语言设置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vi /etc/sysconfig/i18n</span></span><br></pre></td></tr></table></figure>
<p>加入  </p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">LANG</span><span class="operator">=</span><span class="string">&quot;en_US.UTF-8&quot;</span></span><br><span class="line"><span class="attribute">SYSFONT</span><span class="operator">=</span><span class="string">&quot;latarcyrheb-sun16&quot;</span></span><br></pre></td></tr></table></figure>
<p>并重启系统（如果没有此文件则创建）  </p>
<h3 id="更改Nginx设置"><a href="#更改Nginx设置" class="headerlink" title="更改Nginx设置"></a>更改Nginx设置</h3><p>编辑站点的Nginx配置文件，在sever中添加  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">charset utf-8;</span><br></pre></td></tr></table></figure>
<p>如：  </p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">listen <span class="number">80</span><span class="comment">;</span></span><br><span class="line">servername www.iots.vip<span class="comment">;</span></span><br><span class="line">root /www<span class="comment">;</span></span><br><span class="line">index index.html index.jsp<span class="comment">;</span></span><br><span class="line">charset utf-<span class="number">8</span><span class="comment">;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>同时需要将FTP与shell工具的字符集设置为UTF-8。</p>
]]></content>
      <tags>
        <tag>Nginx</tag>
        <tag>CentOS</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>解决/var/run/yum.pid 已被锁定,PID 为 xxxx 的另一个程序正在运行</title>
    <url>//post/linux-pid.html</url>
    <content><![CDATA[<p>刚才打开虚拟机  使用yum update 出现&#x2F;var&#x2F;run&#x2F;yum.pid 已被锁定,PID 为 xxxx 的另一个程序正在运行错误。 <span id="more"></span><br><img data-src="https://static.iots.vip/2016/11/201611077923_4064.jpg"><br>找了点资料。解决方法如下：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -f /var/run/yum.pid</span><br></pre></td></tr></table></figure>
<p>  直接删除就是。然后重新</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum update </span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>解决eclipse安卓工程“The import org.apache.http.client cannot be resolved”等报错</title>
    <url>//post/java-1.html</url>
    <content><![CDATA[<p>  最近在玩gokit，导入一个官方的框架后，狂报错，经确认，工程本身没毛病。某度上大都是说安装Tomcat服务器，试过了，无效。后来在一位朋友的帮助下，找到了解决方法<span id="more"></span>  </p>
<h2 id="报错如下"><a href="#报错如下" class="headerlink" title="报错如下"></a>报错如下</h2><p><img data-src="https://static.iots.vip/java%E5%8E%9F%E5%B7%A5%E7%A8%8B%E5%AF%BC%E5%85%A5%E5%90%8E%E6%8A%A5%E9%94%99.jpg" alt="报错截图"> </p>
<h2 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h2><p>下载httpclient与httpcore的JAR包（链接：<a href="http://pan.baidu.com/s/1skMOVJf">http://pan.baidu.com/s/1skMOVJf</a> 密码：eoo6）  </p>
<h3 id="打开built-path菜单"><a href="#打开built-path菜单" class="headerlink" title="打开built path菜单"></a>打开built path菜单</h3><p>如图，右键工程。<br><img data-src="https://static.iots.vip/%E8%A7%A3%E5%86%B3%E6%AD%A5%E9%AA%A41.jpg">  </p>
<h3 id="导入JAR包"><a href="#导入JAR包" class="headerlink" title="导入JAR包"></a>导入JAR包</h3><p>点击Libraries，选择Add External JARs<br><img data-src="https://static.iots.vip/%E6%AD%A5%E9%AA%A42.jpg"><br><img data-src="https://static.iots.vip/%E6%AD%A5%E9%AA%A43.jpg"><br>选择之前下载的JAR包即可。<br><img data-src="https://static.iots.vip/%E6%AD%A5%E9%AA%A44.jpg"></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Navitat for MySQL不能远程连接数据库的方法</title>
    <url>//post/navicat-mysql-1.html</url>
    <content><![CDATA[<p>navicat是一个非常不错的数据库操作工具，但是在远程连接服务器的MySQL数据库的时候，会出现连接拒绝的情况。<br>ERROR 1130：主机ip  is not allowed to connect this mysql<br>找了很多方法比如修改准入ip、关防火墙 都不行。终于，找到这个方法——利用HTTP通道连接。<span id="more"></span></p>
<h2 id="http通道连接"><a href="#http通道连接" class="headerlink" title="http通道连接:"></a>http通道连接:</h2><p>1、 打开新建连接，在主机名IP地址那里填写localhost  </p>
<ul>
<li>用户名与密码一栏则填写你所在的数据库用户名与密码。 </li>
<li>这时候还不能连接，需要通过Http通道的形式进行数据库连接。<br><img data-src="https://static.iots.vip/2016/09/201609182791_3001.png" alt="新建连接"><br>2、 点击连接属性标签栏中的Http，勾选使用Http通道后，在通道地址一栏输入你的网址与database.php文件地址。<br>如： <a href="http://www.mydomain.com/database.php">http://www.mydomain.com/database.php</a></li>
</ul>
<p><img data-src="https://static.iots.vip/2016/09/201609185366_7624.png" alt="新建链接">  </p>
<blockquote>
</blockquote>
<p>这个database.php文件在点击确定保存了连接信息后，会于NaviCat的文件根目录下自动生成一个php文件，名字为ntunnel_mysql.php文件，直接重命名并上传就OK了。  </p>
<hr>
<h2 id="2016年11月2日更新："><a href="#2016年11月2日更新：" class="headerlink" title="2016年11月2日更新："></a>2016年11月2日更新：</h2><p>昨晚逛老左博客的时候，看到一篇关于Navicat报错解决方法，在此补充记录一下:<br>1、 报错 ：2003 - Can’t connect to MySQL server on “IP地址”(10038)<br>这个问题应该是我们防火墙没有设置3306权限:  </p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">/sbin/iptables -I INPUT -p tcp --dport <span class="number">3306</span> -j ACCEPT</span><br><span class="line">```  </span><br><span class="line">```  </span><br><span class="line">/etc/init.d/iptables save  </span><br></pre></td></tr></table></figure>
<p>  设置3306权限并保存，这个问题可以解决。  </p>
<p>2、 报错 ：1130 - Host “IP地址” is not allowed to connect to this MySQL server<br>这个错误链接问题是告诉我们本地的IP地址无权限链接数据库：  </p>
<pre><code>mysql -u root -p  
</code></pre>
<pre><code>grant all privileges on *.* to &#39;root&#39;@&#39;%&#39; identified by &#39;数据库密码&#39; with grant option;
</code></pre>
<p>ps:此报错之前的方法也可解决。</p>
]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>解压.tar.xz格式的文件</title>
    <url>//post/linux-uzip-tarxz.html</url>
    <content><![CDATA[<p>xz这个压缩很多人陌生，xz是绝大数linux默认就带的一个压缩工具，xz格式比7z还要小。<br>今天在下载Node.js源码包的时候遇到的这种压缩格式。查了一下资料，这里进行一下记录。  <span id="more"></span>  </p>
<h2 id="创建xz压缩文件"><a href="#创建xz压缩文件" class="headerlink" title="创建xz压缩文件"></a>创建xz压缩文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xz -z 待压缩文件名</span><br></pre></td></tr></table></figure>
<p>-k 保留原文件；<br>-0至-9调节压缩率。如果不设置，默认压缩等级是6；  </p>
<h2 id="解压xz压缩文件"><a href="#解压xz压缩文件" class="headerlink" title="解压xz压缩文件"></a>解压xz压缩文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xz -d 待解压文件</span><br></pre></td></tr></table></figure>
<p>-k 保留原文件；<br>这样解压出来的文件是tar格式的打包文件，需要执行：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xvf 待解包文件名</span><br></pre></td></tr></table></figure>
<p>需要注意的是，tar命令中没有直接解压xz压缩格式的参数（比如-f解压bzip2、 -z解压gzip）<br>实际上tar.xz格式的压缩包是经历了tar打包文件夹后，进行xz压缩（-f -z是因为tar默认支持bzip2、gzip格式的文件在打包的同时进行压缩）。  </p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>谈谈对于恋爱应有的心态与思考</title>
    <url>//post/mind/love-mentality.html</url>
    <content><![CDATA[<p>　　谈谈对于恋爱前、恋爱中的应有心态与思考。<span id="more"></span></p>
<h2 id="恋爱前"><a href="#恋爱前" class="headerlink" title="恋爱前"></a>恋爱前</h2><h3 id="爱人先爱自己"><a href="#爱人先爱自己" class="headerlink" title="爱人先爱自己"></a>爱人先爱自己</h3><p>  　　人永远要自己先把自己放在第一位。先把自己打理好了，再想怎么去喜欢别人怎么去爱别人。生活也好，情绪也好，没有人会愿意去理会别人的破事。准备谈恋爱之前，先问问自己，are you ready?如果答案是no，那么请把心思放在怎样去改变自己的状态上面，不要试图通过恋爱来改善自己目前糟糕的状态，你没这个权利，别人也没这个义务。电影里的那种在你世界一片黑暗的时候突然出现的光，现实中是不存在的，Who the fuck cares about you??  爱情是一味催化剂，它能让好的更好，也会让坏的更坏。   </p>
<h3 id="不要在将就的心态下盲目开始"><a href="#不要在将就的心态下盲目开始" class="headerlink" title="不要在将就的心态下盲目开始"></a>不要在将就的心态下盲目开始</h3><p> 　　将就的心态，会让双方的格局不对等。因为一段感情中，一旦出现你高Ta低，你低Ta高的情况，就会让整个过程很累，沟通成了谈判，这也是我对于如今你追我我追你的这种风气深恶痛绝的原因。所以，请在内心充分认可对方后再开始，这是于己于人的基本责任。  </p>
<h3 id="不要过分使用心理学"><a href="#不要过分使用心理学" class="headerlink" title="不要过分使用心理学"></a>不要过分使用心理学</h3><p>  如今网络上充斥着各种泡学、把妹撩汉学，我在蹲坑的时候也看过很多，它们并不是错的，相反，它们对人的那些小心思把握的很好，能够教会你充分利用那些小细节小技巧去把对方吃的死死的，但你要知道，这靠技巧得来的很难长久，除非你能一直使用这些技巧，不露馅，不觉得累。 </p>
<h3 id="正确理解三观"><a href="#正确理解三观" class="headerlink" title="正确理解三观"></a>正确理解三观</h3><p>　　有个人给我说没有太多共同的爱好，圈子也没有太多交集之类的就是三观不合了，我很不赞同这种说法，因为这根本就算不上问题，爱好是可以培养的，比如我以前不爱看电影，看也只是局限于科幻、武打、英雄主题类的爆米花电影，几乎没有碰过文艺片、生活片，但我单在去年一年就看了两百多部电影，其中绝大部分是文艺片，差不多每一部都会写点小感触做一些记录，不再是当初的那种刻意，已成为了自然，能主动去思考。平行状态下的圈子是可以融合的，阶级才难，但是俩人能相遇，泰坦尼克号那样的阶级跨越，估计很少有。所以，爱好、圈子都不是三观所在点。<br>  　　什么是三观不合呢？<a href="https://www.zhihu.com/question/28547364/answer/200411005">知乎-微木填沧海
</a>这位朋友说到了点子上：  </p>
<blockquote>
<p>你喜欢看书，他喜欢玩游戏。这不叫三观不合。你喜欢看书，他说看书有什么用，不就是装文艺嘛。这才是三观不合。<br> 你喜欢去西餐厅吃牛排，他喜欢在大排档撸串。这不叫三观不合。 但是他说那玩意死贵，还不好吃，说你真是做作。这就是三观不合。<br> 其实三观一致，并不是要求你们完全一样，而是彼此之间能够求同存异，懂得包容和欣赏。 否则，你跟他分享快乐，他觉得你在显摆；你跟他倾诉难过，他觉得你是矫情。  </p>
</blockquote>
<h2 id="恋爱中"><a href="#恋爱中" class="headerlink" title="恋爱中"></a>恋爱中</h2><h3 id="常有真正的沟通"><a href="#常有真正的沟通" class="headerlink" title="常有真正的沟通"></a>常有真正的沟通</h3><p>　　谁都知道爱情需要用心经营，可很少有知道怎样去经营。其实，沟通会告诉你。 沟通是两个人的事情，一方的滔滔不绝不是沟通，是倾诉、是发牢骚。真正的沟通，是两人在心态平和情况下，本着解决问题的出发点做的交流。人非圣贤孰能无过，两人在相处过程中不可能会对对方完全满意，都会有看不顺眼的地方，这些点就跟种子一样，埋在心里就会慢慢生根发芽，只有剔除掉，拿出来晒干了，才不会吸走心里的养分。在沟通中，把这些点不加修饰不加评论的列出来，该改正的改正，该解释的解释。<br>　　沟通能让双方知道对方真正想要的，在一起后不再单单是暧昧期间的那种你侬我侬了，俩人对爱情的需求点肯定会有些不同，通过沟通知道对方的需求点，不要把心思力气放错了方向。 </p>
<h3 id="“爱情三角理论”作指导"><a href="#“爱情三角理论”作指导" class="headerlink" title="“爱情三角理论”作指导"></a>“爱情三角理论”作指导</h3><p>　　这个东西还是未来的心理学博导王洁同志科普我才知道的，感谢。细细一想，这个三角理论确实是在大方向上将爱情概括了： </p>
<blockquote>
<p> 美国心理学家斯腾伯格提出的爱情理论，认为爱情由三个基本成分组成：激情、亲密和承诺。激情是爱情中的性欲成分，是情绪上的着迷；亲密是指在爱情关系中能够引起的温暖体验；承诺指维持关系的决定期许或担保。这三种成分构成了喜欢式爱情、迷恋式爱情、空洞式爱情、浪漫式爱情、伴侣式爱情、愚蠢式爱情、完美式爱情等七种类型。  <a href="https://baike.baidu.com/item/%E7%88%B1%E6%83%85%E4%B8%89%E8%A7%92%E7%90%86%E8%AE%BA">百度百科-爱情三角理论</a> </p>
</blockquote>
<p>完美的爱情需要同时具备激情、亲密和承诺三个因素。花时间去想想目前双方的爱情中在哪个方面有欠缺，查漏补缺。  </p>
<h3 id="尊重普遍差异"><a href="#尊重普遍差异" class="headerlink" title="尊重普遍差异"></a>尊重普遍差异</h3><p>　　以前我不信什么男人来自火星，女人来自金星这样的说法，后来才发现男人女人的思考方式确实是天差地别的。不能所有，但可以说是普遍。普遍来说，比如，男人有事情的时候喜欢沉默喜欢独处思考，直到找出解决方法，才能走出来，女人则需要倾诉，需要对方的倾听、认同；男人在亲密关系里通过给予来获得成就感获得满足，女人则需要关心、体贴照顾以获得安全感；男人喜欢那种被需要的感觉，女人喜欢那种被珍爱的感觉。<br>　　豆瓣中《男人来自火星 女人来自金星》一书中有一篇评论对这种思维的分析以及提出的解决方案讲的很好： 来自豆瓣@<a href="https://www.douban.com/people/yourongshunshi/">atman</a>  </p>
<blockquote>
<p>男人需要信任，女人需要关心 </p>
</blockquote>
<ul>
<li>女人为说而说，不是为了找到“解决”办法，是为了得到理解，同情和支持；男人的说往往有明确的目的，是为了“解决”问题 </li>
<li>面对压力，男人往往选择进入“洞穴”，以沉默和独处来反省和思考；女人往往选择通过倾诉而释放压力 </li>
<li>对待女人的倾诉，男人要学会倾听和理解专注倾听的重要，切忌“解决”问题的心态，要把注意力放在她的感受上，不要急于提出建议和解决办法， 更不要急于辩解和驳斥；而女人要懂得感谢他的倾听和鼓励，尽量说明不是在抱怨他，不是他的错 </li>
<li>小小改变；男人依然可以选择进入“洞穴”，但要说明要“回来”的；女人依然可以选择倾诉，但要懂得感谢和说明不是他的错 </li>
<li>女人有权利生气和发火，那样可以让她感觉好的多，而这正是男人的愿望和责任；男人意识到女人有这样倾诉的需要，就不至于对她的抱怨耿耿于怀 </li>
<li>设置底线<br>男人／女人模式：</li>
</ul>
<ol>
<li>因为男人的某种言行，女人感到心情不快 </li>
<li>男人忙不迭的解释，提醒女人不该生气或发火 </li>
<li>女人觉得，男人不认同她的感受，这让她更加恼火。这时候，女人生气的原因，已不再是男人的言行本身，而是男人对她不认同的态度。 </li>
<li>男人觉得，女人听不进他的话，所以他非常生气，乃至火冒三丈。男人责怪对方不该生气。在和解之前，他指望女人向他道歉。 </li>
<li>女人主动表示歉意， 却心有不甘。有时候，她会压不住火气，结果，两个人的争吵迅速升级。<br>男人成为导火索：</li>
</ol>
<ul>
<li>“你不该为这件事烦恼！” </li>
<li>“这有什么大不了的？你用不着烦恼，我告诉你怎么做！” </li>
<li>说到底，女人不高兴，男人就极力为自己开脱，以便“逃脱干系”。他调动全部才智，证明女人的难过，不满，愤怒没有依据。 </li>
<li>而男人的振振有词，只能让女人深刻地体会到：男人根本不关心她的感受。男人关心的，只是如何尽早摆脱责任！<br>因此，男人不该急于为自己辩解，而应带着足够的理解心，倾听女人的诉说。男人要明白，女人有生气和抱怨的权利，而自己有尊重她生气的义务。“对不起，你心情不好，是因为我的错”，将使女人感到欣慰和满足，感受到理解和支持。</li>
</ul>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>一千个观众眼中有一千个哈姆雷特，一千个人对于爱情的理解也有一千种，试图自己去总结所经历的，但是发现前人的总结很好了，摘录了大段我所认同的，仁者见仁智者见智，就此置笔吧。</p>
]]></content>
      <tags>
        <tag>心思随笔</tag>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>【转载】解决360网站安全检测的robots.txt漏洞</title>
    <url>//post/360robots-txt.html</url>
    <content><![CDATA[<p>Robots协议（也称为爬虫协议、机器人协议等）的全称是“网络爬虫排除标准”（Robots Exclusion Protocol），网站通过Robots协议告诉搜索引擎哪些页面可以抓取，哪些页面不能抓取。robots.txt的存在对SEO有一定的好处。<br>而360网站安全检测却提示“robots.txt文件有可能泄露系统中的敏感信息，如后台地址或者不愿意对外公开的地址等，恶意攻击者有可能利用这些信息实施进一步的攻击。” <span id="more"></span><br>转自@<a href="https://zhangge.net/5105.html">张戈博客</a><br>将robots只对搜索引擎开放，而其他访问均返回403就能够解决了，于是在nginx.conf中添加：  </p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">#若没有在UA中匹配到蜘蛛关键词(百度robots诊断为python检测，一并加上)，那么设置 deny_robots变量为yes</span></span><br><span class="line"><span class="attribute">if</span> (<span class="variable">$http_user_agent</span> !<span class="regexp">~* &quot;spider|bot|Python-urllib|pycurl&quot;)</span> &#123;</span><br><span class="line">    <span class="attribute">set</span> <span class="variable">$deny_robots</span> <span class="string">&#x27;yes&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#如果请求的是robots.txt，并且匹配到了蜘蛛，则返回403</span></span><br><span class="line"><span class="section">location</span> = /robots.txt &#123; </span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$deny_robots</span> = <span class="string">&#x27;yes&#x27;</span>) &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>
<p>就行了。<br>先去站长平台看看robots.txt能不能抓取：<br><img data-src="https://static.iots.vip/2016/10/201610294945_105.png" alt="检测抓取"><br>再访问一下&#x2F;robots.txt：<br><img data-src="https://static.iots.vip/2016/10/201610293853_2546.png" alt="访问robots"><br>最后再去360检测一下<br><img data-src="https://static.iots.vip/2016/10/201610295562_8062.png" alt="360网站安全检测"></p>
]]></content>
      <tags>
        <tag>Nginx</tag>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>【转载】Linux下任意精度的计算器—bc</title>
    <url>//post/bc-calculator.html</url>
    <content><![CDATA[<p>　　最近啃组成原理的时候发现Windows下的计算器进行进制转换的时候居然不能用小数点，于是想到了这个神器:bc 本文自网上的文章进行整理记录，仅摘录部分自己要用到的功能，备用，详细用法请于原文查看。<span id="more"></span><br>以下内容来自@<a href="http://www.runoob.com/linux/linux-comm-bc.html">菜鸟教程</a>与@<a href="https://www.cnblogs.com/lovevivi/p/4359296.html">vanishfan</a>，仅摘录部分自己要用到的功能备用，详细用法请于原文查看，侵删。  </p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>　　bc是一个较为完整，提供了完备的类似C的编程语法的计算器，可以在交互式界面、文本或管道的方式方便的进行一些逻辑运算。支持多进制转换，任意精度调整，打印控制，函数支持，逻辑控制等。  </p>
<h2 id="交互模式"><a href="#交互模式" class="headerlink" title="交互模式"></a>交互模式</h2><h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><p>　　shell下输入bc进入交互模式，默认输入输出进制均为10进制，数字有2个属性 长度(length)和小数点后精度(scale), length值数字有效数字的长度，scale是值小数点后的长度。<br>　　关于数字，当使用十六进制时，英文ABCDEF必须大写，大于16进制的则都用XX的十进制数字代表一位，如C&#x3D;12  </p>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>　　计算表达式的时候可以用变量，变量名为小写字母开头后面可以跟_,1,a。<br>变量分两种:<br>普通变量: a&#x3D;4;a   返回4<br>数组变量: a[1]&#x3D;1;a[3]&#x3D;3;a[1];a[2];a[3]  返回1 0 3<br>另外有4个特殊的变量，他们有着特殊的意义，不能当做普通变量用，如下:  </p>
<ul>
<li>scale&#x3D;10; 设置之后的scale为10，默认为0（即整数除法会返回整数）  </li>
<li>obase&#x3D;16;ibase&#x3D;16; 设置输入和输出都为16进制，默认值为10  (注意：为10时可不设置ibase obase的值，obase要尽量放在ibase前，因为ibase设置后，后面的数字都是以ibase的进制来换算的)  </li>
<li>last，是指上一次返回出来的数字</li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>迎来船新版本的Hexo+NexT</title>
    <url>//post/new-hexo-workflow.html</url>
    <content><![CDATA[<p>　　自从 2017 年使用 Hexo+NexT 作为博客框架以来，已经过去好几个年头。就如前面那篇<a href="/post/hexo-artalk-comment.html">hexo使用Artalk评论系统</a> 博客所言，由于 Alliot 之前对 NexT 主题与部分插件做了许多侵入式的魔改，基本没有对其做过日常的版本升级维护，因此，已经没有平滑升级的可能性。在一次插件失效的契机下，终于下定决心推倒重建。 本文记录了这一次重建的过程以及在维护模式上相比旧版本的改进。<span id="more"></span>  </p>
<h3 id="旧版本"><a href="#旧版本" class="headerlink" title="旧版本"></a>旧版本</h3><p>　　使用到的主要组件版本如下：  </p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nodejs</span>: <span class="number">6</span>.<span class="number">9</span>.<span class="number">4</span></span><br><span class="line"><span class="attribute">hexo</span>: <span class="number">3</span>.<span class="number">2</span>.<span class="number">2</span></span><br><span class="line"><span class="attribute">hexo</span>-theme-next: <span class="number">5</span>.<span class="number">1</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure>
<h4 id="日常维护"><a href="#日常维护" class="headerlink" title="日常维护"></a>日常维护</h4><p>　　使用 <code>NPM</code> 作为包管理工具， 主题为文件形式置于 hexo 的 <code>theme</code> 目录下， 主题配置与主题资源文件同级。<br>　　代码仓库在 Github 与 Coding 同时托管， 提交时双写。<br>　　各组件几乎是装好就没有做过维护更新， 一堆的 deprecated 包。（PS: 符合许多公司老旧项目的现状） </p>
<h4 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h4><p>　　使用 Coding 托管的 Jenkins， 通过编写 Jenkinsfile， 实现在云端构建后发布静态文件到自己的 Web 服务器， pipeline 可见： <a href="/post/hexo-coding-ci-scp-server.html">hexo使用CODING CI部署静态文件到服务器</a>。   </p>
<h4 id="痛点"><a href="#痛点" class="headerlink" title="痛点"></a>痛点</h4><p>　　正如前文所说， 我无法非常便捷的面对各种依赖更新， 长期以往，整个项目将变得非常难维护， 这不符合我写作的初衷。  </p>
<h3 id="新版本"><a href="#新版本" class="headerlink" title="新版本"></a>新版本</h3><p>　　所有组件均使用当下的最新版本， 代码仓库托管在 Github， 镜像到 Coding，仅在 Github 提交。 </p>
<h4 id="主题管理"><a href="#主题管理" class="headerlink" title="主题管理"></a>主题管理</h4><p>　　使用 <code>PNPM</code> 作为包管理工具， Next 主题以 <code>NPM</code> 包的形式安装在 hexo 中。 这样的好处是我们可以像管理 <code>NPM</code> 包一样来管理主题的版本。<br>　　新版本的主题配置文件在 hexo 根目录下， 不再置于主题文件同级。<br>　　同时，我们对主题的自定义修改也通过<a href="https://hexo.io/zh-cn/docs/data-files">Data Files</a> 与<a href="https://hexo.io/zh-cn/api/injector">Injector</a>特性，以非侵入式的形式来完成。<br>这里可以参考 Next 主题的官方文档: <a href="https://theme-next.js.org/docs/advanced-settings/custom-files">Custom Files</a>以及<a href="%5BInjects%5D(https://theme-next.js.org/docs/advanced-settings/injects)">Injects</a></p>
<h4 id="nodejs版本管理"><a href="#nodejs版本管理" class="headerlink" title="nodejs版本管理"></a>nodejs版本管理</h4><p>　　类似 <a href="/post/asdf-multi-version-terraform.html">asdf管理多版本Terraform</a>，这里同样使用 <a href="https://github.com/asdf-vm/asdf">asdf-vm</a> 来管理 nodejs 的版本， 可以参考 <a href="https://github.com/asdf-vm/asdf-nodejs">asdf-nodejs</a>。 </p>
<h4 id="组件日常维护"><a href="#组件日常维护" class="headerlink" title="组件日常维护"></a>组件日常维护</h4><p>　　Renovate 是一个专注于解决依赖问题的库，自动化的依赖项更新，支持多平台和多语言。<br>　　目前在 Github 上以 Github Apps 的形式，可以为接入此 Apps 的项目提供依赖更新监控相关的服务。<br>我们可以通过在 Github 仓库中启用 <a href="https://www.mend.io/renovate/">RenovateBot</a> 机器人来自动管理依赖更新。   </p>
<h4 id="持续集成-1"><a href="#持续集成-1" class="headerlink" title="持续集成"></a>持续集成</h4><p>　　使用 Github Actions 来实现， 基本流程与旧的 pipeline 区别不大。<br>　　不过由于 Alliot 的 Web 服务器在国内， Github Actions 的 Runner 在传输制品时因为网络原因导致传输速率十分慢（Github 的免费 Runner 均在海外）， 偶然的发现 Coding 制品库居然连通性还不错，因此 Github Actions 的发布流程改为了先传输到 Coding 的制品库，再远程 Web 服务器从制品库拉取， 这样就将发布时间降低到了秒级。<br>　　此外，这次还在 Github Actions 加入了 CDN 缓存刷新的逻辑，现在是在构建过程中刷新 CDN 缓存，相比之前的定时刷新更合理。<br>　　至于说为什么不再用 Coding Jenkins，有如下两个原因：<br>　　首先是由于 Coding 在镜像 Github 私有仓库时，需要的权限太大了，全 Full Access， 这也让人有点犹豫。<br>　　其次是 Coding Jenkins 自带的构建节点组件版本都比较低，在 pipeline 中构建自定义的环境需要花费一些时间，这会让整体构建时间变长。<br>　　最后，这 Github Actions 实在是太好用了，相比老前辈 Jenkins， Github Actions 简化了很多编写 pipeline 的流程， YAML 虽然有点费眼，但比起 Jenkinsfile 与 Groovy 还是好太多了，社区丰富的 action 拿来就用，优雅得不行。   </p>
<h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><p>　　以上这样一通操作下来的得到的好处就是， 我再也不用担心太懒导致的博客各个组件的更新维护问题了。<br>　　当出现某个组件&#x2F;包(包括 <a href="https://github.com/asdf-vm/asdf">asdf-vm</a> 管理的 NPM)有更新时， 依赖管理机器人都会帮我在仓库中提交 PR， 我只需要 review 一下，Github Actions 就会自动帮我完成更新发布等一系列操作，你，对这样的船新版本的 hexo 心动了吗？  </p>
]]></content>
      <tags>
        <tag>折腾</tag>
        <tag>hexo</tag>
        <tag>CI</tag>
      </tags>
  </entry>
  <entry>
    <title>软连接出现Too many levels of symbolic links错误 解决方法</title>
    <url>//post/too-many-levels.html</url>
    <content><![CDATA[<p>今天在&#x2F;mnt目录下用  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s usb /home/user/Desktop/usb</span><br></pre></td></tr></table></figure>
<p>将&#x2F;mnt&#x2F;usb软连接到&#x2F;home&#x2F;user&#x2F;Desktop的时候。打开这个软连接的时候，提示Too many levels of symbolic links <span id="more"></span><br>于是，用  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /mnt/usb /home/user/Desktop/usb</span><br></pre></td></tr></table></figure>
<p>原因是软连接连接目录的时候，必须使用绝对路径。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>通过hosts上谷歌，附上最新可用hosts</title>
    <url>//post/google-host.html</url>
    <content><![CDATA[<p>已失效移除。<span id="more"></span>    </p>
<blockquote>
<p> Hosts是一个没有扩展名的系统文件，可以用记事本等工具打开，其作用就是将一些常用的网址域名与其对应的IP地址建立一个关联“数据库”，当用户在浏览器中输入一个需要登录的网址时，系统会首先自动从Hosts文件中寻找对应的IP地址，一旦找到，系统会立即打开对应网页，如果没有找到，则系统会再将网址提交DNS域名解析服务器进行IP地址的解析。  </p>
</blockquote>
<h2 id="打开host文件"><a href="#打开host文件" class="headerlink" title="打开host文件"></a>打开host文件</h2><p>在后面加上下载的文件里面的内容并保存，然后 开始-运行-cmd回车 输入ipconfig &#x2F;flushdns 回车就可以了。</p>
<ul>
<li>Linux则执行:  <figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo rcnscd restart</span></span><br></pre></td></tr></table></figure></li>
<li>systemd发行版，请使用命令:<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo systemctl restart NetworkManager</span></span><br></pre></td></tr></table></figure></li>
<li>Mac OS X终端输入：  <figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo killall -HUP mDNSResponder</span>   </span><br></pre></td></tr></table></figure></li>
<li>Android 开启飞行模式 -&gt; 关闭飞行模式</li>
</ul>
<h2 id="hosts的路径"><a href="#hosts的路径" class="headerlink" title="hosts的路径"></a>hosts的路径</h2><ul>
<li>windows在：C:\WINDOWS\system32\drivers\etc\  </li>
<li>Linux系统hosts位于 &#x2F;etc&#x2F;hosts  </li>
<li>Android用户：首先必须root手机，然后安装root explorer管理器，打开进入&#x2F;system&#x2F;etc目录,长按host文件，弹出菜单拉到下面会看到“文本编辑器方式打开”。编辑输入即可  </li>
<li>Mac OS用户： host位置为：&#x2F;private&#x2F;etc&#x2F;hosts  </li>
<li>iPhone用户：需越狱，使用 iFunBox、PP助手、同步助手、iFile 等访问设备文件系统，备份并修改该文件后覆盖：&#x2F;etc&#x2F;hosts</li>
</ul>
<h2 id="强制HTTPS访问Google"><a href="#强制HTTPS访问Google" class="headerlink" title="强制HTTPS访问Google"></a>强制HTTPS访问Google</h2><p>推荐使用chrome浏览器，因为我们需要强制 Google.com 域名使用 HTTPS（SSL）  （http访问不了）  </p>
<h3 id="以下的步骤将以-Chrome-浏览器为例"><a href="#以下的步骤将以-Chrome-浏览器为例" class="headerlink" title="以下的步骤将以 Chrome 浏览器为例"></a>以下的步骤将以 Chrome 浏览器为例</h3><p>虽然您可以随时自行添加 HTTPS 的前缀，但是在某些情况下网页总是会自动跳到没有加密的状态，这些状态可能出现在 Google 各个网页之间的跳转，以及搜索结果链接点击之后，这会影响您的正常使用体验，因此我们建议您强制 HTTPS 连接。  在 Chrome 浏览器上输入链接：</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">chrome:</span>//net-internals/<span class="meta">#hsts</span></span><br></pre></td></tr></table></figure>
<p>（可复制此地址粘贴到地址栏），回车。  在 Domain 栏里，输入 google.com ，并勾选下面的两个复选框，点击 “Add” 按钮即可。  </p>
<blockquote>
<p>强制 Google.com.hk 域名使用 HTTPS 考虑到国内用到最多的是 google.com.hk，您需要对此域名同样增加此规则。  重复上面描述的操作，唯一的不同是，请在 Domain 栏里输入 google.com.hk 。  同理，如果你喜欢用google.com就设置为：google.com  强制 Google 网页快照使用 HTTPS 默认情况下，Google 网页快照是以非加密的 HTTP 连接打开的，这将导致它直接无法连接。要改变这一情况，请为此快照域名也添加强制 HTTPS 的规则。  重复上面描述的操作，唯一的不同是，请在 Domain 栏里输入 googleusercontent.com 。     强制 Google APIs 使用 HTTPS 某些网站加载 Google CDN 的方式可能是普通的 HTTP 连接。使用此方法强制转为 HTTPS 连接。  重复上面描述的操作，唯一的不同是，请在 Domain 栏里输入 googleapis.com 。<br>如果不喜欢用谷歌香港，可以以 <a href="https://www.google.com/ncr">https://www.google.com/ncr</a> 方式访问，(No Country Redirect)禁止国别跳转。 谷歌香港无法访问时，可以在chrome浏览器中修改默认搜索引擎地址为<a href="https://www.google.com/ncr">https://www.google.com/ncr</a>  （来自老D）  </p>
</blockquote>
]]></content>
      <tags>
        <tag>折腾</tag>
      </tags>
  </entry>
  <entry>
    <title>解决zblog中Litten主题下代码高亮显示透明的方法</title>
    <url>//post/zblog-highlight.html</url>
    <content><![CDATA[<p>博客用的主题是tt_Litten主题，发现在该主题下的代码高亮显示的部分代码呈现透明形式，这样阅读起来比较不方便。经过折腾解决了这个问题。  </p>
<span id="more"></span>  
<p>方法如下：<br>未修改之前是这种状态：<br><img data-src="https://static.iots.vip/2017/02/201702018745_3852.png"><br>（需要选中才能看到完整的代码内容）<br>先对此审查元素：<br><img data-src="https://static.iots.vip/2017/02/201702019437_6098.png"><br>我对前端不熟悉。。 。开始是以为在style.css中一起的，找了一遍没发现。  </p>
<p>于是在网上看了一下prism：  </p>
<blockquote>
<p>Prism 是一款轻量、可扩展的代码语法高亮库，使用现代化的 Web 标准构建。  </p>
</blockquote>
<p>于是发觉应该是独立出来的css与js，在根目录下search一下，发现是UEditor插件目录下的（也就是&#x2F;zb_users&#x2F;plugin&#x2F;UEditor&#x2F;third-party&#x2F;prism）<br>打开，编辑，找到30行左右<br><img data-src="https://static.iots.vip/2017/02/201702011138_3897.jpg"><br>将background后面的none改为black或者其他颜色就行。</p>
]]></content>
      <tags>
        <tag>折腾</tag>
      </tags>
  </entry>
  <entry>
    <title>配置Coding仓库与GitHub仓库同步更新</title>
    <url>//post/coding-github-repository.html</url>
    <content><![CDATA[<p>　　就在这两天，GitHub 宣布免费无限私有 repository 了，于是打算将 Coding 上的一些仓库丢 GitHub 一同管理与更新。 <span id="more"></span><br>本文是在部署了 Coding 仓库密钥的情况下进行的。若没有部署密钥，请参考 <a href="https://coding.net/help/docs/repo/ssh/config.html">如何配置 SSH 公钥访问 git 仓库? – CODING 帮助中心</a></p>
<h2 id="导入-Coding-仓库到-GitHub"><a href="#导入-Coding-仓库到-GitHub" class="headerlink" title="导入 Coding 仓库到 GitHub"></a>导入 Coding 仓库到 GitHub</h2><p>新建一个 GitHub 仓库如图：<br><img data-src="https://static.iots.vip/github%E4%B8%8Ecoding%E5%90%8C%E6%AD%A5%E6%9B%B4%E6%96%B0-%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93.png" alt="github与coding同步更新-新建仓库"><br>仓库是私有还是公开根据自己需要来选择，我这里是私有仓库所以选择私有。<br>　　进入对应的仓库，选择 “Import code”,进入导入页面，填写旧仓库的地址，如我的一个仓库的地址为：  </p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>t.dev.tencent.com<span class="regexp">/Alliot/</span>alliot-private-repository.git </span><br></pre></td></tr></table></figure>
<p>开始导入，如果旧仓库是私有的可能会要求你输入旧仓库(Coding)的用户名与密码，导入完成后会有邮件提示。 之后复制该 GitHub 仓库的 ssh 地址,如我的地址为: </p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="symbol">git@</span>github.com:AlliotTech/alliot-<span class="keyword">private</span>-repository.git  </span><br></pre></td></tr></table></figure>
<h2 id="修改本地仓库"><a href="#修改本地仓库" class="headerlink" title="修改本地仓库"></a>修改本地仓库</h2><p>修改项目仓库中 <code>.git</code> 目录下的 <code>config</code> 文件（该文件夹默认隐藏，不会请自行谷歌 “win10显示隐藏文件夹”）<br>在 <code>[remote &quot;origin&quot;]</code> 字段下添加：  </p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">url</span> = git.github.com:AlliotTech/alliot-private-repository.git   <span class="comment">#这里为第一步复制的仓库ssh地址</span></span><br></pre></td></tr></table></figure>
<h2 id="导入ssh密钥"><a href="#导入ssh密钥" class="headerlink" title="导入ssh密钥"></a>导入ssh密钥</h2><p>本地仓库下打开 <code>Git Bash</code> (文件夹下右键，选择”Git Bash Here”)，输入:  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh  </span><br></pre></td></tr></table></figure>
<p>将之前部署到 Coding 的密钥复制下来，如我的密钥文件在该目录下的 <code>id_rsa.pub</code> 中：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> id_rsa.pub  </span><br></pre></td></tr></table></figure>
<p>复制到剪切板，打开 GitHub 仓库，选择 <code>setting</code> - <code>Deploy keys</code> - <code>Add deploy keys</code> 粘贴保存即可。  </p>
<h2 id="同步更新"><a href="#同步更新" class="headerlink" title="同步更新"></a>同步更新</h2><p>现在只要执行 <code>git push origin</code> 即可同时 <code>push</code> 到 Coding 与 GitHub。  </p>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>通过frp内网穿透实现外网访问校内资源</title>
    <url>//post/frp-nat-proxy.html</url>
    <content><![CDATA[<p>　　又到了要交论文的毕业季，如何在外网访问学校免费的万方、知网等数据库是个问题，本文记录了通过frp工具实现内网穿透从而实现外网访问校内资源的过程。<span id="more"></span><br>　　frp 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp, http, https 协议。项目地址：<a href="https://github.com/fatedier/frp">frp</a>  </p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>我们需要用到的有： </p>
<ul>
<li>一台具有公网IP的VPS(本文使用的CentOS 64位)  </li>
<li>一台学校内网电脑(不要求有固定公网IP，能免费访问万方等数据库就行，本文使用的系统为win7 64位)</li>
</ul>
<p>根据系统环境从<a href="https://github.com/fatedier/frp/releases">项目版本页</a> 下载对应的版本。这里我们下载 <code>frp_0.18.0_linux_amd64.tar.gz与frp_0.18.0_windows_amd64.zip</code>    </p>
<h2 id="配置服务器端"><a href="#配置服务器端" class="headerlink" title="配置服务器端"></a>配置服务器端</h2><p>　　将 <code>frp_0.18.0_linux_amd64.tar.gz</code> 上传到服务器中并解压，这里服务器端只需要用到 <code>frps</code> 与 <code>frps.ini</code> 两个文件，其他的可以删除。<br>配置文件使用默认，执行:  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> +x frps</span><br><span class="line">./frps -c frps.ini</span><br></pre></td></tr></table></figure>
<p>输出信息为</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">2018</span>/<span class="number">05</span>/<span class="number">05</span> <span class="number">11</span>:<span class="number">45</span>:<span class="number">23</span><span class="meta"> [I] [service.go:96] frps tcp listen on 0.0.0.0:7000</span></span><br><span class="line"><span class="meta">2018/05/05 11:45:23 [I] [root.go:172] Start frps success</span></span><br></pre></td></tr></table></figure>
<p>即可。  </p>
<h2 id="配置客户端"><a href="#配置客户端" class="headerlink" title="配置客户端"></a>配置客户端</h2><p>　　解压 <code>frp_0.18.0_windows_amd64.zip</code> ，这里客户端也只需要用到两个文件，<code>frpc.exe</code> 与 <code>frpc.ini</code><br>我们这里使用 <code>http_proxy</code> 模式，关于frp的其他功能配置见<a href="https://github.com/fatedier/frp">frp项目首页</a>  使用notepad++修改 <code>frpc.ini</code> 如下：  </p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = 你的服务器IP </span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="section">[http_proxy]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6000</span></span><br><span class="line"><span class="attr">plugin</span> = http_proxy </span><br></pre></td></tr></table></figure>
<p>打开命令提示符cmd，CD到解压目录<br>执行:  </p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">frpc.exe -<span class="keyword">c</span> frpc.ini</span><br></pre></td></tr></table></figure>
<p>无error即可。<br>同时在服务器端输出类似于  </p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">2018</span>/<span class="number">05</span>/<span class="number">05</span> <span class="number">11</span>:<span class="number">45</span>:<span class="number">39</span><span class="meta"> [I] [proxy.go:86] [0dasdasdaadf3] [http_proxy] get a new work connection: [xxxxxx:xxx]</span></span><br></pre></td></tr></table></figure>
<p>信息即表示测试通过。  </p>
<h2 id="正式部署"><a href="#正式部署" class="headerlink" title="正式部署"></a>正式部署</h2><h3 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h3><p>　　将服务器端的程序丢到后台执行：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">nohup</span> ./frps -c frps.ini &amp;     <span class="comment">#这里是将命令./frps -c frps.ini在后台执行不挂起，忽略输入并把输出追加到&quot;nohup.out，可以使用jobs -l查看该进程    </span></span><br></pre></td></tr></table></figure>
<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>　　通过vb来实现后台启动frp客户端:<br>新建文件 <code>frp.vbs</code> ,添加内容为：  </p>
<figure class="highlight vb"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dim</span> objShell </span><br><span class="line"><span class="keyword">set</span> objShell=wscript.createObject(<span class="string">&quot;WScript.Shell&quot;</span>) </span><br><span class="line">iReturnCode=objShell.Run(<span class="string">&quot;C:\Windows\frp\frpc.exe -c C:\Windows\frp\frpc.ini&quot;</span>,<span class="number">0</span>,<span class="literal">TRUE</span>) </span><br></pre></td></tr></table></figure>
<p>这里 <code>C:\Windows\frp\frpc.exe -c C:\Windows\frp\frpc.ini</code> 我是将 <code>frpc.exe</code> 与 <code>frpc.ini</code> 两个文件置于C盘Windows\frp文件夹下的，大家可以根据自己的路径来修改。<br>　　这样我们直接双击 <code>frp.vbs</code> 即可执行，可以在任务管理器中看到 <code>frpc.exe</code> 的进程。<br>　　打开运行(开始菜单-运行)输入</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="variable">%APPDATA%</span>\Microsoft\Windows\<span class="built_in">Start</span> Menu\Programs\Startup</span><br></pre></td></tr></table></figure>
<p>并回车弹出资源管理器，将 <code>frp.vbs</code> 放入该目录下，即可实现开机后台自启(具体有什么用，你懂的)   </p>
<h2 id="浏览器设置"><a href="#浏览器设置" class="headerlink" title="浏览器设置"></a>浏览器设置</h2><p>现在我们已经在家里准备用学校的万方了，应该怎样设置呢？<br>由于我们frp客户端使用的是 <code>http_proxy</code> 模式，所以需要在我们的浏览器中添加一个代理服务器：<br>点击浏览器设置——代理服务器设置(360极速浏览器直接在地址栏输入chrome:&#x2F;&#x2F;settings&#x2F;proxy360)<br>在代理服务器列表中输入: <code>你的IP:6000</code> ，并在代理服务器设置中勾选该代理即可。<br>现在你已经能够免费下载万方等数据库的论文了。  </p>
<h2 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h2><ul>
<li>客户端与服务器端时间不能相差太大！否则会出现认证超时的错误:authorization timeout，关于如何同步服务器时间，可见<a href="https://www.iots.vip/post/centos-ntpdate.html">CentOS服务器设置自动时间同步</a></li>
</ul>
<p>温馨提示： 请根据学校的政策来决定是否使用这种方法来下载论文，仅供参考，引起的一切法律后果与本人无关，参考：<br><a href="http://www.ifanr.com/731436">被指控 13 项重罪仅因过量下载论文，互联网之子 26 岁被迫自缢而终</a>  </p>
]]></content>
      <tags>
        <tag>折腾</tag>
        <tag>CentOS</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>配置阿里云Docker镜像加速度器</title>
    <url>//post/aliyun-docker-mirrors.html</url>
    <content><![CDATA[<p>　　Docker 在推拉镜像的时候速度有时很慢，我们可以使用阿里的镜像加速器。<span id="more"></span>  </p>
<h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>登录<a href="https://cr.console.aliyun.com/cn-qingdao/mirrors">阿里云后台</a> 进入容器镜像服务，获取自己的镜像加速器地址。<br><img data-src="https://static.iots.vip/%E9%98%BF%E9%87%8C%E4%BA%91%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8.png" alt="阿里云镜像加速器.png">  </p>
<h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>根据提示修改 <code>/etc/docker/daemon.json</code> 来使用加速器：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/docker</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://xxx(你的地址).mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>
<h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>检查修改是否生效：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure>
<p><code>Registry Mirrors:</code> 为你的镜像加速器地址即可。  </p>
<p>~~腾讯云 docker 镜像配置 ~~<br>　　如果使用的是腾讯云的 VPS，更推荐使用以下配置：  </p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">       <span class="string">&quot;https://mirror.ccs.tencentyun.com&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>迟到的2018总结</title>
    <url>//post/mind/goodbye-2018.html</url>
    <content><![CDATA[<p>现在都流行年底做总结，我呢，懒得不行，硬是将 2018 的年终总结拖到了大年初二吃完早餐的一个没啥事做的时间点。 话说偷偷改一下发布时间也行，应该没人会发现(逃   <span id="more"></span></p>
<h2 id="学业"><a href="#学业" class="headerlink" title="学业"></a>学业</h2><ul>
<li>作为一个曾想过辍学的学渣，好不容易把学业任务完成了，值得表扬一下自己。  </li>
<li>尝试了一下考研，体验了一下这个过程，结果好像也没那么重要了，通过考研，把英语词汇提升了一点，然后也结交了一些很优秀的朋友，也算是一些不错的收获。科研圈虽然是自己一直想进入的圈子，但自己目前的生理心理状态还是不太能行，有些无奈也有些不甘，不过当下也只能这样了，状态好转再做打算。</li>
</ul>
<h2 id="健康"><a href="#健康" class="headerlink" title="健康"></a>健康</h2><ul>
<li>准备考研的期间，特意调整了一下生活作息，相比 2017 要规律很多了，气色好了不少，人也精神了。  </li>
<li>电子产品用的还是太频繁、时间太长了，刷题的时候也没有注意，感觉视力下降了很多，把陪伴了我 7 年的眼镜换了。  </li>
<li>减肥计划断断续续，瘦了 20 斤又胖回来 15 斤，过年怕是连本带利都回来了。骑行和健身房没能让我瘦下来，但是体能还是有点提升，爬山没那么费劲了。</li>
</ul>
<h2 id="感情"><a href="#感情" class="headerlink" title="感情"></a>感情</h2><p>　　嗯，也算是经历了一些东西，这种东西写也写不好，只能说这种东西太复杂了，我是个头脑简单的人，起码在这上面是这样，不过还是明白一个道理，有什么问题有什么困惑有什么不开心，两人的沟通最为重要。还有就是不要在头脑发热的情况下做一些决定、说一些话，恶语伤人六月寒！有时候真的是错过了就不再。    </p>
<p>　　话不多说，2018 已经翻过去了，2019 继续前行~ 向着更好的自己前进！   </p>
]]></content>
      <tags>
        <tag>心思随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>验光配镜扫盲</title>
    <url>//post/choose-glasses.html</url>
    <content><![CDATA[<p>&emsp;&emsp;眼镜是心灵的窗户，不巧，我的窗户不是很标准，从小到大，戴过很多副眼镜，从三甲到爱某眼科、宝某、博某，呱呱呱一顿操作下来自己啥也不懂是什么意思，最近由于眼镜被我一屁股坐坏了，就在附近的眼镜城配了眼镜，之后就有了此文。<span id="more"></span></p>
<blockquote>
<p>申明： Alliot 非医疗业内人士，并无任何医学背景，因此全文仅作为自己与家人朋友验光配镜时查验备用。不涉及任何医学建议意向，切记!  </p>
</blockquote>
<h3 id="配镜流程"><a href="#配镜流程" class="headerlink" title="配镜流程"></a>配镜流程</h3><h4 id="视力检查"><a href="#视力检查" class="headerlink" title="视力检查"></a>视力检查</h4><p>通常三甲医院会给安排一系列的眼科类检查，类似裂隙灯、瞳孔检查、眼压检查之类的以确定眼睛状况。 普通眼镜店一般就不会有。</p>
<h4 id="电脑验光"><a href="#电脑验光" class="headerlink" title="电脑验光"></a>电脑验光</h4><p>即让你将下巴搁上去，注视仪器里的气球的那个机器。  </p>
<h4 id="验光师检影验光"><a href="#验光师检影验光" class="headerlink" title="验光师检影验光"></a>验光师检影验光</h4><p>电脑验光仪测出的度数往往高于检影验光的度数,所以,电脑验光仪不能代替验光师人工主观验光，只是给人工验光提供参考。  </p>
<p>只有验光师开出的处方单才可以作为配镜数据。 一般是暗室检影、试戴矫正，过程中会拿出组合的眼镜供你试戴。  </p>
<h4 id="测瞳距"><a href="#测瞳距" class="headerlink" title="测瞳距"></a>测瞳距</h4><p>瞳距是指两眼瞳孔中心的距离，在制作眼镜时，根据患者的瞳距来确定适当的镜片中心位置以及度数，以达到更好的视觉效果。如果镜片中心位置不正确，则可能会出现头痛、眩晕等问题。  </p>
<h4 id="选镜框"><a href="#选镜框" class="headerlink" title="选镜框"></a>选镜框</h4><p>镜腿上通常有类似如下的标识： </p>
<blockquote>
<p> 1507   51口17-140 C2  </p>
</blockquote>
<p>1507 是型号<br>51 是眼镜圈直径<br>17 是鼻梁长度<br>140 是镜腿长度<br>C2 是色号  </p>
<h4 id="关于散瞳"><a href="#关于散瞳" class="headerlink" title="关于散瞳"></a>关于散瞳</h4><p>小孩子眼睛调节力较强，验光时如果不散瞳，在调节作用下，晶状体变凸，屈光力增强。在有调节的情况下，验光往往导致所检查出来的度数偏高。所以散瞳的主要目的是使睫状肌麻痹，从而使眼的调节力完全放松，检查的度数因为没有调节的干扰更加准确。 一般来说成年人配镜时不会做散瞳。  </p>
<h3 id="验光单"><a href="#验光单" class="headerlink" title="验光单"></a>验光单</h3><p>电脑验光单怎样去看呢？<br>这里随意从网上找了一个验光单来举例：<br><img data-src="https://static.iots.vip/%E9%AA%8C%E5%85%89%E5%8D%95%E7%A4%BA%E4%BE%8B.png" alt="验光单示例"><br>一般电脑验光为3次取平均值。<br>此图里表示：<br>右眼远视（+ 为远视） 50 度(球镜 * 100) 、散光 0 度、散光轴位 0 度<br>左眼近视（- 为近视） 175度、 散光 0 度、 散光轴位 0 度。  </p>
<p>下面讲一下几个术语的含义，带 * 的为常见的几个术语。  </p>
<h4 id="球镜（Sphere）"><a href="#球镜（Sphere）" class="headerlink" title="球镜（Sphere）*"></a>球镜（Sphere）*</h4><p>表示近视或远视的程度，以度数为单位。正值表示远视，负值表示近视  </p>
<h4 id="柱镜（Cylinder）"><a href="#柱镜（Cylinder）" class="headerlink" title="柱镜（Cylinder）*"></a>柱镜（Cylinder）*</h4><p>表示散光的程度，也以度数为单位。如果没有散光问题，则柱镜的值为0  </p>
<h4 id="轴位（Axis）"><a href="#轴位（Axis）" class="headerlink" title="轴位（Axis）*"></a>轴位（Axis）*</h4><p>表示柱镜的方向，以度数为单位，从0度到180度，通常以水平方向为基准。<br>例如，一个柱镜值为-2.00D，轴位为90度，则表示患者有90度方向上的2度散光问题  </p>
<h4 id="瞳距（PD）"><a href="#瞳距（PD）" class="headerlink" title="瞳距（PD）*"></a>瞳距（PD）*</h4><p>指眼睛瞳孔中心之间的距离，通常用毫米（mm）作为单位。瞳距是个人视觉系统的一个重要参数，它对眼镜和隐形眼镜等视力矫正设备的选择具有影响。</p>
<p>准确测量瞳距非常重要，因为如果瞳距不正确，可能会导致眼镜或隐形眼镜的中心位置与瞳孔中心不匹配，从而影响矫正效果甚至引发不适感。</p>
<p>一般来说，成年人的瞳距范围为54到74毫米，但实际上每个人的瞳距大小都是不同的，需要通过专业仪器进行测量。验光师在进行配镜时，会测量患者的瞳距，并将其记录在处方中，以便制造商生产出适合患者的眼镜或隐形眼镜。  </p>
<h4 id="棱镜（Prism）"><a href="#棱镜（Prism）" class="headerlink" title="棱镜（Prism）"></a>棱镜（Prism）</h4><p>在视力矫正中，棱镜可以用来矫正斜视问题。例如，当一个人的眼睛无法同时聚焦到相同的点上时，就会导致双目不协调性，产生斜视。通过将棱镜嵌入到眼镜镜片中，眼睛看到的图像会发生微小的偏移，从而使得双眼能够更好地协调工作。 </p>
<h4 id="底向-Base"><a href="#底向-Base" class="headerlink" title="底向(Base)"></a>底向(Base)</h4><p>又称为基底方向，是指眼镜镜片的曲率方向相对于水平面的方向。它通常用来描述某个棱镜在眼镜镜片中的朝向。<br>底向分为两种类型：上向和下向。在矫正斜视问题时，如果需要在眼镜中加入棱镜，就需要确定棱镜的基底方向，以使其朝向正确的方向。例如，如果患者有左眼外斜视的问题，需要将棱镜放在左眼的镜片上，这时候基底方向将被指定为“向上”。因此，每个棱镜都必须标明其基底方向，以便制造商可以将它们安装在适当的位置上。<br>需要注意的是，底向的描述方式可能会因地区而异。在一些国家&#x2F;地区，人们使用“基底朝鼻”或“基底朝太阳穴”的术语来表示基底方向。  </p>
<h3 id="关于镜片"><a href="#关于镜片" class="headerlink" title="关于镜片"></a>关于镜片</h3><p>这是配镜里水很深的一个地方，镜片的品牌很多，每个品牌的产品手册价格表也是很厚的一本。作为消费者很难去了解每个种类产品，Alliot 也不例外。这里仅仅讲几个常识：  </p>
<h4 id="折射率"><a href="#折射率" class="headerlink" title="折射率"></a>折射率</h4><p>这个参数代表镜片折射光线的能力。折射率越高，表示镜片越薄，重量越轻。同类产品线的镜片折射率越高价格也越高，同时色散程度也越高，因此配镜并不是折射率越高越好，应当根据实际情况选择合适的折射率。 通常来说：<br>低度近视（低于300度）选择1.56到1.60折射率的镜片<br>中度近视（325度到600度）选择1.60到1.67折射率的镜片<br>超过600度的近视选择1.67到1.74折射率的镜片。  </p>
<h4 id="阿贝数"><a href="#阿贝数" class="headerlink" title="阿贝数"></a>阿贝数</h4><p>用于描述透镜色散程度的物理量。 它越高，则表示透镜的色散程度越小，颜色畸变现象也就越少；反之则表示透镜的色散程度越大，颜色畸变现象也就越明显。<br>阿贝系数其实就是色散系数，通俗的讲就是眼镜边缘看物体更接近人眼没有紫边黄边蓝边。一般来说，介质的折射率越大，色散就越严重，即阿贝数越低。这也是不要盲目追求折射率的另一个原因。  </p>
<h4 id="品牌"><a href="#品牌" class="headerlink" title="品牌"></a>品牌</h4><p>常见的品牌有： 尼康、蔡司、依视路、明月、万新、舒曼、豪雅。<br>各个产品的产品手册都会介绍的比较详细，包括价格。需要注意的是，一般实际价格是产品手册上<strong>标价</strong>的<strong>三折</strong>左右，在眼镜店配镜的时候尽量朝着这个折扣去谈。  </p>
<h4 id="镜片寿命"><a href="#镜片寿命" class="headerlink" title="镜片寿命"></a>镜片寿命</h4><p>一般镜片的寿命推荐是两年，好一些的镜片，注意保养会稍长，但也不建议超过三年， 超过这个时间后最好重新验光配镜。  青少年因为还在发育，度数可能会有变化，验光这个时间跨度最好缩短到半年到一年，当发现度数变化大于 50 度就要重新配镜。  </p>
]]></content>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>黑苹果与m1外接显示器廉价方案</title>
    <url>//post/displaylink-hub.html</url>
    <content><![CDATA[<p>　　这也许是无法驱动独显的黑苹果笔记本想要外接显示器的唯一方案。<span id="more"></span>  </p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>　　最近给我的 Y7000 装上了黑苹果（所用的 EFI 已上传 GitHub: <a href="https://github.com/AlliotTech/hackintosh-y7000-2018-i58300H">hackintosh-y7000-2018-i58300H</a>），一切似乎都很完美，然而，由于 N 卡的驱动目前（或者说未来）都没有可能驱动，板载的 HDMI DP 接口均走的独显，因此无法实现外接视频输出（普通的 USB 转 HDMI 也是走的该通道），经过群友们的测试，仅带外置显卡芯片的 USB 转接头能够实现外接显示器，售价在普遍在 200 左右。这符合垃圾佬的气质与价值观吗？很明显，一点也不。<br>　　通过查阅这些所谓的外接显卡芯片转接头发现，这些转接头普遍采用的是一个 “古老” 的方案——DisplayLink 方案。（事实上，Fresco logic 方案也有一部分,见的比较少，也没有尝试过）  </p>
<h3 id="外置显卡？No"><a href="#外置显卡？No" class="headerlink" title="外置显卡？No"></a>外置显卡？No</h3><p>　　DiskplayLink 并非传统意义上的外置显卡，而是通过安装在PC上的虚拟图形卡（VGC）软件和嵌入或连接到显示设备的硬件渲染引擎（HRE）组成（<a href="https://en.wikipedia.org/wiki/DisplayLink">wikipedia</a>），在使用时会占用一部分的 CPU 资源来供图形转换用。</p>
<h3 id="寻找廉价可用品"><a href="#寻找廉价可用品" class="headerlink" title="寻找廉价可用品"></a>寻找廉价可用品</h3><p>　　DisplayLink 其所用的驱动通用，理论上来说，所有 DisplayLink 的转接头或是拓展坞都可以。DL 3X00 系列的拓展坞价格基本在 160 - 400，偶然的机会发现 Thinkpad Pro dock 系列均采用的 DiskplayLink 芯片, 淘宝与闲鱼上有大量的洋垃圾，这里 Alliot 选择的是 40A7 版本。<a href="https://pcsupport.lenovo.com/us/en/solutions/acc100184">ThinkPad USB 3.0 Pro Dock - Overview and Service Parts</a>，闲鱼上 65 不带电源入手（联想方口电源适配器通用），采用的 DL3000 方案，<a href="https://www.displaylink.com/integrated-chipsets/dl-3000">DisplayLink DL-3000 Series</a>，接口很丰富，比较遗憾的是，视频输出只有 DP 与 DVI 接口。<br><img data-src="https://static.iots.vip/displaylink%E8%AE%A2%E5%8D%95.jpg" alt="displaylink订单"><br><img data-src="https://static.iots.vip/Thinkpad%20pro%20dock.jpg" alt="thinkpad pro dock 40a7">  </p>
<h3 id="体验"><a href="#体验" class="headerlink" title="体验"></a>体验</h3><p>　　DisplayLink 的图形输出采用的是软硬结合的模式，因此必须安装驱动 DisplayLink Manager，<a href="https://www.displaylink.com/downloads">下载</a>安装后，必须要启动该软件才可以有视频输出(网卡、声卡等拓展出的接口不受影响)。<br>　　<img data-src="https://static.iots.vip/displaylink_driver.jpg" alt="displaylink manager"><br>　　目前，我使用的是 24 寸 1080P 的显示器，CPU 占用可以忽略不计，延迟也几乎感觉不到，基本能够满足需求。（根据前面官方的 DL3000 系列的文档，带 2K 分辨率其实也是可以的，4K 就不行了）。macOS 下，识别的显示器尺寸不正确：<br>  <img data-src="https://static.iots.vip/displaylink%E6%98%BE%E7%A4%BA%E5%99%A8macos.jpg" alt="displaylink显示器识别"><br>　　拓展坞的网卡、USB type-A 接口，在 macOS 下均免驱正常使用，只有声卡有问题： 音质很正常（比仿冒声卡的音质好一万倍），能够在设备列表中识别为 Lenovo USB 声卡，不过在使用了一段时间的情况下，会出现声音断断续续的情况，必须重新插拔后才能恢复正常，尝试抓取了日志，没能找到具体原因，个人猜测问题还是出在黑苹果驱动的问题上（或许是 USB 内建的原因？），期待有条件的同学测试反馈。  </p>
]]></content>
      <tags>
        <tag>折腾</tag>
      </tags>
  </entry>
  <entry>
    <title>防止rm -rf误操作</title>
    <url>//post/linux-prevent-rm-rf.html</url>
    <content><![CDATA[<p>经常有误操作删库的新闻，今天在逛Linux论坛发现不错的方法，这里记录一下，侵删 <span id="more"></span></p>
<p>原理很简单，设置一个类似Windows下的回收站的功能。<br>在~下 .bashrc或者.bash_profile加入:  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ~/.trash</span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> <span class="built_in">rm</span>=trash  </span><br><span class="line"><span class="built_in">alias</span> r=trash</span><br><span class="line"><span class="built_in">alias</span> rl=<span class="string">&#x27;ls ~/.trash&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> ur=undelfile</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">undelfile</span></span>()</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">mv</span> -i ~/.trash/<span class="variable">$@</span> ./</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">trash</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">mv</span> <span class="variable">$@</span> ~/.trash/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样执行rm就相当于执行了mv </p>
<ul>
<li>注：此时已经木有rm -rf了<br>删除的文件会在.trash中出现  可以进行恢复<br>这就有一个问题：如何清空回收站呢，rm在这里是木有用的，所以在刚才.bashrc下继续加函数：<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">cleartrash()</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">read -p <span class="string">&quot;clear sure?[n]&quot;</span> confirm</span><br><span class="line">	[ <span class="symbol">$co</span>nfirm == <span class="string">&#x27;y&#x27;</span> ] || [ <span class="symbol">$co</span>nfirm == <span class="string">&#x27;Y&#x27;</span> ] &amp;&amp; <span class="regexp">/usr/</span>bin/rm -rf ~<span class="regexp">/.trash/</span>*</span><br><span class="line">&#125;</span><br><span class="line">$. .bashrc</span><br></pre></td></tr></table></figure>
然后，如果想清空回收站的话，执行$cleartrash就行了。</li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
</search>
